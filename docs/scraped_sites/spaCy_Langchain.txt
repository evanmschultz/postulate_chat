spaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython. Import the necessary classes Initialize SpacyEmbeddings.This will load the Spacy model into memory. Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews. Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification. Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAleph AlphaAwaDBAzureOpenAIBedrockBGE on Hugging FaceClarifaiCohereDashScopeDeepInfraEDEN AIElasticsearchEmbaasERNIE Embedding-V1Fake EmbeddingsGoogle Vertex AI PaLMGPT4AllHugging FaceInstructEmbeddingsJinaLlama-cppLocalAIMiniMaxModelScopeMosaicMLNLP CloudOpenAISageMakerSelf HostedSentence TransformersSpaCyTensorflowHubXorbits inference (Xinference)Agents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding modelsAleph AlphaAwaDBAzureOpenAIBedrockBGE on Hugging FaceClarifaiCohereDashScopeDeepInfraEDEN AIElasticsearchEmbaasERNIE Embedding-V1Fake EmbeddingsGoogle Vertex AI PaLMGPT4AllHugging FaceInstructEmbeddingsJinaLlama-cppLocalAIMiniMaxModelScopeMosaicMLNLP CloudOpenAISageMakerSelf HostedSentence TransformersSpaCyTensorflowHubXorbits inference (Xinference) Aleph Alpha AwaDB AzureOpenAI Bedrock BGE on Hugging Face Clarifai Cohere DashScope DeepInfra EDEN AI Elasticsearch Embaas ERNIE Embedding-V1 Fake Embeddings Google Vertex AI PaLM GPT4All Hugging Face InstructEmbeddings Jina Llama-cpp LocalAI MiniMax ModelScope MosaicML NLP Cloud OpenAI SageMaker Self Hosted Sentence Transformers SpaCy TensorflowHub Xorbits inference (Xinference) Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Text embedding models SpaCy SpacyEmbeddings Installation and Setup Example Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAleph AlphaAwaDBAzureOpenAIBedrockBGE on Hugging FaceClarifaiCohereDashScopeDeepInfraEDEN AIElasticsearchEmbaasERNIE Embedding-V1Fake EmbeddingsGoogle Vertex AI PaLMGPT4AllHugging FaceInstructEmbeddingsJinaLlama-cppLocalAIMiniMaxModelScopeMosaicMLNLP CloudOpenAISageMakerSelf HostedSentence TransformersSpaCyTensorflowHubXorbits inference (Xinference)Agents & ToolkitsToolsVector storesGrouped by providerIntegrationsText embedding modelsSpaCyOn this pageSpaCyspaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython.Installation and Setup‚Äã#!pip install spacyImport the necessary classesfrom langchain.embeddings.spacy_embeddings import SpacyEmbeddingsAPI Reference:SpacyEmbeddingsExample‚ÄãInitialize SpacyEmbeddings.This will load the Spacy model into memory.embedder = SpacyEmbeddings()Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}")PreviousSentence TransformersNextTensorflowHubInstallation and SetupExampleCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAleph AlphaAwaDBAzureOpenAIBedrockBGE on Hugging FaceClarifaiCohereDashScopeDeepInfraEDEN AIElasticsearchEmbaasERNIE Embedding-V1Fake EmbeddingsGoogle Vertex AI PaLMGPT4AllHugging FaceInstructEmbeddingsJinaLlama-cppLocalAIMiniMaxModelScopeMosaicMLNLP CloudOpenAISageMakerSelf HostedSentence TransformersSpaCyTensorflowHubXorbits inference (Xinference)Agents & ToolkitsToolsVector storesGrouped by providerIntegrationsText embedding modelsSpaCyOn this pageSpaCyspaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython.Installation and Setup‚Äã#!pip install spacyImport the necessary classesfrom langchain.embeddings.spacy_embeddings import SpacyEmbeddingsAPI Reference:SpacyEmbeddingsExample‚ÄãInitialize SpacyEmbeddings.This will load the Spacy model into memory.embedder = SpacyEmbeddings()Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}")PreviousSentence TransformersNextTensorflowHubInstallation and SetupExample IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAleph AlphaAwaDBAzureOpenAIBedrockBGE on Hugging FaceClarifaiCohereDashScopeDeepInfraEDEN AIElasticsearchEmbaasERNIE Embedding-V1Fake EmbeddingsGoogle Vertex AI PaLMGPT4AllHugging FaceInstructEmbeddingsJinaLlama-cppLocalAIMiniMaxModelScopeMosaicMLNLP CloudOpenAISageMakerSelf HostedSentence TransformersSpaCyTensorflowHubXorbits inference (Xinference)Agents & ToolkitsToolsVector storesGrouped by providerIntegrationsText embedding modelsSpaCyOn this pageSpaCyspaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython.Installation and Setup‚Äã#!pip install spacyImport the necessary classesfrom langchain.embeddings.spacy_embeddings import SpacyEmbeddingsAPI Reference:SpacyEmbeddingsExample‚ÄãInitialize SpacyEmbeddings.This will load the Spacy model into memory.embedder = SpacyEmbeddings()Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}")PreviousSentence TransformersNextTensorflowHubInstallation and SetupExample IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAleph AlphaAwaDBAzureOpenAIBedrockBGE on Hugging FaceClarifaiCohereDashScopeDeepInfraEDEN AIElasticsearchEmbaasERNIE Embedding-V1Fake EmbeddingsGoogle Vertex AI PaLMGPT4AllHugging FaceInstructEmbeddingsJinaLlama-cppLocalAIMiniMaxModelScopeMosaicMLNLP CloudOpenAISageMakerSelf HostedSentence TransformersSpaCyTensorflowHubXorbits inference (Xinference)Agents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAleph AlphaAwaDBAzureOpenAIBedrockBGE on Hugging FaceClarifaiCohereDashScopeDeepInfraEDEN AIElasticsearchEmbaasERNIE Embedding-V1Fake EmbeddingsGoogle Vertex AI PaLMGPT4AllHugging FaceInstructEmbeddingsJinaLlama-cppLocalAIMiniMaxModelScopeMosaicMLNLP CloudOpenAISageMakerSelf HostedSentence TransformersSpaCyTensorflowHubXorbits inference (Xinference)Agents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsText embedding modelsSpaCyOn this pageSpaCyspaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython.Installation and Setup‚Äã#!pip install spacyImport the necessary classesfrom langchain.embeddings.spacy_embeddings import SpacyEmbeddingsAPI Reference:SpacyEmbeddingsExample‚ÄãInitialize SpacyEmbeddings.This will load the Spacy model into memory.embedder = SpacyEmbeddings()Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}")PreviousSentence TransformersNextTensorflowHubInstallation and SetupExample IntegrationsText embedding modelsSpaCyOn this pageSpaCyspaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython.Installation and Setup‚Äã#!pip install spacyImport the necessary classesfrom langchain.embeddings.spacy_embeddings import SpacyEmbeddingsAPI Reference:SpacyEmbeddingsExample‚ÄãInitialize SpacyEmbeddings.This will load the Spacy model into memory.embedder = SpacyEmbeddings()Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}")PreviousSentence TransformersNextTensorflowHubInstallation and SetupExample IntegrationsText embedding modelsSpaCyOn this pageSpaCyspaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython.Installation and Setup‚Äã#!pip install spacyImport the necessary classesfrom langchain.embeddings.spacy_embeddings import SpacyEmbeddingsAPI Reference:SpacyEmbeddingsExample‚ÄãInitialize SpacyEmbeddings.This will load the Spacy model into memory.embedder = SpacyEmbeddings()Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}")PreviousSentence TransformersNextTensorflowHub IntegrationsText embedding modelsSpaCyOn this pageSpaCyspaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython.Installation and Setup‚Äã#!pip install spacyImport the necessary classesfrom langchain.embeddings.spacy_embeddings import SpacyEmbeddingsAPI Reference:SpacyEmbeddingsExample‚ÄãInitialize SpacyEmbeddings.This will load the Spacy model into memory.embedder = SpacyEmbeddings()Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}")PreviousSentence TransformersNextTensorflowHub On this page SpaCyspaCy is an open-source software library for advanced natural language processing, written in the programming languages Python and Cython.Installation and Setup‚Äã#!pip install spacyImport the necessary classesfrom langchain.embeddings.spacy_embeddings import SpacyEmbeddingsAPI Reference:SpacyEmbeddingsExample‚ÄãInitialize SpacyEmbeddings.This will load the Spacy model into memory.embedder = SpacyEmbeddings()Define some example texts . These could be any documents that you want to analyze - for example, news articles, social media posts, or product reviews.texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]Generate and print embeddings for the texts . The SpacyEmbeddings class generates an embedding for each document, which is a numerical representation of the document's content. These embeddings can be used for various natural language processing tasks, such as document similarity comparison or text classification.embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")Generate and print an embedding for a single piece of text. You can also generate an embedding for a single piece of text, such as a search query. This can be useful for tasks like information retrieval, where you want to find documents that are similar to a given query.query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}") #!pip install spacy #!pip install spacy  from langchain.embeddings.spacy_embeddings import SpacyEmbeddings from langchain.embeddings.spacy_embeddings import SpacyEmbeddings  API Reference:SpacyEmbeddings embedder = SpacyEmbeddings() embedder = SpacyEmbeddings()  texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",] texts = [    "The quick brown fox jumps over the lazy dog.",    "Pack my box with five dozen liquor jugs.",    "How vexingly quick daft zebras jump!",    "Bright vixens jump; dozy fowl quack.",]  embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}") embeddings = embedder.embed_documents(texts)for i, embedding in enumerate(embeddings):    print(f"Embedding for document {i+1}: {embedding}")  query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}") query = "Quick foxes and lazy dogs."query_embedding = embedder.embed_query(query)print(f"Embedding for query: {query_embedding}")  Previous Sentence Transformers Next TensorflowHub Installation and SetupExample Installation and SetupExample CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Aleph Alpha (/docs/integrations/text_embedding/aleph_alpha) AwaDB (/docs/integrations/text_embedding/awadb) AzureOpenAI (/docs/integrations/text_embedding/azureopenai) Bedrock (/docs/integrations/text_embedding/bedrock) BGE on Hugging Face (/docs/integrations/text_embedding/bge_huggingface) Clarifai (/docs/integrations/text_embedding/clarifai) Cohere (/docs/integrations/text_embedding/cohere) DashScope (/docs/integrations/text_embedding/dashscope) DeepInfra (/docs/integrations/text_embedding/deepinfra) EDEN AI (/docs/integrations/text_embedding/edenai) Elasticsearch (/docs/integrations/text_embedding/elasticsearch) Embaas (/docs/integrations/text_embedding/embaas) ERNIE Embedding-V1 (/docs/integrations/text_embedding/ernie) Fake Embeddings (/docs/integrations/text_embedding/fake) Google Vertex AI PaLM (/docs/integrations/text_embedding/google_vertex_ai_palm) GPT4All (/docs/integrations/text_embedding/gpt4all) Hugging Face (/docs/integrations/text_embedding/huggingfacehub) InstructEmbeddings (/docs/integrations/text_embedding/instruct_embeddings) Jina (/docs/integrations/text_embedding/jina) Llama-cpp (/docs/integrations/text_embedding/llamacpp) LocalAI (/docs/integrations/text_embedding/localai) MiniMax (/docs/integrations/text_embedding/minimax) ModelScope (/docs/integrations/text_embedding/modelscope_hub) MosaicML (/docs/integrations/text_embedding/mosaicml) NLP Cloud (/docs/integrations/text_embedding/nlp_cloud) OpenAI (/docs/integrations/text_embedding/openai) SageMaker (/docs/integrations/text_embedding/sagemaker-endpoint) Self Hosted (/docs/integrations/text_embedding/self-hosted) Sentence Transformers (/docs/integrations/text_embedding/sentence_transformers) SpaCy (/docs/integrations/text_embedding/spacy_embedding) TensorflowHub (/docs/integrations/text_embedding/tensorflowhub) Xorbits inference (Xinference) (/docs/integrations/text_embedding/xinference) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Text embedding models (/docs/integrations/text_embedding/) spaCy (https://spacy.io/) ‚Äã (#installation-and-setup) SpacyEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.spacy_embeddings.SpacyEmbeddings.html) ‚Äã (#example) PreviousSentence Transformers (/docs/integrations/text_embedding/sentence_transformers) NextTensorflowHub (/docs/integrations/text_embedding/tensorflowhub) Installation and Setup (#installation-and-setup) Example (#example) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)