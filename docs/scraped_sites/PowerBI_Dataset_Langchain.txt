This notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors. Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes. In this example, the agent actually figures out the correct query to get a row count of the table. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbits AINetwork Airbyte Question Answering Amadeus Azure Cognitive Services CSV Document Comparison Github Gitlab Gmail Google Drive tool Jira JSON MultiOn Office365 OpenAPI Natural Language APIs Pandas Dataframe PlayWright Browser PowerBI Dataset Python Spark Dataframe Spark SQL SQL Database Vectorstore Xorbits Tools Vector stores Grouped by provider  Integrations Agents & Toolkits PowerBI Dataset It relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials. You can also supply a username to impersonate for use with datasets that have RLS enabled.  The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution. Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well. create_pbi_agent PowerBIToolkit PowerBIDataset ChatOpenAI AgentExecutor Notes: Initialization Example: describing a table Example: simple query on a table Example: running queries Example: add your own few-shot prompts Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsPowerBI DatasetOn this pagePowerBI DatasetThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.Notes:‚ÄãIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.You can also supply a username to impersonate for use with datasets that have RLS enabled. The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.Initialization‚Äãfrom langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredentialAPI Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutorfast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)Example: describing a table‚Äãagent_executor.run("Describe table1")Example: simple query on a table‚ÄãIn this example, the agent actually figures out the correct query to get a row count of the table.agent_executor.run("How many records are in table1?")Example: running queries‚Äãagent_executor.run("How many records are there by dimension1 in table2?")agent_executor.run("What unique values are there for dimensions2 in table2")Example: add your own few-shot prompts‚Äã# fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")PreviousPlayWright BrowserNextPythonNotes:InitializationExample: describing a tableExample: simple query on a tableExample: running queriesExample: add your own few-shot promptsCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsPowerBI DatasetOn this pagePowerBI DatasetThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.Notes:‚ÄãIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.You can also supply a username to impersonate for use with datasets that have RLS enabled. The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.Initialization‚Äãfrom langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredentialAPI Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutorfast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)Example: describing a table‚Äãagent_executor.run("Describe table1")Example: simple query on a table‚ÄãIn this example, the agent actually figures out the correct query to get a row count of the table.agent_executor.run("How many records are in table1?")Example: running queries‚Äãagent_executor.run("How many records are there by dimension1 in table2?")agent_executor.run("What unique values are there for dimensions2 in table2")Example: add your own few-shot prompts‚Äã# fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")PreviousPlayWright BrowserNextPythonNotes:InitializationExample: describing a tableExample: simple query on a tableExample: running queriesExample: add your own few-shot prompts IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsPowerBI DatasetOn this pagePowerBI DatasetThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.Notes:‚ÄãIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.You can also supply a username to impersonate for use with datasets that have RLS enabled. The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.Initialization‚Äãfrom langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredentialAPI Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutorfast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)Example: describing a table‚Äãagent_executor.run("Describe table1")Example: simple query on a table‚ÄãIn this example, the agent actually figures out the correct query to get a row count of the table.agent_executor.run("How many records are in table1?")Example: running queries‚Äãagent_executor.run("How many records are there by dimension1 in table2?")agent_executor.run("What unique values are there for dimensions2 in table2")Example: add your own few-shot prompts‚Äã# fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")PreviousPlayWright BrowserNextPythonNotes:InitializationExample: describing a tableExample: simple query on a tableExample: running queriesExample: add your own few-shot prompts IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsAgents & ToolkitsPowerBI DatasetOn this pagePowerBI DatasetThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.Notes:‚ÄãIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.You can also supply a username to impersonate for use with datasets that have RLS enabled. The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.Initialization‚Äãfrom langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredentialAPI Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutorfast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)Example: describing a table‚Äãagent_executor.run("Describe table1")Example: simple query on a table‚ÄãIn this example, the agent actually figures out the correct query to get a row count of the table.agent_executor.run("How many records are in table1?")Example: running queries‚Äãagent_executor.run("How many records are there by dimension1 in table2?")agent_executor.run("What unique values are there for dimensions2 in table2")Example: add your own few-shot prompts‚Äã# fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")PreviousPlayWright BrowserNextPythonNotes:InitializationExample: describing a tableExample: simple query on a tableExample: running queriesExample: add your own few-shot prompts IntegrationsAgents & ToolkitsPowerBI DatasetOn this pagePowerBI DatasetThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.Notes:‚ÄãIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.You can also supply a username to impersonate for use with datasets that have RLS enabled. The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.Initialization‚Äãfrom langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredentialAPI Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutorfast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)Example: describing a table‚Äãagent_executor.run("Describe table1")Example: simple query on a table‚ÄãIn this example, the agent actually figures out the correct query to get a row count of the table.agent_executor.run("How many records are in table1?")Example: running queries‚Äãagent_executor.run("How many records are there by dimension1 in table2?")agent_executor.run("What unique values are there for dimensions2 in table2")Example: add your own few-shot prompts‚Äã# fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")PreviousPlayWright BrowserNextPythonNotes:InitializationExample: describing a tableExample: simple query on a tableExample: running queriesExample: add your own few-shot prompts IntegrationsAgents & ToolkitsPowerBI DatasetOn this pagePowerBI DatasetThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.Notes:‚ÄãIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.You can also supply a username to impersonate for use with datasets that have RLS enabled. The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.Initialization‚Äãfrom langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredentialAPI Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutorfast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)Example: describing a table‚Äãagent_executor.run("Describe table1")Example: simple query on a table‚ÄãIn this example, the agent actually figures out the correct query to get a row count of the table.agent_executor.run("How many records are in table1?")Example: running queries‚Äãagent_executor.run("How many records are there by dimension1 in table2?")agent_executor.run("What unique values are there for dimensions2 in table2")Example: add your own few-shot prompts‚Äã# fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")PreviousPlayWright BrowserNextPython IntegrationsAgents & ToolkitsPowerBI DatasetOn this pagePowerBI DatasetThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.Notes:‚ÄãIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.You can also supply a username to impersonate for use with datasets that have RLS enabled. The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.Initialization‚Äãfrom langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredentialAPI Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutorfast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)Example: describing a table‚Äãagent_executor.run("Describe table1")Example: simple query on a table‚ÄãIn this example, the agent actually figures out the correct query to get a row count of the table.agent_executor.run("How many records are in table1?")Example: running queries‚Äãagent_executor.run("How many records are there by dimension1 in table2?")agent_executor.run("What unique values are there for dimensions2 in table2")Example: add your own few-shot prompts‚Äã# fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")PreviousPlayWright BrowserNextPython On this page PowerBI DatasetThis notebook showcases an agent interacting with a Power BI Dataset. The agent is answering more general questions about a dataset, as well as recover from errors.Note that, as this agent is in active development, all answers might not be correct. It runs against the executequery endpoint, which does not allow deletes.Notes:‚ÄãIt relies on authentication with the azure.identity package, which can be installed with pip install azure-identity. Alternatively you can create the powerbi dataset with a token as a string without supplying the credentials.You can also supply a username to impersonate for use with datasets that have RLS enabled. The toolkit uses a LLM to create the query from the question, the agent uses the LLM for the overall execution.Testing was done mostly with a text-davinci-003 model, codex models did not seem to perform ver well.Initialization‚Äãfrom langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredentialAPI Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutorfast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)Example: describing a table‚Äãagent_executor.run("Describe table1")Example: simple query on a table‚ÄãIn this example, the agent actually figures out the correct query to get a row count of the table.agent_executor.run("How many records are in table1?")Example: running queries‚Äãagent_executor.run("How many records are there by dimension1 in table2?")agent_executor.run("What unique values are there for dimensions2 in table2")Example: add your own few-shot prompts‚Äã# fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)agent_executor.run("What was the maximum of value in revenue in dollars in 2022?") from langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredential from langchain.agents.agent_toolkits import create_pbi_agentfrom langchain.agents.agent_toolkits import PowerBIToolkitfrom langchain.utilities.powerbi import PowerBIDatasetfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import AgentExecutorfrom azure.identity import DefaultAzureCredential  API Reference:create_pbi_agentPowerBIToolkitPowerBIDatasetChatOpenAIAgentExecutor fast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,) fast_llm = ChatOpenAI(    temperature=0.5, max_tokens=1000, model_name="gpt-3.5-turbo", verbose=True)smart_llm = ChatOpenAI(temperature=0, max_tokens=100, model_name="gpt-4", verbose=True)toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)  agent_executor.run("Describe table1") agent_executor.run("Describe table1")  agent_executor.run("How many records are in table1?") agent_executor.run("How many records are in table1?")  agent_executor.run("How many records are there by dimension1 in table2?") agent_executor.run("How many records are there by dimension1 in table2?")  agent_executor.run("What unique values are there for dimensions2 in table2") agent_executor.run("What unique values are there for dimensions2 in table2")  # fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,) # fictional examplefew_shots = """Question: How many rows are in the table revenue?DAX: EVALUATE ROW("Number of rows", COUNTROWS(revenue_details))----Question: How many rows are in the table revenue where year is not empty?DAX: EVALUATE ROW("Number of rows", COUNTROWS(FILTER(revenue_details, revenue_details[year] <> "")))----Question: What was the average of value in revenue in dollars?DAX: EVALUATE ROW("Average", AVERAGE(revenue_details[dollar_value]))----"""toolkit = PowerBIToolkit(    powerbi=PowerBIDataset(        dataset_id="<dataset_id>",        table_names=["table1", "table2"],        credential=DefaultAzureCredential(),    ),    llm=smart_llm,    examples=few_shots,)agent_executor = create_pbi_agent(    llm=fast_llm,    toolkit=toolkit,    verbose=True,)  agent_executor.run("What was the maximum of value in revenue in dollars in 2022?") agent_executor.run("What was the maximum of value in revenue in dollars in 2022?")  Previous PlayWright Browser Next Python Notes:InitializationExample: describing a tableExample: simple query on a tableExample: running queriesExample: add your own few-shot prompts Notes:InitializationExample: describing a tableExample: simple query on a tableExample: running queriesExample: add your own few-shot prompts CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) AINetwork (/docs/integrations/toolkits/ainetwork) Airbyte Question Answering (/docs/integrations/toolkits/airbyte_structured_qa) Amadeus (/docs/integrations/toolkits/amadeus) Azure Cognitive Services (/docs/integrations/toolkits/azure_cognitive_services) CSV (/docs/integrations/toolkits/csv) Document Comparison (/docs/integrations/toolkits/document_comparison_toolkit) Github (/docs/integrations/toolkits/github) Gitlab (/docs/integrations/toolkits/gitlab) Gmail (/docs/integrations/toolkits/gmail) Google Drive tool (/docs/integrations/toolkits/google_drive) Jira (/docs/integrations/toolkits/jira) JSON (/docs/integrations/toolkits/json) MultiOn (/docs/integrations/toolkits/multion) Office365 (/docs/integrations/toolkits/office365) OpenAPI (/docs/integrations/toolkits/openapi) Natural Language APIs (/docs/integrations/toolkits/openapi_nla) Pandas Dataframe (/docs/integrations/toolkits/pandas) PlayWright Browser (/docs/integrations/toolkits/playwright) PowerBI Dataset (/docs/integrations/toolkits/powerbi) Python (/docs/integrations/toolkits/python) Spark Dataframe (/docs/integrations/toolkits/spark) Spark SQL (/docs/integrations/toolkits/spark_sql) SQL Database (/docs/integrations/toolkits/sql_database) Vectorstore (/docs/integrations/toolkits/vectorstore) Xorbits (/docs/integrations/toolkits/xorbits) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Agents & Toolkits (/docs/integrations/toolkits/) executequery endpoint (https://learn.microsoft.com/en-us/rest/api/power-bi/datasets/execute-queries) ‚Äã (#notes) ‚Äã (#initialization) create_pbi_agent (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.powerbi.base.create_pbi_agent.html) PowerBIToolkit (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.powerbi.toolkit.PowerBIToolkit.html) PowerBIDataset (https://api.python.langchain.com/en/latest/utilities/langchain.utilities.powerbi.PowerBIDataset.html) ChatOpenAI (https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html) AgentExecutor (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.AgentExecutor.html) ‚Äã (#example-describing-a-table) ‚Äã (#example-simple-query-on-a-table) ‚Äã (#example-running-queries) ‚Äã (#example-add-your-own-few-shot-prompts) PreviousPlayWright Browser (/docs/integrations/toolkits/playwright) NextPython (/docs/integrations/toolkits/python) Notes: (#notes) Initialization (#initialization) Example: describing a table (#example-describing-a-table) Example: simple query on a table (#example-simple-query-on-a-table) Example: running queries (#example-running-queries) Example: add your own few-shot prompts (#example-add-your-own-few-shot-prompts) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)