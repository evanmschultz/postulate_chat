Streamlit is a faster way to build and share data apps. Streamlit turns data scripts into shareable web apps in minutes. All in pure Python. No front‚Äëend experience required. See more examples at streamlit.io/generative-ai.  In this guide we will demonstrate how to use StreamlitCallbackHandler to display the thoughts and actions of an agent in an interactive Streamlit app. Try it out with the running app below using the MRKL agent: You can run streamlit hello to load a sample app and validate your install succeeded. See full instructions in Streamlit's Getting started documentation. To create a StreamlitCallbackHandler, you just need to provide a parent container to render the output. Additional keyword arguments to customize the display behavior are described in the API reference. The primary supported use case today is visualizing the actions of an Agent with Tools (or Agent Executor). You can create an agent in your Streamlit app and simply pass the StreamlitCallbackHandler to agent.run() in order to visualize the thoughts and actions live in your app. Note: You will need to set OPENAI_API_KEY for the above app code to run successfully. The easiest way to do this is via Streamlit secrets.toml, or any other local ENV management tool. Currently StreamlitCallbackHandler is geared towards use with a LangChain Agent Executor. Support for additional agent types, use directly with Chains, etc will be added in the future. You may also be interested in using StreamlitChatMessageHistory for LangChain. IntegrationsCallbacksArgillaConfidentContextInfinoLabel StudioLLMonitorPromptLayerStreamlitChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider CallbacksArgillaConfidentContextInfinoLabel StudioLLMonitorPromptLayerStreamlit Argilla Confident Context Infino Label Studio LLMonitor PromptLayer Streamlit Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Callbacks Streamlit StreamlitCallbackHandler OpenAI AgentType initialize_agent load_tools StreamlitCallbackHandler Installation and Setup Display thoughts and actionsScenario 1: Using an Agent with ToolsAdditional scenarios Scenario 1: Using an Agent with Tools Additional scenarios Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksArgillaConfidentContextInfinoLabel StudioLLMonitorPromptLayerStreamlitChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsCallbacksStreamlitOn this pageStreamlitStreamlit is a faster way to build and share data apps. See more examples at streamlit.io/generative-ai.In this guide we will demonstrate how to use StreamlitCallbackHandler to display the thoughts and actions of an agent in an interactive Streamlit app. Try it out with the running app below using the MRKL agent:Installation and Setup‚Äãpip install langchain streamlitYou can run streamlit hello to load a sample app and validate your install succeeded. See full instructions in Streamlit's Getting started documentation.Display thoughts and actions‚ÄãTo create a StreamlitCallbackHandler, you just need to provide a parent container to render the output.from langchain.callbacks import StreamlitCallbackHandlerimport streamlit as stst_callback = StreamlitCallbackHandler(st.container())API Reference:StreamlitCallbackHandlerAdditional keyword arguments to customize the display behavior are described in the API reference.Scenario 1: Using an Agent with Tools‚ÄãThe primary supported use case today is visualizing the actions of an Agent with Tools (or Agent Executor). You can create an thoughts and actions live in your app.from langchain.llms import OpenAIfrom langchain.agents import AgentType, initialize_agent, load_toolsfrom langchain.callbacks import StreamlitCallbackHandlerimport streamlit as stllm = OpenAI(temperature=0, streaming=True)tools = load_tools(["ddg-search"])agent = initialize_agent(    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)if prompt := st.chat_input():    st.chat_message("user").write(prompt)    with st.chat_message("assistant"):        st_callback = StreamlitCallbackHandler(st.container())        response = agent.run(prompt, callbacks=[st_callback])        st.write(response)API Reference:OpenAIAgentTypeinitialize_agentload_toolsStreamlitCallbackHandlerNote: You will need to set OPENAI_API_KEY for the above app code to run successfully. or any other local ENV management tool.Additional scenarios‚ÄãCurrently StreamlitCallbackHandler is geared towards use with a LangChain Agent Executor. Support for additional agent types, use directly with Chains, etc will be added in the future.You may also be interested in using StreamlitChatMessageHistory for LangChain.PreviousPromptLayerNextChat modelsInstallation and SetupDisplay thoughts and actionsScenario 1: Using an Agent with ToolsAdditional scenariosCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksArgillaConfidentContextInfinoLabel StudioLLMonitorPromptLayerStreamlitChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsCallbacksStreamlitOn this pageStreamlitStreamlit is a faster way to build and share data apps. StreamlitChatMessageHistory for LangChain.PreviousPromptLayerNextChat modelsInstallation and SetupDisplay thoughts and actionsScenario 1: Using an Agent with ToolsAdditional scenarios IntegrationsCallbacksArgillaConfidentContextInfinoLabel StudioLLMonitorPromptLayerStreamlitChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsCallbacksStreamlitOn this pageStreamlitStreamlit is a faster way to build and share data apps. StreamlitChatMessageHistory for LangChain.PreviousPromptLayerNextChat modelsInstallation and SetupDisplay thoughts and actionsScenario 1: Using an Agent with ToolsAdditional scenarios IntegrationsCallbacksArgillaConfidentContextInfinoLabel StudioLLMonitorPromptLayerStreamlitChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksArgillaConfidentContextInfinoLabel StudioLLMonitorPromptLayerStreamlitChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsCallbacksStreamlitOn this pageStreamlitStreamlit is a faster way to build and share data apps. StreamlitChatMessageHistory for LangChain.PreviousPromptLayerNextChat modelsInstallation and SetupDisplay thoughts and actionsScenario 1: Using an Agent with ToolsAdditional scenarios IntegrationsCallbacksStreamlitOn this pageStreamlitStreamlit is a faster way to build and share data apps. StreamlitChatMessageHistory for LangChain.PreviousPromptLayerNextChat models IntegrationsCallbacksStreamlitOn this pageStreamlitStreamlit is a faster way to build and share data apps. StreamlitChatMessageHistory for LangChain.PreviousPromptLayerNextChat models On this page StreamlitStreamlit is a faster way to build and share data apps. StreamlitChatMessageHistory for LangChain. pip install langchain streamlit pip install langchain streamlit  from langchain.callbacks import StreamlitCallbackHandlerimport streamlit as stst_callback = StreamlitCallbackHandler(st.container()) from langchain.callbacks import StreamlitCallbackHandlerimport streamlit as stst_callback = StreamlitCallbackHandler(st.container())  API Reference:StreamlitCallbackHandler from langchain.llms import OpenAIfrom langchain.agents import AgentType, initialize_agent, load_toolsfrom langchain.callbacks import StreamlitCallbackHandlerimport streamlit as stllm = OpenAI(temperature=0, streaming=True)tools = load_tools(["ddg-search"])agent = initialize_agent(    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)if prompt := st.chat_input():    st.chat_message("user").write(prompt)    with st.chat_message("assistant"):        st_callback = StreamlitCallbackHandler(st.container())        response = agent.run(prompt, callbacks=[st_callback])        st.write(response) from langchain.llms import OpenAIfrom langchain.agents import AgentType, initialize_agent, load_toolsfrom langchain.callbacks import StreamlitCallbackHandlerimport streamlit as stllm = OpenAI(temperature=0, streaming=True)tools = load_tools(["ddg-search"])agent = initialize_agent(    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)if prompt := st.chat_input():    st.chat_message("user").write(prompt)    with st.chat_message("assistant"):        st_callback = StreamlitCallbackHandler(st.container())        response = agent.run(prompt, callbacks=[st_callback])        st.write(response)  API Reference:OpenAIAgentTypeinitialize_agentload_toolsStreamlitCallbackHandler Previous PromptLayer Next Chat models Installation and SetupDisplay thoughts and actionsScenario 1: Using an Agent with ToolsAdditional scenarios Installation and SetupDisplay thoughts and actionsScenario 1: Using an Agent with ToolsAdditional scenarios CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Argilla (/docs/integrations/callbacks/argilla) Confident (/docs/integrations/callbacks/confident) Context (/docs/integrations/callbacks/context) Infino (/docs/integrations/callbacks/infino) Label Studio (/docs/integrations/callbacks/labelstudio) LLMonitor (/docs/integrations/callbacks/llmonitor) PromptLayer (/docs/integrations/callbacks/promptlayer) Streamlit (/docs/integrations/callbacks/streamlit) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Streamlit (https://streamlit.io/) streamlit.io/generative-ai (https://streamlit.io/generative-ai)  (https://codespaces.new/langchain-ai/streamlit-agent?quickstart=1) MRKL agent (/docs/modules/agents/how_to/mrkl/) ‚Äã (#installation-and-setup) Getting started documentation (https://docs.streamlit.io/library/get-started) ‚Äã (#display-thoughts-and-actions) StreamlitCallbackHandler (https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streamlit.StreamlitCallbackHandler.html) API reference (https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streamlit.streamlit_callback_handler.StreamlitCallbackHandler.html) ‚Äã (#scenario-1-using-an-agent-with-tools) OpenAI (https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html) AgentType (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html) initialize_agent (https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html) load_tools (https://api.python.langchain.com/en/latest/agents/langchain.agents.load_tools.load_tools.html) StreamlitCallbackHandler (https://api.python.langchain.com/en/latest/callbacks/langchain.callbacks.streamlit.StreamlitCallbackHandler.html) Streamlit secrets.toml (https://docs.streamlit.io/library/advanced-features/secrets-management) ‚Äã (#additional-scenarios) StreamlitChatMessageHistory (/docs/integrations/memory/streamlit_chat_message_history) PreviousPromptLayer (/docs/integrations/callbacks/promptlayer) NextChat models (/docs/integrations/chat/) Installation and Setup (#installation-and-setup) Display thoughts and actions (#display-thoughts-and-actions) Scenario 1: Using an Agent with Tools (#scenario-1-using-an-agent-with-tools) Additional scenarios (#additional-scenarios) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)