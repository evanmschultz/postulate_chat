Lemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github. See full docs here. Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions. With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty. The following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling. Requires Python 3.8.1 and above. To use Lemon AI in your Python project run pip install lemonai This will install the corresponding Lemon AI client which you can then import into your script. The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package. The interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it. Lemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable: Similar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json: Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt. To use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN". To gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created. By using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits ToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language Actions Alpha Vantage Apify ArXiv AWS Lambda Shell (bash) Bing Search Brave Search ChatGPT Plugins Dall-E Image Generator DataForSeo DuckDuckGo Search Eden AI File System Golden Query Google Drive Google Places Google Search Google Serper Gradio GraphQL HuggingFace Hub Tools Human as a tool IFTTT WebHooks Lemon Agent Metaphor Search Nuclia Understanding OpenWeatherMap PubMed Requests SceneXplain Search Tools SearxNG Search SerpAPI Twilio Wikipedia Wolfram Alpha Yahoo Finance News YouTube Zapier Natural Language Actions Vector stores Grouped by provider  Integrations Tools Lemon Agent Quick Start1. Install Lemon AI2. Launch the Server3. Use Lemon AI with Langchain4. Gain transparency on your Agent's decision making 1. Install Lemon AI 2. Launch the Server 3. Use Lemon AI with Langchain 4. Gain transparency on your Agent's decision making Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsLemon AgentOn this pageLemon AgentLemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github.See full docs here.Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions.With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty.Quick Start‚ÄãThe following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling.1. Install Lemon AI‚ÄãRequires Python 3.8.1 and above.To use Lemon AI in your Python project run pip install lemonaiThis will install the corresponding Lemon AI client which you can then import into your script.The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package.2. Launch the Server‚ÄãThe interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it.3. Use Lemon AI with Langchain‚ÄãLemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable:(Optional) Define your Lemon AI Functions‚ÄãSimilar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json:[  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt.Include Lemon AI in your Langchain project‚Äãimport osfrom lemonai import execute_workflowfrom langchain import OpenAILoad API Keys and Access Tokens‚ÄãTo use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN".""" Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)4. Gain transparency on your Agent's decision making‚ÄãTo gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created.2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-dataBy using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions.PreviousIFTTT WebHooksNextMetaphor SearchQuick Start1. Install Lemon AI2. Launch the Server3. Use Lemon AI with Langchain4. Gain transparency on your Agent's decision makingCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsLemon AgentOn this pageLemon AgentLemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github.See full docs here.Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions.With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty.Quick Start‚ÄãThe following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling.1. Install Lemon AI‚ÄãRequires Python 3.8.1 and above.To use Lemon AI in your Python project run pip install lemonaiThis will install the corresponding Lemon AI client which you can then import into your script.The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package.2. Launch the Server‚ÄãThe interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it.3. Use Lemon AI with Langchain‚ÄãLemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable:(Optional) Define your Lemon AI Functions‚ÄãSimilar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json:[  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt.Include Lemon AI in your Langchain project‚Äãimport osfrom lemonai import execute_workflowfrom langchain import OpenAILoad API Keys and Access Tokens‚ÄãTo use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN".""" Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)4. Gain transparency on your Agent's decision making‚ÄãTo gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created.2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-dataBy using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions.PreviousIFTTT WebHooksNextMetaphor SearchQuick Start1. Install Lemon AI2. Launch the Server3. Use Lemon AI with Langchain4. Gain transparency on your Agent's decision making IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsLemon AgentOn this pageLemon AgentLemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github.See full docs here.Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions.With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty.Quick Start‚ÄãThe following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling.1. Install Lemon AI‚ÄãRequires Python 3.8.1 and above.To use Lemon AI in your Python project run pip install lemonaiThis will install the corresponding Lemon AI client which you can then import into your script.The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package.2. Launch the Server‚ÄãThe interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it.3. Use Lemon AI with Langchain‚ÄãLemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable:(Optional) Define your Lemon AI Functions‚ÄãSimilar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json:[  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt.Include Lemon AI in your Langchain project‚Äãimport osfrom lemonai import execute_workflowfrom langchain import OpenAILoad API Keys and Access Tokens‚ÄãTo use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN".""" Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)4. Gain transparency on your Agent's decision making‚ÄãTo gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created.2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-dataBy using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions.PreviousIFTTT WebHooksNextMetaphor SearchQuick Start1. Install Lemon AI2. Launch the Server3. Use Lemon AI with Langchain4. Gain transparency on your Agent's decision making IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsToolsLemon AgentOn this pageLemon AgentLemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github.See full docs here.Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions.With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty.Quick Start‚ÄãThe following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling.1. Install Lemon AI‚ÄãRequires Python 3.8.1 and above.To use Lemon AI in your Python project run pip install lemonaiThis will install the corresponding Lemon AI client which you can then import into your script.The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package.2. Launch the Server‚ÄãThe interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it.3. Use Lemon AI with Langchain‚ÄãLemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable:(Optional) Define your Lemon AI Functions‚ÄãSimilar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json:[  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt.Include Lemon AI in your Langchain project‚Äãimport osfrom lemonai import execute_workflowfrom langchain import OpenAILoad API Keys and Access Tokens‚ÄãTo use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN".""" Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)4. Gain transparency on your Agent's decision making‚ÄãTo gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created.2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-dataBy using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions.PreviousIFTTT WebHooksNextMetaphor SearchQuick Start1. Install Lemon AI2. Launch the Server3. Use Lemon AI with Langchain4. Gain transparency on your Agent's decision making IntegrationsToolsLemon AgentOn this pageLemon AgentLemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github.See full docs here.Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions.With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty.Quick Start‚ÄãThe following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling.1. Install Lemon AI‚ÄãRequires Python 3.8.1 and above.To use Lemon AI in your Python project run pip install lemonaiThis will install the corresponding Lemon AI client which you can then import into your script.The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package.2. Launch the Server‚ÄãThe interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it.3. Use Lemon AI with Langchain‚ÄãLemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable:(Optional) Define your Lemon AI Functions‚ÄãSimilar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json:[  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt.Include Lemon AI in your Langchain project‚Äãimport osfrom lemonai import execute_workflowfrom langchain import OpenAILoad API Keys and Access Tokens‚ÄãTo use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN".""" Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)4. Gain transparency on your Agent's decision making‚ÄãTo gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created.2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-dataBy using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions.PreviousIFTTT WebHooksNextMetaphor SearchQuick Start1. Install Lemon AI2. Launch the Server3. Use Lemon AI with Langchain4. Gain transparency on your Agent's decision making IntegrationsToolsLemon AgentOn this pageLemon AgentLemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github.See full docs here.Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions.With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty.Quick Start‚ÄãThe following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling.1. Install Lemon AI‚ÄãRequires Python 3.8.1 and above.To use Lemon AI in your Python project run pip install lemonaiThis will install the corresponding Lemon AI client which you can then import into your script.The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package.2. Launch the Server‚ÄãThe interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it.3. Use Lemon AI with Langchain‚ÄãLemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable:(Optional) Define your Lemon AI Functions‚ÄãSimilar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json:[  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt.Include Lemon AI in your Langchain project‚Äãimport osfrom lemonai import execute_workflowfrom langchain import OpenAILoad API Keys and Access Tokens‚ÄãTo use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN".""" Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)4. Gain transparency on your Agent's decision making‚ÄãTo gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created.2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-dataBy using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions.PreviousIFTTT WebHooksNextMetaphor Search IntegrationsToolsLemon AgentOn this pageLemon AgentLemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github.See full docs here.Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions.With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty.Quick Start‚ÄãThe following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling.1. Install Lemon AI‚ÄãRequires Python 3.8.1 and above.To use Lemon AI in your Python project run pip install lemonaiThis will install the corresponding Lemon AI client which you can then import into your script.The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package.2. Launch the Server‚ÄãThe interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it.3. Use Lemon AI with Langchain‚ÄãLemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable:(Optional) Define your Lemon AI Functions‚ÄãSimilar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json:[  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt.Include Lemon AI in your Langchain project‚Äãimport osfrom lemonai import execute_workflowfrom langchain import OpenAILoad API Keys and Access Tokens‚ÄãTo use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN".""" Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)4. Gain transparency on your Agent's decision making‚ÄãTo gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created.2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-dataBy using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions.PreviousIFTTT WebHooksNextMetaphor Search On this page Lemon AgentLemon Agent helps you build powerful AI assistants in minutes and automate workflows by allowing for accurate and reliable read and write operations in tools like Airtable, Hubspot, Discord, Notion, Slack and Github.See full docs here.Most connectors available today are focused on read-only operations, limiting the potential of LLMs. Agents, on the other hand, have a tendency to hallucinate from time to time due to missing context or instructions.With Lemon AI, it is possible to give your agents access to well-defined APIs for reliable read and write operations. In addition, Lemon AI functions allow you to further reduce the risk of hallucinations by providing a way to statically define workflows that the model can rely on in case of uncertainty.Quick Start‚ÄãThe following quick start demonstrates how to use Lemon AI in combination with Agents to automate workflows that involve interaction with internal tooling.1. Install Lemon AI‚ÄãRequires Python 3.8.1 and above.To use Lemon AI in your Python project run pip install lemonaiThis will install the corresponding Lemon AI client which you can then import into your script.The tool uses Python packages langchain and loguru. In case of any installation errors with Lemon AI, install both packages first and then install the Lemon AI package.2. Launch the Server‚ÄãThe interaction of your agents and all tools provided by Lemon AI is handled by the Lemon AI Server. To use Lemon AI you need to run the server on your local machine so the Lemon AI Python client can connect to it.3. Use Lemon AI with Langchain‚ÄãLemon AI automatically solves given tasks by finding the right combination of relevant tools or uses Lemon AI Functions as an alternative. The following example demonstrates how to retrieve a user from Hackernews and write it to a table in Airtable:(Optional) Define your Lemon AI Functions‚ÄãSimilar to OpenAI functions, Lemon AI provides the option to define workflows as reusable functions. These functions can be defined for use cases where it is especially important to move as close as possible to near-deterministic behavior. Specific workflows can be defined in a separate lemonai.json:[  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]Your model will have access to these functions and will prefer them over self-selecting tools to solve a given task. All you have to do is to let the agent know that it should use a given function by including the function name in the prompt.Include Lemon AI in your Langchain project‚Äãimport osfrom lemonai import execute_workflowfrom langchain import OpenAILoad API Keys and Access Tokens‚ÄãTo use tools that require authentication, you have to store the corresponding access credentials in your environment in the format "{tool name}_{authentication string}" where the authentication string is one of ["API_KEY", "SECRET_KEY", "SUBSCRIPTION_KEY", "ACCESS_KEY"] for API keys or ["ACCESS_TOKEN", "SECRET_TOKEN"] for authentication tokens. Examples are "OPENAI_API_KEY", "BING_SUBSCRIPTION_KEY", "AIRTABLE_ACCESS_TOKEN".""" Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)4. Gain transparency on your Agent's decision making‚ÄãTo gain transparency on how your Agent interacts with Lemon AI tools to solve a given task, all decisions made, tools used and operations performed are written to a local lemonai.log file. Every time your LLM agent is interacting with the Lemon AI tool stack a corresponding log entry is created.2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-dataBy using the Lemon AI Analytics Tool you can easily gain a better understanding of how frequently and in which order tools are used. As a result, you can identify weak spots in your agent‚Äôs decision-making capabilities and move to a more deterministic behavior by defining Lemon AI functions. [  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }] [  {    "name": "Hackernews Airtable User Workflow",    "description": "retrieves user data from Hackernews and appends it to a table in Airtable",    "tools": ["hackernews-get-user", "airtable-append-data"]  }]  import osfrom lemonai import execute_workflowfrom langchain import OpenAI import osfrom lemonai import execute_workflowfrom langchain import OpenAI  """ Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*" """ Load all relevant API Keys and Access Tokens into your environment variables """os.environ["OPENAI_API_KEY"] = "*INSERT OPENAI API KEY HERE*"os.environ["AIRTABLE_ACCESS_TOKEN"] = "*INSERT AIRTABLE TOKEN HERE*"  hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt) hackernews_username = "*INSERT HACKERNEWS USERNAME HERE*"airtable_base_id = "*INSERT BASE ID HERE*"airtable_table_id = "*INSERT TABLE ID HERE*"""" Define your instruction to be given to your LLM """prompt = f"""Read information from Hackernews for user {hackernews_username} and then write the results toAirtable (baseId: {airtable_base_id}, tableId: {airtable_table_id}). Only write the fields "username", "karma"and "created_at_i". Please make sure that Airtable does NOT automatically convert the field types.""""""Use the Lemon AI execute_workflow wrapper to run your Langchain agent in combination with Lemon AI  """model = OpenAI(temperature=0)execute_workflow(llm=model, prompt_string=prompt)  2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-data 2023-06-26T11:50:27.708785+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - hackernews-get-user2023-06-26T11:50:39.624035+0100 - b5f91c59-8487-45c2-800a-156eac0c7dae - airtable-append-data2023-06-26T11:58:32.925228+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - hackernews-get-user2023-06-26T11:58:43.988788+0100 - 5efe603c-9898-4143-b99a-55b50007ed9d - airtable-append-data  Previous IFTTT WebHooks Next Metaphor Search Quick Start1. Install Lemon AI2. Launch the Server3. Use Lemon AI with Langchain4. Gain transparency on your Agent's decision making Quick Start1. Install Lemon AI2. Launch the Server3. Use Lemon AI with Langchain4. Gain transparency on your Agent's decision making CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Alpha Vantage (/docs/integrations/tools/alpha_vantage) Apify (/docs/integrations/tools/apify) ArXiv (/docs/integrations/tools/arxiv) AWS Lambda (/docs/integrations/tools/awslambda) Shell (bash) (/docs/integrations/tools/bash) Bing Search (/docs/integrations/tools/bing_search) Brave Search (/docs/integrations/tools/brave_search) ChatGPT Plugins (/docs/integrations/tools/chatgpt_plugins) Dall-E Image Generator (/docs/integrations/tools/dalle_image_generator) DataForSeo (/docs/integrations/tools/dataforseo) DuckDuckGo Search (/docs/integrations/tools/ddg) Eden AI (/docs/integrations/tools/edenai_tools) File System (/docs/integrations/tools/filesystem) Golden Query (/docs/integrations/tools/golden_query) Google Drive (/docs/integrations/tools/google_drive) Google Places (/docs/integrations/tools/google_places) Google Search (/docs/integrations/tools/google_search) Google Serper (/docs/integrations/tools/google_serper) Gradio (/docs/integrations/tools/gradio_tools) GraphQL (/docs/integrations/tools/graphql) HuggingFace Hub Tools (/docs/integrations/tools/huggingface_tools) Human as a tool (/docs/integrations/tools/human_tools) IFTTT WebHooks (/docs/integrations/tools/ifttt) Lemon Agent (/docs/integrations/tools/lemonai) Metaphor Search (/docs/integrations/tools/metaphor_search) Nuclia Understanding (/docs/integrations/tools/nuclia) OpenWeatherMap (/docs/integrations/tools/openweathermap) PubMed (/docs/integrations/tools/pubmed) Requests (/docs/integrations/tools/requests) SceneXplain (/docs/integrations/tools/sceneXplain) Search Tools (/docs/integrations/tools/search_tools) SearxNG Search (/docs/integrations/tools/searx_search) SerpAPI (/docs/integrations/tools/serpapi) Twilio (/docs/integrations/tools/twilio) Wikipedia (/docs/integrations/tools/wikipedia) Wolfram Alpha (/docs/integrations/tools/wolfram_alpha) Yahoo Finance News (/docs/integrations/tools/yahoo_finance_news) YouTube (/docs/integrations/tools/youtube) Zapier Natural Language Actions (/docs/integrations/tools/zapier) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Tools (/docs/integrations/tools/) Lemon Agent (https://github.com/felixbrock/lemon-agent) full docs here (https://github.com/felixbrock/lemonai-py-client) ‚Äã (#quick-start) ‚Äã (#1-install-lemon-ai) ‚Äã (#2-launch-the-server) Lemon AI Server (https://github.com/felixbrock/lemonai-server) ‚Äã (#3-use-lemon-ai-with-langchain) ‚Äã (#optional-define-your-lemon-ai-functions) OpenAI functions (https://openai.com/blog/function-calling-and-other-api-updates) ‚Äã (#include-lemon-ai-in-your-langchain-project) ‚Äã (#load-api-keys-and-access-tokens) ‚Äã (#4-gain-transparency-on-your-agents-decision-making) Lemon AI Analytics Tool (https://github.com/felixbrock/lemonai-analytics) PreviousIFTTT WebHooks (/docs/integrations/tools/ifttt) NextMetaphor Search (/docs/integrations/tools/metaphor_search) Quick Start (#quick-start) 1. Install Lemon AI (#1-install-lemon-ai) 2. Launch the Server (#2-launch-the-server) 3. Use Lemon AI with Langchain (#3-use-lemon-ai-with-langchain) 4. Gain transparency on your Agent's decision making (#4-gain-transparency-on-your-agents-decision-making) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)