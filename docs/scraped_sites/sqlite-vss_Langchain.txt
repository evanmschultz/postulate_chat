sqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities. This notebook shows how to use the SQLiteVSS vector database. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores sqlite-vss SentenceTransformerEmbeddings CharacterTextSplitter SQLiteVSS TextLoader SentenceTransformerEmbeddings CharacterTextSplitter SQLiteVSS TextLoader Quickstart Using existing sqlite connection Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storessqlite-vssOn this pagesqlite-vsssqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.This notebook shows how to use the SQLiteVSS vector database.# You need to install sqlite-vss as a dependency.%pip install sqlite-vssQuickstart‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'Using existing sqlite connection‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Ketanji Brown Jackson is awesome'# Cleaning upimport osos.remove("/tmp/vss.db")Previousscikit-learnNextStarRocksQuickstartUsing existing sqlite connectionCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storessqlite-vssOn this pagesqlite-vsssqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.This notebook shows how to use the SQLiteVSS vector database.# You need to install sqlite-vss as a dependency.%pip install sqlite-vssQuickstart‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'Using existing sqlite connection‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Ketanji Brown Jackson is awesome'# Cleaning upimport osos.remove("/tmp/vss.db")Previousscikit-learnNextStarRocksQuickstartUsing existing sqlite connection IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storessqlite-vssOn this pagesqlite-vsssqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.This notebook shows how to use the SQLiteVSS vector database.# You need to install sqlite-vss as a dependency.%pip install sqlite-vssQuickstart‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'Using existing sqlite connection‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Ketanji Brown Jackson is awesome'# Cleaning upimport osos.remove("/tmp/vss.db")Previousscikit-learnNextStarRocksQuickstartUsing existing sqlite connection IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storessqlite-vssOn this pagesqlite-vsssqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.This notebook shows how to use the SQLiteVSS vector database.# You need to install sqlite-vss as a dependency.%pip install sqlite-vssQuickstart‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'Using existing sqlite connection‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Ketanji Brown Jackson is awesome'# Cleaning upimport osos.remove("/tmp/vss.db")Previousscikit-learnNextStarRocksQuickstartUsing existing sqlite connection IntegrationsVector storessqlite-vssOn this pagesqlite-vsssqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.This notebook shows how to use the SQLiteVSS vector database.# You need to install sqlite-vss as a dependency.%pip install sqlite-vssQuickstart‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'Using existing sqlite connection‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Ketanji Brown Jackson is awesome'# Cleaning upimport osos.remove("/tmp/vss.db")Previousscikit-learnNextStarRocksQuickstartUsing existing sqlite connection IntegrationsVector storessqlite-vssOn this pagesqlite-vsssqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.This notebook shows how to use the SQLiteVSS vector database.# You need to install sqlite-vss as a dependency.%pip install sqlite-vssQuickstart‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'Using existing sqlite connection‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Ketanji Brown Jackson is awesome'# Cleaning upimport osos.remove("/tmp/vss.db")Previousscikit-learnNextStarRocks IntegrationsVector storessqlite-vssOn this pagesqlite-vsssqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.This notebook shows how to use the SQLiteVSS vector database.# You need to install sqlite-vss as a dependency.%pip install sqlite-vssQuickstart‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'Using existing sqlite connection‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Ketanji Brown Jackson is awesome'# Cleaning upimport osos.remove("/tmp/vss.db")Previousscikit-learnNextStarRocks On this page sqlite-vsssqlite-vss is an SQLite extension designed for vector search, emphasizing local-first operations and easy integration into applications without external servers. Leveraging the Faiss library, it offers efficient similarity search and clustering capabilities.This notebook shows how to use the SQLiteVSS vector database.# You need to install sqlite-vss as a dependency.%pip install sqlite-vssQuickstart‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'Using existing sqlite connection‚Äãfrom langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_contentAPI Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader    'Ketanji Brown Jackson is awesome'# Cleaning upimport osos.remove("/tmp/vss.db") # You need to install sqlite-vss as a dependency.%pip install sqlite-vss # You need to install sqlite-vss as a dependency.%pip install sqlite-vss  from langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_content from langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")# load it in sqlite-vss in a table named state_union.# the db_file parameter is the name of the file you want# as your sqlite database.db = SQLiteVSS.from_texts(    texts=texts,    embedding=embedding_function,    table="state_union",    db_file="/tmp/vss.db")# query itquery = "What did the president say about Ketanji Brown Jackson"data = db.similarity_search(query)# print resultsdata[0].page_content  API Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader     'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'     'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'     'Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.'  from langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_content from langchain.embeddings.sentence_transformer import SentenceTransformerEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import SQLiteVSSfrom langchain.document_loaders import TextLoader# load the document and split it into chunksloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()# split it into chunkstext_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)texts = [doc.page_content for doc in docs]# create the open-source embedding functionembedding_function = SentenceTransformerEmbeddings(model_name="all-MiniLM-L6-v2")connection = SQLiteVSS.create_connection(db_file="/tmp/vss.db")db1 = SQLiteVSS(    table="state_union",    embedding=embedding_function,    connection=connection)db1.add_texts(["Ketanji Brown Jackson is awesome"])# query it againquery = "What did the president say about Ketanji Brown Jackson"data = db1.similarity_search(query)# print resultsdata[0].page_content  API Reference:SentenceTransformerEmbeddingsCharacterTextSplitterSQLiteVSSTextLoader     'Ketanji Brown Jackson is awesome'     'Ketanji Brown Jackson is awesome'     'Ketanji Brown Jackson is awesome'  # Cleaning upimport osos.remove("/tmp/vss.db") # Cleaning upimport osos.remove("/tmp/vss.db")  Previous scikit-learn Next StarRocks QuickstartUsing existing sqlite connection QuickstartUsing existing sqlite connection CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) sqlite-vss (https://alexgarcia.xyz/sqlite-vss/) ‚Äã (#quickstart) SentenceTransformerEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.SentenceTransformerEmbeddings.html) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) SQLiteVSS (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.sqlitevss.SQLiteVSS.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) ‚Äã (#using-existing-sqlite-connection) SentenceTransformerEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.SentenceTransformerEmbeddings.html) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) SQLiteVSS (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.sqlitevss.SQLiteVSS.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) Previousscikit-learn (/docs/integrations/vectorstores/sklearn) NextStarRocks (/docs/integrations/vectorstores/starrocks) Quickstart (#quickstart) Using existing sqlite connection (#using-existing-sqlite-connection) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)