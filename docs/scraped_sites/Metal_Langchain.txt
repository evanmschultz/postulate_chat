Metal is a managed service for ML Embeddings. This notebook shows how to use Metal's retriever. First, you will need to sign up for Metal and get an API key. You can do so here You only need to do this if you haven't already set up an index Now that our index is set up, we can set up a retriever and start querying it. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory RetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZep Amazon Kendra Arxiv Azure Cognitive Search BM25 Chaindesk ChatGPT Plugin Cohere Reranker DocArray Retriever ElasticSearch BM25 Google Cloud Enterprise Search Google Drive Retriever kNN LOTR (Merger Retriever) Metal Pinecone Hybrid Search PubMed RePhraseQueryRetriever SVM TF-IDF Vespa Weaviate Hybrid Search Wikipedia Zep Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Retrievers Metal MetalRetriever Ingest Documents Query Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsRetrieversMetalOn this pageMetalMetal is a managed service for ML Embeddings.This notebook shows how to use Metal's retriever.First, you will need to sign up for Metal and get an API key. You can do so here# !pip install metal_sdkfrom metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);Ingest Documents‚ÄãYou only need to do this if you haven't already set up an indexmetal.index({"text": "foo1"})metal.index({"text": "foo"})    {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}Query‚ÄãNow that our index is set up, we can set up a retriever and start querying it.from langchain.retrievers import MetalRetrieverAPI Reference:MetalRetrieverretriever = MetalRetriever(metal, params={"limit": 2})retriever.get_relevant_documents("foo1")    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]PreviousLOTR (Merger Retriever)NextPinecone Hybrid SearchIngest DocumentsQueryCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsRetrieversMetalOn this pageMetalMetal is a managed service for ML Embeddings.This notebook shows how to use Metal's retriever.First, you will need to sign up for Metal and get an API key. You can do so here# !pip install metal_sdkfrom metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);Ingest Documents‚ÄãYou only need to do this if you haven't already set up an indexmetal.index({"text": "foo1"})metal.index({"text": "foo"})    {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}Query‚ÄãNow that our index is set up, we can set up a retriever and start querying it.from langchain.retrievers import MetalRetrieverAPI Reference:MetalRetrieverretriever = MetalRetriever(metal, params={"limit": 2})retriever.get_relevant_documents("foo1")    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]PreviousLOTR (Merger Retriever)NextPinecone Hybrid SearchIngest DocumentsQuery IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsRetrieversMetalOn this pageMetalMetal is a managed service for ML Embeddings.This notebook shows how to use Metal's retriever.First, you will need to sign up for Metal and get an API key. You can do so here# !pip install metal_sdkfrom metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);Ingest Documents‚ÄãYou only need to do this if you haven't already set up an indexmetal.index({"text": "foo1"})metal.index({"text": "foo"})    {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}Query‚ÄãNow that our index is set up, we can set up a retriever and start querying it.from langchain.retrievers import MetalRetrieverAPI Reference:MetalRetrieverretriever = MetalRetriever(metal, params={"limit": 2})retriever.get_relevant_documents("foo1")    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]PreviousLOTR (Merger Retriever)NextPinecone Hybrid SearchIngest DocumentsQuery IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsRetrieversMetalOn this pageMetalMetal is a managed service for ML Embeddings.This notebook shows how to use Metal's retriever.First, you will need to sign up for Metal and get an API key. You can do so here# !pip install metal_sdkfrom metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);Ingest Documents‚ÄãYou only need to do this if you haven't already set up an indexmetal.index({"text": "foo1"})metal.index({"text": "foo"})    {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}Query‚ÄãNow that our index is set up, we can set up a retriever and start querying it.from langchain.retrievers import MetalRetrieverAPI Reference:MetalRetrieverretriever = MetalRetriever(metal, params={"limit": 2})retriever.get_relevant_documents("foo1")    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]PreviousLOTR (Merger Retriever)NextPinecone Hybrid SearchIngest DocumentsQuery IntegrationsRetrieversMetalOn this pageMetalMetal is a managed service for ML Embeddings.This notebook shows how to use Metal's retriever.First, you will need to sign up for Metal and get an API key. You can do so here# !pip install metal_sdkfrom metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);Ingest Documents‚ÄãYou only need to do this if you haven't already set up an indexmetal.index({"text": "foo1"})metal.index({"text": "foo"})    {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}Query‚ÄãNow that our index is set up, we can set up a retriever and start querying it.from langchain.retrievers import MetalRetrieverAPI Reference:MetalRetrieverretriever = MetalRetriever(metal, params={"limit": 2})retriever.get_relevant_documents("foo1")    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]PreviousLOTR (Merger Retriever)NextPinecone Hybrid SearchIngest DocumentsQuery IntegrationsRetrieversMetalOn this pageMetalMetal is a managed service for ML Embeddings.This notebook shows how to use Metal's retriever.First, you will need to sign up for Metal and get an API key. You can do so here# !pip install metal_sdkfrom metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);Ingest Documents‚ÄãYou only need to do this if you haven't already set up an indexmetal.index({"text": "foo1"})metal.index({"text": "foo"})    {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}Query‚ÄãNow that our index is set up, we can set up a retriever and start querying it.from langchain.retrievers import MetalRetrieverAPI Reference:MetalRetrieverretriever = MetalRetriever(metal, params={"limit": 2})retriever.get_relevant_documents("foo1")    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]PreviousLOTR (Merger Retriever)NextPinecone Hybrid Search IntegrationsRetrieversMetalOn this pageMetalMetal is a managed service for ML Embeddings.This notebook shows how to use Metal's retriever.First, you will need to sign up for Metal and get an API key. You can do so here# !pip install metal_sdkfrom metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);Ingest Documents‚ÄãYou only need to do this if you haven't already set up an indexmetal.index({"text": "foo1"})metal.index({"text": "foo"})    {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}Query‚ÄãNow that our index is set up, we can set up a retriever and start querying it.from langchain.retrievers import MetalRetrieverAPI Reference:MetalRetrieverretriever = MetalRetriever(metal, params={"limit": 2})retriever.get_relevant_documents("foo1")    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]PreviousLOTR (Merger Retriever)NextPinecone Hybrid Search On this page MetalMetal is a managed service for ML Embeddings.This notebook shows how to use Metal's retriever.First, you will need to sign up for Metal and get an API key. You can do so here# !pip install metal_sdkfrom metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);Ingest Documents‚ÄãYou only need to do this if you haven't already set up an indexmetal.index({"text": "foo1"})metal.index({"text": "foo"})    {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}Query‚ÄãNow that our index is set up, we can set up a retriever and start querying it.from langchain.retrievers import MetalRetrieverAPI Reference:MetalRetrieverretriever = MetalRetriever(metal, params={"limit": 2})retriever.get_relevant_documents("foo1")    [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})] # !pip install metal_sdk # !pip install metal_sdk  from metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID); from metal_sdk.metal import MetalAPI_KEY = ""CLIENT_ID = ""INDEX_ID = ""metal = Metal(API_KEY, CLIENT_ID, INDEX_ID);  metal.index({"text": "foo1"})metal.index({"text": "foo"}) metal.index({"text": "foo1"})metal.index({"text": "foo"})      {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}     {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}     {'data': {'id': '642739aa7559b026b4430e42',      'text': 'foo',      'createdAt': '2023-03-31T19:51:06.748Z'}}  from langchain.retrievers import MetalRetriever from langchain.retrievers import MetalRetriever  API Reference:MetalRetriever retriever = MetalRetriever(metal, params={"limit": 2}) retriever = MetalRetriever(metal, params={"limit": 2})  retriever.get_relevant_documents("foo1") retriever.get_relevant_documents("foo1")      [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]     [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]     [Document(page_content='foo1', metadata={'dist': '1.19209289551e-07', 'id': '642739a17559b026b4430e40', 'createdAt': '2023-03-31T19:50:57.853Z'}),     Document(page_content='foo1', metadata={'dist': '4.05311584473e-06', 'id': '642738f67559b026b4430e3c', 'createdAt': '2023-03-31T19:48:06.769Z'})]  Previous LOTR (Merger Retriever) Next Pinecone Hybrid Search Ingest DocumentsQuery Ingest DocumentsQuery CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Amazon Kendra (/docs/integrations/retrievers/amazon_kendra_retriever) Arxiv (/docs/integrations/retrievers/arxiv) Azure Cognitive Search (/docs/integrations/retrievers/azure_cognitive_search) BM25 (/docs/integrations/retrievers/bm25) Chaindesk (/docs/integrations/retrievers/chaindesk) ChatGPT Plugin (/docs/integrations/retrievers/chatgpt-plugin) Cohere Reranker (/docs/integrations/retrievers/cohere-reranker) DocArray Retriever (/docs/integrations/retrievers/docarray_retriever) ElasticSearch BM25 (/docs/integrations/retrievers/elastic_search_bm25) Google Cloud Enterprise Search (/docs/integrations/retrievers/google_cloud_enterprise_search) Google Drive Retriever (/docs/integrations/retrievers/google_drive) kNN (/docs/integrations/retrievers/knn) LOTR (Merger Retriever) (/docs/integrations/retrievers/merger_retriever) Metal (/docs/integrations/retrievers/metal) Pinecone Hybrid Search (/docs/integrations/retrievers/pinecone_hybrid_search) PubMed (/docs/integrations/retrievers/pubmed) RePhraseQueryRetriever (/docs/integrations/retrievers/re_phrase) SVM (/docs/integrations/retrievers/svm) TF-IDF (/docs/integrations/retrievers/tf_idf) Vespa (/docs/integrations/retrievers/vespa) Weaviate Hybrid Search (/docs/integrations/retrievers/weaviate-hybrid) Wikipedia (/docs/integrations/retrievers/wikipedia) Zep (/docs/integrations/retrievers/zep_memorystore) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Retrievers (/docs/integrations/retrievers/) Metal (https://github.com/getmetal/metal-python) Metal's (https://docs.getmetal.io/introduction) here (https://docs.getmetal.io/misc-create-app) ‚Äã (#ingest-documents) ‚Äã (#query) MetalRetriever (https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.metal.MetalRetriever.html) PreviousLOTR (Merger Retriever) (/docs/integrations/retrievers/merger_retriever) NextPinecone Hybrid Search (/docs/integrations/retrievers/pinecone_hybrid_search) Ingest Documents (#ingest-documents) Query (#query) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)