This notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example. To access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter. Let's load all issues and PRs created by "UmerHA". Here's a list of all filters you can use: For more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues. By default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=False IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcripts Etherscan Loader acreom Airbyte CDK Airbyte Gong Airbyte Hubspot Airbyte JSON Airbyte Salesforce Airbyte Shopify Airbyte Stripe Airbyte Typeform Airbyte Zendesk Support Airtable Alibaba Cloud MaxCompute Apify Dataset ArcGIS Arxiv AssemblyAI Audio Transcripts Async Chromium AsyncHtmlLoader AWS S3 Directory AWS S3 File AZLyrics Azure Blob Storage Container Azure Blob Storage File Azure Document Intelligence BibTeX BiliBili Blackboard Blockchain Brave Search Browserless ChatGPT Data College Confidential Concurrent Loader Confluence CoNLL-U Copy Paste CSV Cube Semantic Layer Datadog Logs Diffbot Discord Docugami Dropbox DuckDB Email Embaas EPub EverNote example_data Microsoft Excel Facebook Chat Fauna Figma Geopandas Git GitBook GitHub Google BigQuery Google Cloud Storage Directory Google Cloud Storage File Google Drive Grobid Gutenberg Hacker News Huawei OBS Directory Huawei OBS File HuggingFace dataset iFixit Images Image captions IMSDb Iugu Joplin Jupyter Notebook LarkSuite (FeiShu) Mastodon MediaWikiDump MergeDocLoader mhtml Microsoft OneDrive Microsoft PowerPoint Microsoft SharePoint Microsoft Word Modern Treasury News URL Notion DB 1/2 Notion DB 2/2 Nuclia Understanding API document loader Obsidian Open Document Format (ODT) Open City Data Org-mode Pandas DataFrame Amazon Textract Polars DataFrame Psychic PubMed PySpark DataFrame Loader ReadTheDocs Documentation Recursive URL Loader Reddit Roam Rockset RSS Feeds RST Sitemap Slack Snowflake Source Code Spreedly Stripe Subtitle Telegram Tencent COS Directory Tencent COS File TensorFlow Datasets 2Markdown TOML Trello TSV Twitter Unstructured File URL Weather WebBaseLoader WhatsApp Chat Wikipedia XML Xorbits Pandas DataFrame Loading documents from a YouTube url YouTube transcripts Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Document loaders GitHub GitHubIssuesLoader include_prs milestone state assignee creator mentioned labels sort direction since Setup access token Load Issues and PRs Only load issues Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument loadersGitHubOn this pageGitHubThis notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.Setup access token‚ÄãTo access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter.# If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()Load Issues and PRs‚Äãfrom langchain.document_loaders import GitHubIssuesLoaderAPI Reference:GitHubIssuesLoaderloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)Let's load all issues and PRs created by "UmerHA".Here's a list of all filters you can use:include_prsmilestonestateassigneecreatormentionedlabelssortdirectionsinceFor more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues.docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}Only load issues‚ÄãBy default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=Falseloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}PreviousGitBookNextGoogle BigQuerySetup access tokenLoad Issues and PRsOnly load issuesCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument loadersGitHubOn this pageGitHubThis notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.Setup access token‚ÄãTo access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter.# If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()Load Issues and PRs‚Äãfrom langchain.document_loaders import GitHubIssuesLoaderAPI Reference:GitHubIssuesLoaderloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)Let's load all issues and PRs created by "UmerHA".Here's a list of all filters you can use:include_prsmilestonestateassigneecreatormentionedlabelssortdirectionsinceFor more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues.docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}Only load issues‚ÄãBy default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=Falseloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}PreviousGitBookNextGoogle BigQuerySetup access tokenLoad Issues and PRsOnly load issues IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument loadersGitHubOn this pageGitHubThis notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.Setup access token‚ÄãTo access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter.# If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()Load Issues and PRs‚Äãfrom langchain.document_loaders import GitHubIssuesLoaderAPI Reference:GitHubIssuesLoaderloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)Let's load all issues and PRs created by "UmerHA".Here's a list of all filters you can use:include_prsmilestonestateassigneecreatormentionedlabelssortdirectionsinceFor more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues.docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}Only load issues‚ÄãBy default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=Falseloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}PreviousGitBookNextGoogle BigQuerySetup access tokenLoad Issues and PRsOnly load issues IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders example_data Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsDocument loadersGitHubOn this pageGitHubThis notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.Setup access token‚ÄãTo access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter.# If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()Load Issues and PRs‚Äãfrom langchain.document_loaders import GitHubIssuesLoaderAPI Reference:GitHubIssuesLoaderloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)Let's load all issues and PRs created by "UmerHA".Here's a list of all filters you can use:include_prsmilestonestateassigneecreatormentionedlabelssortdirectionsinceFor more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues.docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}Only load issues‚ÄãBy default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=Falseloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}PreviousGitBookNextGoogle BigQuerySetup access tokenLoad Issues and PRsOnly load issues IntegrationsDocument loadersGitHubOn this pageGitHubThis notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.Setup access token‚ÄãTo access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter.# If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()Load Issues and PRs‚Äãfrom langchain.document_loaders import GitHubIssuesLoaderAPI Reference:GitHubIssuesLoaderloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)Let's load all issues and PRs created by "UmerHA".Here's a list of all filters you can use:include_prsmilestonestateassigneecreatormentionedlabelssortdirectionsinceFor more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues.docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}Only load issues‚ÄãBy default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=Falseloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}PreviousGitBookNextGoogle BigQuerySetup access tokenLoad Issues and PRsOnly load issues IntegrationsDocument loadersGitHubOn this pageGitHubThis notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.Setup access token‚ÄãTo access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter.# If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()Load Issues and PRs‚Äãfrom langchain.document_loaders import GitHubIssuesLoaderAPI Reference:GitHubIssuesLoaderloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)Let's load all issues and PRs created by "UmerHA".Here's a list of all filters you can use:include_prsmilestonestateassigneecreatormentionedlabelssortdirectionsinceFor more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues.docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}Only load issues‚ÄãBy default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=Falseloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}PreviousGitBookNextGoogle BigQuery IntegrationsDocument loadersGitHubOn this pageGitHubThis notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.Setup access token‚ÄãTo access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter.# If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()Load Issues and PRs‚Äãfrom langchain.document_loaders import GitHubIssuesLoaderAPI Reference:GitHubIssuesLoaderloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)Let's load all issues and PRs created by "UmerHA".Here's a list of all filters you can use:include_prsmilestonestateassigneecreatormentionedlabelssortdirectionsinceFor more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues.docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}Only load issues‚ÄãBy default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=Falseloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}PreviousGitBookNextGoogle BigQuery On this page GitHubThis notebooks shows how you can load issues and pull requests (PRs) for a given repository on GitHub. We will use the LangChain Python repository as an example.Setup access token‚ÄãTo access the GitHub API, you need a personal access token - you can set up yours here: https://github.com/settings/tokens?type=beta. You can either set this token as the environment variable GITHUB_PERSONAL_ACCESS_TOKEN and it will be automatically pulled in, or you can pass it in directly at initializaiton as the access_token named parameter.# If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()Load Issues and PRs‚Äãfrom langchain.document_loaders import GitHubIssuesLoaderAPI Reference:GitHubIssuesLoaderloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)Let's load all issues and PRs created by "UmerHA".Here's a list of all filters you can use:include_prsmilestonestateassigneecreatormentionedlabelssortdirectionsinceFor more info, see https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues.docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}Only load issues‚ÄãBy default, the GitHub API returns considers pull requests to also be issues. To only get 'pure' issues (i.e., no pull requests), use include_prs=Falseloader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()print(docs[0].page_content)print(docs[0].metadata)    ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False} # If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass() # If you haven't set your access token as an environment variable, pass it in here.from getpass import getpassACCESS_TOKEN = getpass()  from langchain.document_loaders import GitHubIssuesLoader from langchain.document_loaders import GitHubIssuesLoader  API Reference:GitHubIssuesLoader loader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",) loader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",)  docs = loader.load() docs = loader.load()  print(docs[0].page_content)print(docs[0].metadata) print(docs[0].page_content)print(docs[0].metadata)      # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}     # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}     # Creates GitHubLoader (#5257)        GitHubLoader is a DocumentLoader that loads issues and PRs from GitHub.        Fixes #5257        Community members can review the PR once tests pass. Tag maintainers/contributors who might be interested:    DataLoaders    - @eyurtsev        {'url': 'https://github.com/hwchase17/langchain/pull/5408', 'title': 'DocumentLoader for GitHub', 'creator': 'UmerHA', 'created_at': '2023-05-29T14:50:53Z', 'comments': 0, 'state': 'open', 'labels': ['enhancement', 'lgtm', 'doc loader'], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5408, 'is_pull_request': True}  loader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load() loader = GitHubIssuesLoader(    repo="hwchase17/langchain",    access_token=ACCESS_TOKEN,  # delete/comment out this argument if you've set the access token as an env var.    creator="UmerHA",    include_prs=False,)docs = loader.load()  print(docs[0].page_content)print(docs[0].metadata) print(docs[0].page_content)print(docs[0].metadata)      ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}     ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}     ### System Info        LangChain version = 0.0.167    Python version = 3.11.0    System = Windows 11 (using Jupyter)        ### Who can help?        - @hwchase17    - @agola11    - @UmerHA (I have a fix ready, will submit a PR)        ### Information        - [ ] The official example notebooks/scripts    - [X] My own modified scripts        ### Related Components        - [X] LLMs/Chat Models    - [ ] Embedding Models    - [X] Prompts / Prompt Templates / Prompt Selectors    - [ ] Output Parsers    - [ ] Document Loaders    - [ ] Vector Stores / Retrievers    - [ ] Memory    - [ ] Agents / Agent Executors    - [ ] Tools / Toolkits    - [ ] Chains    - [ ] Callbacks/Tracing    - [ ] Async        ### Reproduction        ```    import os    os.environ["OPENAI_API_KEY"] = "..."        from langchain.chains import LLMChain    from langchain.chat_models import ChatOpenAI    from langchain.prompts import PromptTemplate    from langchain.prompts.chat import ChatPromptTemplate    from langchain.schema import messages_from_dict        role_strings = [        ("system", "you are a bird expert"),         ("human", "which bird has a point beak?")    ]    prompt = ChatPromptTemplate.from_role_strings(role_strings)    chain = LLMChain(llm=ChatOpenAI(), prompt=prompt)    chain.run({})    ```        ### Expected behavior        Chain should run    {'url': 'https://github.com/hwchase17/langchain/issues/5027', 'title': "ChatOpenAI models don't work with prompts created via ChatPromptTemplate.from_role_strings", 'creator': 'UmerHA', 'created_at': '2023-05-20T10:39:18Z', 'comments': 1, 'state': 'open', 'labels': [], 'assignee': None, 'milestone': None, 'locked': False, 'number': 5027, 'is_pull_request': False}  Previous GitBook Next Google BigQuery Setup access tokenLoad Issues and PRsOnly load issues Setup access tokenLoad Issues and PRsOnly load issues CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Etherscan Loader (/docs/integrations/document_loaders/Etherscan) acreom (/docs/integrations/document_loaders/acreom) Airbyte CDK (/docs/integrations/document_loaders/airbyte_cdk) Airbyte Gong (/docs/integrations/document_loaders/airbyte_gong) Airbyte Hubspot (/docs/integrations/document_loaders/airbyte_hubspot) Airbyte JSON (/docs/integrations/document_loaders/airbyte_json) Airbyte Salesforce (/docs/integrations/document_loaders/airbyte_salesforce) Airbyte Shopify (/docs/integrations/document_loaders/airbyte_shopify) Airbyte Stripe (/docs/integrations/document_loaders/airbyte_stripe) Airbyte Typeform (/docs/integrations/document_loaders/airbyte_typeform) Airbyte Zendesk Support (/docs/integrations/document_loaders/airbyte_zendesk_support) Airtable (/docs/integrations/document_loaders/airtable) Alibaba Cloud MaxCompute (/docs/integrations/document_loaders/alibaba_cloud_maxcompute) Apify Dataset (/docs/integrations/document_loaders/apify_dataset) ArcGIS (/docs/integrations/document_loaders/arcgis) Arxiv (/docs/integrations/document_loaders/arxiv) AssemblyAI Audio Transcripts (/docs/integrations/document_loaders/assemblyai) Async Chromium (/docs/integrations/document_loaders/async_chromium) AsyncHtmlLoader (/docs/integrations/document_loaders/async_html) AWS S3 Directory (/docs/integrations/document_loaders/aws_s3_directory) AWS S3 File (/docs/integrations/document_loaders/aws_s3_file) AZLyrics (/docs/integrations/document_loaders/azlyrics) Azure Blob Storage Container (/docs/integrations/document_loaders/azure_blob_storage_container) Azure Blob Storage File (/docs/integrations/document_loaders/azure_blob_storage_file) Azure Document Intelligence (/docs/integrations/document_loaders/azure_document_intelligence) BibTeX (/docs/integrations/document_loaders/bibtex) BiliBili (/docs/integrations/document_loaders/bilibili) Blackboard (/docs/integrations/document_loaders/blackboard) Blockchain (/docs/integrations/document_loaders/blockchain) Brave Search (/docs/integrations/document_loaders/brave_search) Browserless (/docs/integrations/document_loaders/browserless) ChatGPT Data (/docs/integrations/document_loaders/chatgpt_loader) College Confidential (/docs/integrations/document_loaders/college_confidential) Concurrent Loader (/docs/integrations/document_loaders/concurrent) Confluence (/docs/integrations/document_loaders/confluence) CoNLL-U (/docs/integrations/document_loaders/conll-u) Copy Paste (/docs/integrations/document_loaders/copypaste) CSV (/docs/integrations/document_loaders/csv) Cube Semantic Layer (/docs/integrations/document_loaders/cube_semantic) Datadog Logs (/docs/integrations/document_loaders/datadog_logs) Diffbot (/docs/integrations/document_loaders/diffbot) Discord (/docs/integrations/document_loaders/discord) Docugami (/docs/integrations/document_loaders/docugami) Dropbox (/docs/integrations/document_loaders/dropbox) DuckDB (/docs/integrations/document_loaders/duckdb) Email (/docs/integrations/document_loaders/email) Embaas (/docs/integrations/document_loaders/embaas) EPub (/docs/integrations/document_loaders/epub) EverNote (/docs/integrations/document_loaders/evernote) example_data (/docs/integrations/document_loaders/example_data/notebook) Microsoft Excel (/docs/integrations/document_loaders/excel) Facebook Chat (/docs/integrations/document_loaders/facebook_chat) Fauna (/docs/integrations/document_loaders/fauna) Figma (/docs/integrations/document_loaders/figma) Geopandas (/docs/integrations/document_loaders/geopandas) Git (/docs/integrations/document_loaders/git) GitBook (/docs/integrations/document_loaders/gitbook) GitHub (/docs/integrations/document_loaders/github) Google BigQuery (/docs/integrations/document_loaders/google_bigquery) Google Cloud Storage Directory (/docs/integrations/document_loaders/google_cloud_storage_directory) Google Cloud Storage File (/docs/integrations/document_loaders/google_cloud_storage_file) Google Drive (/docs/integrations/document_loaders/google_drive) Grobid (/docs/integrations/document_loaders/grobid) Gutenberg (/docs/integrations/document_loaders/gutenberg) Hacker News (/docs/integrations/document_loaders/hacker_news) Huawei OBS Directory (/docs/integrations/document_loaders/huawei_obs_directory) Huawei OBS File (/docs/integrations/document_loaders/huawei_obs_file) HuggingFace dataset (/docs/integrations/document_loaders/hugging_face_dataset) iFixit (/docs/integrations/document_loaders/ifixit) Images (/docs/integrations/document_loaders/image) Image captions (/docs/integrations/document_loaders/image_captions) IMSDb (/docs/integrations/document_loaders/imsdb) Iugu (/docs/integrations/document_loaders/iugu) Joplin (/docs/integrations/document_loaders/joplin) Jupyter Notebook (/docs/integrations/document_loaders/jupyter_notebook) LarkSuite (FeiShu) (/docs/integrations/document_loaders/larksuite) Mastodon (/docs/integrations/document_loaders/mastodon) MediaWikiDump (/docs/integrations/document_loaders/mediawikidump) MergeDocLoader (/docs/integrations/document_loaders/merge_doc_loader) mhtml (/docs/integrations/document_loaders/mhtml) Microsoft OneDrive (/docs/integrations/document_loaders/microsoft_onedrive) Microsoft PowerPoint (/docs/integrations/document_loaders/microsoft_powerpoint) Microsoft SharePoint (/docs/integrations/document_loaders/microsoft_sharepoint) Microsoft Word (/docs/integrations/document_loaders/microsoft_word) Modern Treasury (/docs/integrations/document_loaders/modern_treasury) News URL (/docs/integrations/document_loaders/news) Notion DB 1/2 (/docs/integrations/document_loaders/notion) Notion DB 2/2 (/docs/integrations/document_loaders/notiondb) Nuclia Understanding API document loader (/docs/integrations/document_loaders/nuclia) Obsidian (/docs/integrations/document_loaders/obsidian) Open Document Format (ODT) (/docs/integrations/document_loaders/odt) Open City Data (/docs/integrations/document_loaders/open_city_data) Org-mode (/docs/integrations/document_loaders/org_mode) Pandas DataFrame (/docs/integrations/document_loaders/pandas_dataframe) Amazon Textract (/docs/integrations/document_loaders/pdf-amazonTextractPDFLoader) Polars DataFrame (/docs/integrations/document_loaders/polars_dataframe) Psychic (/docs/integrations/document_loaders/psychic) PubMed (/docs/integrations/document_loaders/pubmed) PySpark DataFrame Loader (/docs/integrations/document_loaders/pyspark_dataframe) ReadTheDocs Documentation (/docs/integrations/document_loaders/readthedocs_documentation) Recursive URL Loader (/docs/integrations/document_loaders/recursive_url_loader) Reddit (/docs/integrations/document_loaders/reddit) Roam (/docs/integrations/document_loaders/roam) Rockset (/docs/integrations/document_loaders/rockset) RSS Feeds (/docs/integrations/document_loaders/rss) RST (/docs/integrations/document_loaders/rst) Sitemap (/docs/integrations/document_loaders/sitemap) Slack (/docs/integrations/document_loaders/slack) Snowflake (/docs/integrations/document_loaders/snowflake) Source Code (/docs/integrations/document_loaders/source_code) Spreedly (/docs/integrations/document_loaders/spreedly) Stripe (/docs/integrations/document_loaders/stripe) Subtitle (/docs/integrations/document_loaders/subtitle) Telegram (/docs/integrations/document_loaders/telegram) Tencent COS Directory (/docs/integrations/document_loaders/tencent_cos_directory) Tencent COS File (/docs/integrations/document_loaders/tencent_cos_file) TensorFlow Datasets (/docs/integrations/document_loaders/tensorflow_datasets) 2Markdown (/docs/integrations/document_loaders/tomarkdown) TOML (/docs/integrations/document_loaders/toml) Trello (/docs/integrations/document_loaders/trello) TSV (/docs/integrations/document_loaders/tsv) Twitter (/docs/integrations/document_loaders/twitter) Unstructured File (/docs/integrations/document_loaders/unstructured_file) URL (/docs/integrations/document_loaders/url) Weather (/docs/integrations/document_loaders/weather) WebBaseLoader (/docs/integrations/document_loaders/web_base) WhatsApp Chat (/docs/integrations/document_loaders/whatsapp_chat) Wikipedia (/docs/integrations/document_loaders/wikipedia) XML (/docs/integrations/document_loaders/xml) Xorbits Pandas DataFrame (/docs/integrations/document_loaders/xorbits) Loading documents from a YouTube url (/docs/integrations/document_loaders/youtube_audio) YouTube transcripts (/docs/integrations/document_loaders/youtube_transcript) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Document loaders (/docs/integrations/document_loaders/) GitHub (https://github.com/) ‚Äã (#setup-access-token) https://github.com/settings/tokens?type=beta (https://github.com/settings/tokens?type=beta) ‚Äã (#load-issues-and-prs) GitHubIssuesLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.github.GitHubIssuesLoader.html) https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues (https://docs.github.com/en/rest/issues/issues?apiVersion=2022-11-28#list-repository-issues) ‚Äã (#only-load-issues) PreviousGitBook (/docs/integrations/document_loaders/gitbook) NextGoogle BigQuery (/docs/integrations/document_loaders/google_bigquery) Setup access token (#setup-access-token) Load Issues and PRs (#load-issues-and-prs) Only load issues (#only-load-issues) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)