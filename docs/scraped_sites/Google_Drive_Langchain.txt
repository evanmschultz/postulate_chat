Google Drive is a file storage and synchronization service developed by Google. This notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported. By default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader. GoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL: When you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument  When processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader.  You can also process a folder with a mix of files and Google Docs/Sheets using the following pattern: An external component can manage the complexity of Google Drive : langchain-googledrive It's compatible with the ̀langchain.document_loaders.GoogleDriveLoader and can be used in its place. To be compatible with containers, the authentication uses an environment variable ̀GOOGLE_ACCOUNT_FILE` to credential file (for user or service). By default, all files with these mime-type can be converted to Document. It's possible to update or customize this. See the documentation of GDriveLoader. But, the corresponding packages must be installed. All parameter compatible with Google list() API can be set. To specify the new pattern of the Google request, you can use a PromptTemplate(). The variables for the prompt can be set with kwargs in the constructor. Some pre-formated request are proposed (use {query}, {folder_id} and/or {mime_type}): You can customize the criteria to select the files. A set of predefined filter are proposed: | template                               | description                                                           | | -------------------------------------- | --------------------------------------------------------------------- | | gdrive-all-in-folder                   | Return all compatible files from a folder_id                        | | gdrive-query                           | Search query in all drives                                          | | gdrive-by-name                         | Search file with name query                                        | | gdrive-query-in-folder                 | Search query in folder_id (and sub-folders if recursive=true)  | | gdrive-mime-type                       | Search a specific mime_type                                         | | gdrive-mime-type-in-folder             | Search a specific mime_type in folder_id                          | | gdrive-query-with-mime-type            | Search query with a specific mime_type                            | | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id         | You can customize your pattern. The parameter mode accepts different values: The conversion can manage in Markdown format: The parameter gslide_mode accepts different values: The parameter gsheet_mode accepts different values: All Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()). If you use the mode="snippet", only the description will be used for the body. Else, the metadata['summary'] has the field. Sometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter. Sometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True. IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcripts Etherscan Loader acreom Airbyte CDK Airbyte Gong Airbyte Hubspot Airbyte JSON Airbyte Salesforce Airbyte Shopify Airbyte Stripe Airbyte Typeform Airbyte Zendesk Support Airtable Alibaba Cloud MaxCompute Apify Dataset ArcGIS Arxiv AssemblyAI Audio Transcripts Async Chromium AsyncHtmlLoader AWS S3 Directory AWS S3 File AZLyrics Azure Blob Storage Container Azure Blob Storage File Azure Document Intelligence BibTeX BiliBili Blackboard Blockchain Brave Search Browserless ChatGPT Data College Confidential Concurrent Loader Confluence CoNLL-U Copy Paste CSV Cube Semantic Layer Datadog Logs Diffbot Discord Docugami Dropbox DuckDB Email Embaas EPub EverNote example_data Microsoft Excel Facebook Chat Fauna Figma Geopandas Git GitBook GitHub Google BigQuery Google Cloud Storage Directory Google Cloud Storage File Google Drive Grobid Gutenberg Hacker News Huawei OBS Directory Huawei OBS File HuggingFace dataset iFixit Images Image captions IMSDb Iugu Joplin Jupyter Notebook LarkSuite (FeiShu) Mastodon MediaWikiDump MergeDocLoader mhtml Microsoft OneDrive Microsoft PowerPoint Microsoft SharePoint Microsoft Word Modern Treasury News URL Notion DB 1/2 Notion DB 2/2 Nuclia Understanding API document loader Obsidian Open Document Format (ODT) Open City Data Org-mode Pandas DataFrame Amazon Textract Polars DataFrame Psychic PubMed PySpark DataFrame Loader ReadTheDocs Documentation Recursive URL Loader Reddit Roam Rockset RSS Feeds RST Sitemap Slack Snowflake Source Code Spreedly Stripe Subtitle Telegram Tencent COS Directory Tencent COS File TensorFlow Datasets 2Markdown TOML Trello TSV Twitter Unstructured File URL Weather WebBaseLoader WhatsApp Chat Wikipedia XML Xorbits Pandas DataFrame Loading documents from a YouTube url YouTube transcripts Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Document loaders Google Drive Create a Google Cloud project or use an existing project Enable the Google Drive API Authorize credentials for desktop app pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib Folder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is "1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5" Document: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is "1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw" GoogleDriveLoader GoogleDriveLoader UnstructuredFileIOLoader text/text text/plain text/html text/csv text/markdown image/png image/jpeg application/epub+zip application/pdf application/rtf application/vnd.google-apps.document (GDoc) application/vnd.google-apps.presentation (GSlide) application/vnd.google-apps.spreadsheet (GSheet) application/vnd.google.colaboratory (Notebook colab) application/vnd.openxmlformats-officedocument.presentationml.presentation (PPTX) application/vnd.openxmlformats-officedocument.wordprocessingml.document (DOCX) PromptTemplate "document": return the body of each document "snippets": return the description of each file (set in metadata of Google Drive files). bullet link table titles "single" : one document with <PAGE BREAK> "slide" : one document by slide "elements" : one document for each elements. "single": Generate one document by line "elements" : one document with markdown array and <PAGE BREAK> tags. Prerequisites 🧑 Instructions for ingesting your Google Docs data Passing in Optional File Loaders Extended usageCustomize the search patternAdvanced usage Customize the search pattern Advanced usage Discord Twitter Python JS/TS Homepage Blog Skip to main content🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument loadersGoogle DriveOn this pageGoogle DriveGoogle Drive is a file storage and synchronization service developed by Google.This notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported.Prerequisites​Create a Google Cloud project or use an existing projectEnable the Google Drive APIAuthorize credentials for desktop apppip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib🧑 Instructions for ingesting your Google Docs data​By default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader.GoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL:Folder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is "1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5"Document: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is "1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw"pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlibfrom langchain.document_loaders import GoogleDriveLoaderAPI Reference:GoogleDriveLoaderloader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,)docs = loader.load()When you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False)Passing in Optional File Loaders​When processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader. from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoaderAPI Reference:GoogleDriveLoaderUnstructuredFileIOLoaderfile_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]You can also process a folder with a mix of files and Google Docs/Sheets using the following pattern:folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]Extended usage​An external component can manage the complexity of Google Drive : langchain-googledrive in its place.To be compatible with containers, the authentication uses an environment variable ̀GOOGLE_ACCOUNT_FILE` to credential file (for user or service).pip install langchain-googledrivefolder_id='root'#folder_id='1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5'# Use the advanced version.from langchain_googledrive.document_loaders import GoogleDriveLoaderloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    num_results=2,  # Maximum number of file to load)By default, all files with these mime-type can be converted to Document.text/texttext/plaintext/htmltext/csvtext/markdownimage/pngimage/jpegapplication/epub+zipapplication/pdfapplication/rtfapplication/vnd.google-apps.document (GDoc)application/vnd.google-apps.presentation (GSlide)application/vnd.google-apps.spreadsheet (GSheet)application/vnd.google.colaboratory (Notebook colab)application/vnd.openxmlformats-officedocument.presentationml.presentation (PPTX)application/vnd.openxmlformats-officedocument.wordprocessingml.document (DOCX)It's possible to update or customize this. See the documentation of GDriveLoader.But, the corresponding packages must be installed.pip install unstructuredfor doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")Customize the search pattern​All parameter compatible with Google list() API can be set.To specify the new pattern of the Google request, you can use a PromptTemplate(). Some pre-formated request are proposed (use {query}, {folder_id} and/or {mime_type}):You can customize the criteria to select the files. A set of predefined filter are proposed: | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id         |loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")You can customize your pattern.from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")API Reference:PromptTemplateModes for GSlide and GSheet​The parameter mode accepts different values:"document": return the body of each document"snippets": return the description of each file (set in metadata of Google Drive files).The conversion can manage in Markdown format:bulletlinktabletitlesThe parameter gslide_mode accepts different values:"single" : one document with <PAGE BREAK>"slide" : one document by slide"elements" : one document for each elements.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")The parameter gsheet_mode accepts different values:"single": Generate one document by line"elements" : one document with markdown array and <PAGE BREAK> tags.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")Advanced usage​All Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()).If you use the mode="snippet", only the description will be used for the body. Else, the metadata['summary'] has the field.Sometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter.Sometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True.import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")PreviousGoogle Cloud Storage FileNextGrobidPrerequisites🧑 Instructions for ingesting your Google Docs dataPassing in Optional File LoadersExtended usageCustomize the search patternAdvanced usageCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. Skip to main content 🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK 🦜️🔗 LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument loadersGoogle DriveOn this pageGoogle DriveGoogle Drive is a file storage and synchronization service developed by Google.This notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported.Prerequisites​Create a Google Cloud project or use an existing projectEnable the Google Drive APIAuthorize credentials for desktop apppip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib🧑 Instructions for ingesting your Google Docs data​By default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader.GoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL:Folder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is "1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5"Document: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is "1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw"pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlibfrom langchain.document_loaders import GoogleDriveLoaderAPI Reference:GoogleDriveLoaderloader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,)docs = loader.load()When you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False)Passing in Optional File Loaders​When processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader. from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoaderAPI Reference:GoogleDriveLoaderUnstructuredFileIOLoaderfile_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]You can also process a folder with a mix of files and Google Docs/Sheets using the following pattern:folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]Extended usage​An external component can manage the complexity of Google Drive : langchain-googledrive | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id         |loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")You can customize your pattern.from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")API Reference:PromptTemplateModes for GSlide and GSheet​The parameter mode accepts different values:"document": return the body of each document"snippets": return the description of each file (set in metadata of Google Drive files).The conversion can manage in Markdown format:bulletlinktabletitlesThe parameter gslide_mode accepts different values:"single" : one document with <PAGE BREAK>"slide" : one document by slide"elements" : one document for each elements.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")The parameter gsheet_mode accepts different values:"single": Generate one document by line"elements" : one document with markdown array and <PAGE BREAK> tags.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")Advanced usage​All Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()).If you use the mode="snippet", only the description will be used for the body. Else, the metadata['summary'] has the field.Sometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter.Sometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True.import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")PreviousGoogle Cloud Storage FileNextGrobidPrerequisites🧑 Instructions for ingesting your Google Docs dataPassing in Optional File LoadersExtended usageCustomize the search patternAdvanced usage IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument loadersGoogle DriveOn this pageGoogle DriveGoogle Drive is a file storage and synchronization service developed by Google.This notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported.Prerequisites​Create a Google Cloud project or use an existing projectEnable the Google Drive APIAuthorize credentials for desktop apppip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib🧑 Instructions for ingesting your Google Docs data​By default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader.GoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL:Folder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is "1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5"Document: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is "1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw"pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlibfrom langchain.document_loaders import GoogleDriveLoaderAPI Reference:GoogleDriveLoaderloader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,)docs = loader.load()When you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False)Passing in Optional File Loaders​When processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader. from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoaderAPI Reference:GoogleDriveLoaderUnstructuredFileIOLoaderfile_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]You can also process a folder with a mix of files and Google Docs/Sheets using the following pattern:folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]Extended usage​An external component can manage the complexity of Google Drive : langchain-googledrive | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id         |loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")You can customize your pattern.from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")API Reference:PromptTemplateModes for GSlide and GSheet​The parameter mode accepts different values:"document": return the body of each document"snippets": return the description of each file (set in metadata of Google Drive files).The conversion can manage in Markdown format:bulletlinktabletitlesThe parameter gslide_mode accepts different values:"single" : one document with <PAGE BREAK>"slide" : one document by slide"elements" : one document for each elements.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")The parameter gsheet_mode accepts different values:"single": Generate one document by line"elements" : one document with markdown array and <PAGE BREAK> tags.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")Advanced usage​All Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()).If you use the mode="snippet", only the description will be used for the body. Else, the metadata['summary'] has the field.Sometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter.Sometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True.import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")PreviousGoogle Cloud Storage FileNextGrobidPrerequisites🧑 Instructions for ingesting your Google Docs dataPassing in Optional File LoadersExtended usageCustomize the search patternAdvanced usage IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersEtherscan LoaderacreomAirbyte CDKAirbyte GongAirbyte HubspotAirbyte JSONAirbyte SalesforceAirbyte ShopifyAirbyte StripeAirbyte TypeformAirbyte Zendesk SupportAirtableAlibaba Cloud MaxComputeApify DatasetArcGISArxivAssemblyAI Audio TranscriptsAsync ChromiumAsyncHtmlLoaderAWS S3 DirectoryAWS S3 FileAZLyricsAzure Blob Storage ContainerAzure Blob Storage FileAzure Document IntelligenceBibTeXBiliBiliBlackboardBlockchainBrave SearchBrowserlessChatGPT DataCollege ConfidentialConcurrent LoaderConfluenceCoNLL-UCopy PasteCSVCube Semantic LayerDatadog LogsDiffbotDiscordDocugamiDropboxDuckDBEmailEmbaasEPubEverNoteexample_dataMicrosoft ExcelFacebook ChatFaunaFigmaGeopandasGitGitBookGitHubGoogle BigQueryGoogle Cloud Storage DirectoryGoogle Cloud Storage FileGoogle DriveGrobidGutenbergHacker NewsHuawei OBS DirectoryHuawei OBS FileHuggingFace datasetiFixitImagesImage captionsIMSDbIuguJoplinJupyter NotebookLarkSuite (FeiShu)MastodonMediaWikiDumpMergeDocLoadermhtmlMicrosoft OneDriveMicrosoft PowerPointMicrosoft SharePointMicrosoft WordModern TreasuryNews URLNotion DB 1/2Notion DB 2/2Nuclia Understanding API document loaderObsidianOpen Document Format (ODT)Open City DataOrg-modePandas DataFrameAmazon TextractPolars DataFramePsychicPubMedPySpark DataFrame LoaderReadTheDocs DocumentationRecursive URL LoaderRedditRoamRocksetRSS FeedsRSTSitemapSlackSnowflakeSource CodeSpreedlyStripeSubtitleTelegramTencent COS DirectoryTencent COS FileTensorFlow Datasets2MarkdownTOMLTrelloTSVTwitterUnstructured FileURLWeatherWebBaseLoaderWhatsApp ChatWikipediaXMLXorbits Pandas DataFrameLoading documents from a YouTube urlYouTube transcriptsDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders example_data Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsDocument loadersGoogle DriveOn this pageGoogle DriveGoogle Drive is a file storage and synchronization service developed by Google.This notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported.Prerequisites​Create a Google Cloud project or use an existing projectEnable the Google Drive APIAuthorize credentials for desktop apppip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib🧑 Instructions for ingesting your Google Docs data​By default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader.GoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL:Folder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is "1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5"Document: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is "1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw"pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlibfrom langchain.document_loaders import GoogleDriveLoaderAPI Reference:GoogleDriveLoaderloader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,)docs = loader.load()When you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False)Passing in Optional File Loaders​When processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader. from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoaderAPI Reference:GoogleDriveLoaderUnstructuredFileIOLoaderfile_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]You can also process a folder with a mix of files and Google Docs/Sheets using the following pattern:folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]Extended usage​An external component can manage the complexity of Google Drive : langchain-googledrive | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id         |loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")You can customize your pattern.from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")API Reference:PromptTemplateModes for GSlide and GSheet​The parameter mode accepts different values:"document": return the body of each document"snippets": return the description of each file (set in metadata of Google Drive files).The conversion can manage in Markdown format:bulletlinktabletitlesThe parameter gslide_mode accepts different values:"single" : one document with <PAGE BREAK>"slide" : one document by slide"elements" : one document for each elements.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")The parameter gsheet_mode accepts different values:"single": Generate one document by line"elements" : one document with markdown array and <PAGE BREAK> tags.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")Advanced usage​All Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()).If you use the mode="snippet", only the description will be used for the body. Else, the metadata['summary'] has the field.Sometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter.Sometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True.import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")PreviousGoogle Cloud Storage FileNextGrobidPrerequisites🧑 Instructions for ingesting your Google Docs dataPassing in Optional File LoadersExtended usageCustomize the search patternAdvanced usage IntegrationsDocument loadersGoogle DriveOn this pageGoogle DriveGoogle Drive is a file storage and synchronization service developed by Google.This notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported.Prerequisites​Create a Google Cloud project or use an existing projectEnable the Google Drive APIAuthorize credentials for desktop apppip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib🧑 Instructions for ingesting your Google Docs data​By default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader.GoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL:Folder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is "1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5"Document: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is "1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw"pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlibfrom langchain.document_loaders import GoogleDriveLoaderAPI Reference:GoogleDriveLoaderloader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,)docs = loader.load()When you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False)Passing in Optional File Loaders​When processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader. from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoaderAPI Reference:GoogleDriveLoaderUnstructuredFileIOLoaderfile_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]You can also process a folder with a mix of files and Google Docs/Sheets using the following pattern:folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]Extended usage​An external component can manage the complexity of Google Drive : langchain-googledrive | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id         |loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")You can customize your pattern.from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")API Reference:PromptTemplateModes for GSlide and GSheet​The parameter mode accepts different values:"document": return the body of each document"snippets": return the description of each file (set in metadata of Google Drive files).The conversion can manage in Markdown format:bulletlinktabletitlesThe parameter gslide_mode accepts different values:"single" : one document with <PAGE BREAK>"slide" : one document by slide"elements" : one document for each elements.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")The parameter gsheet_mode accepts different values:"single": Generate one document by line"elements" : one document with markdown array and <PAGE BREAK> tags.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")Advanced usage​All Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()).If you use the mode="snippet", only the description will be used for the body. Else, the metadata['summary'] has the field.Sometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter.Sometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True.import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")PreviousGoogle Cloud Storage FileNextGrobid IntegrationsDocument loadersGoogle DriveOn this pageGoogle DriveGoogle Drive is a file storage and synchronization service developed by Google.This notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported.Prerequisites​Create a Google Cloud project or use an existing projectEnable the Google Drive APIAuthorize credentials for desktop apppip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib🧑 Instructions for ingesting your Google Docs data​By default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader.GoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL:Folder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is "1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5"Document: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is "1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw"pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlibfrom langchain.document_loaders import GoogleDriveLoaderAPI Reference:GoogleDriveLoaderloader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,)docs = loader.load()When you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False)Passing in Optional File Loaders​When processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader. from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoaderAPI Reference:GoogleDriveLoaderUnstructuredFileIOLoaderfile_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]You can also process a folder with a mix of files and Google Docs/Sheets using the following pattern:folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]Extended usage​An external component can manage the complexity of Google Drive : langchain-googledrive | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id         |loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")You can customize your pattern.from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")API Reference:PromptTemplateModes for GSlide and GSheet​The parameter mode accepts different values:"document": return the body of each document"snippets": return the description of each file (set in metadata of Google Drive files).The conversion can manage in Markdown format:bulletlinktabletitlesThe parameter gslide_mode accepts different values:"single" : one document with <PAGE BREAK>"slide" : one document by slide"elements" : one document for each elements.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")The parameter gsheet_mode accepts different values:"single": Generate one document by line"elements" : one document with markdown array and <PAGE BREAK> tags.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")Advanced usage​All Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()).If you use the mode="snippet", only the description will be used for the body. Else, the metadata['summary'] has the field.Sometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter.Sometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True.import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")PreviousGoogle Cloud Storage FileNextGrobid On this page Google DriveGoogle Drive is a file storage and synchronization service developed by Google.This notebook covers how to load documents from Google Drive. Currently, only Google Docs are supported.Prerequisites​Create a Google Cloud project or use an existing projectEnable the Google Drive APIAuthorize credentials for desktop apppip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib🧑 Instructions for ingesting your Google Docs data​By default, the GoogleDriveLoader expects the credentials.json file to be ~/.credentials/credentials.json, but this is configurable using the credentials_path keyword argument. Same thing with token.json - token_path. Note that token.json will be created automatically the first time you use the loader.GoogleDriveLoader can load from a list of Google Docs document ids or a folder id. You can obtain your folder and document id from the URL:Folder: https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 -> folder id is "1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5"Document: https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit -> document id is "1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw"pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlibfrom langchain.document_loaders import GoogleDriveLoaderAPI Reference:GoogleDriveLoaderloader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,)docs = loader.load()When you pass a folder_id by default all files of type document, sheet and pdf are loaded. You can modify this behaviour by passing a file_types argument loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False)Passing in Optional File Loaders​When processing files other than Google Docs and Google Sheets, it can be helpful to pass an optional file loader to GoogleDriveLoader. If you pass in a file loader, that file loader will be used on documents that do not have a Google Docs or Google Sheets MIME type. Here is an example of how to load an Excel document from Google Drive using a file loader. from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoaderAPI Reference:GoogleDriveLoaderUnstructuredFileIOLoaderfile_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]You can also process a folder with a mix of files and Google Docs/Sheets using the following pattern:folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)docs = loader.load()docs[0]Extended usage​An external component can manage the complexity of Google Drive : langchain-googledrive | gdrive-query-with-mime-type-and-folder | Search query with a specific mime_type and in folder_id         |loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")You can customize your pattern.from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")API Reference:PromptTemplateModes for GSlide and GSheet​The parameter mode accepts different values:"document": return the body of each document"snippets": return the description of each file (set in metadata of Google Drive files).The conversion can manage in Markdown format:bulletlinktabletitlesThe parameter gslide_mode accepts different values:"single" : one document with <PAGE BREAK>"slide" : one document by slide"elements" : one document for each elements.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")The parameter gsheet_mode accepts different values:"single": Generate one document by line"elements" : one document with markdown array and <PAGE BREAK> tags.loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")Advanced usage​All Google File have a 'description' in the metadata. This field can be used to memorize a summary of the document or others indexed tags (See method lazy_update_description_with_summary()).If you use the mode="snippet", only the description will be used for the body. Else, the metadata['summary'] has the field.Sometime, a specific filter can be used to extract some information from the filename, to select some files with specific criteria. You can use a filter.Sometimes, many documents are returned. It's not necessary to have all documents in memory at the same time. You can use the lazy versions of methods, to get one document at a time. It's better to use a complex query in place of a recursive search. For each folder, a query must be applied if you activate recursive=True.import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...") pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib  from langchain.document_loaders import GoogleDriveLoader from langchain.document_loaders import GoogleDriveLoader  API Reference:GoogleDriveLoader loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,) loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    # Optional: configure whether to recursively fetch files from subfolders. Defaults to False.    recursive=False,)  docs = loader.load() docs = loader.load()  loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False) loader = GoogleDriveLoader(    folder_id="1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5",    file_types=["document", "sheet"],    recursive=False)  from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoader from langchain.document_loaders import GoogleDriveLoaderfrom langchain.document_loaders import UnstructuredFileIOLoader  API Reference:GoogleDriveLoaderUnstructuredFileIOLoader file_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},) file_id = "1x9WBtFPWMEAdjcJzPScRsjpjQvpSo_kz"loader = GoogleDriveLoader(    file_ids=[file_id],    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)  docs = loader.load() docs = loader.load()  docs[0] docs[0]  folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},) folder_id = "1asMOHY1BqBS84JcRbOag5LOJac74gpmD"loader = GoogleDriveLoader(    folder_id=folder_id,    file_loader_cls=UnstructuredFileIOLoader,    file_loader_kwargs={"mode": "elements"},)  docs = loader.load() docs = loader.load()  docs[0] docs[0]  pip install langchain-googledrive pip install langchain-googledrive  folder_id='root'#folder_id='1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5' folder_id='root'#folder_id='1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5'  # Use the advanced version.from langchain_googledrive.document_loaders import GoogleDriveLoader # Use the advanced version.from langchain_googledrive.document_loaders import GoogleDriveLoader  loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    num_results=2,  # Maximum number of file to load) loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    num_results=2,  # Maximum number of file to load)  pip install unstructured pip install unstructured  for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...") for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")  loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...") loader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template="gdrive-query",  # Default template to use    query="machine learning",    num_results=2,            # Maximum number of file to load    supportsAllDrives=False,  # GDrive `list()` parameter)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")  from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...") from langchain.prompts.prompt import PromptTemplateloader = GoogleDriveLoader(    folder_id=folder_id,    recursive=False,    template=PromptTemplate(        input_variables=["query", "query_name"],        template="fullText contains '{query}' and name contains '{query_name}' and trashed=false",        ),  # Default template to use    query="machine learning",    query_name="ML",        num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")  API Reference:PromptTemplate loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...") loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.presentation", # Only GSlide files    gslide_mode="slide",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")  loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...") loader = GoogleDriveLoader(    template="gdrive-mime-type",    mime_type="application/vnd.google-apps.spreadsheet", # Only GSheet files    gsheet_mode="elements",    num_results=2,  # Maximum number of file to load)for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")  import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...") import osloader = GoogleDriveLoader(                gdrive_api_file=os.environ["GOOGLE_ACCOUNT_FILE"],                num_results=2,                template="gdrive-query",                filter=lambda search, file: "#test" not in file.get('description',''),                query='machine learning',                supportsAllDrives=False,                )for doc in loader.load():    print("---")    print(doc.page_content.strip()[:60]+"...")  Previous Google Cloud Storage File Next Grobid Prerequisites🧑 Instructions for ingesting your Google Docs dataPassing in Optional File LoadersExtended usageCustomize the search patternAdvanced usage Prerequisites🧑 Instructions for ingesting your Google Docs dataPassing in Optional File LoadersExtended usageCustomize the search patternAdvanced usage CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright © 2023 LangChain, Inc. Copyright © 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) 🦜️🔗 LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Etherscan Loader (/docs/integrations/document_loaders/Etherscan) acreom (/docs/integrations/document_loaders/acreom) Airbyte CDK (/docs/integrations/document_loaders/airbyte_cdk) Airbyte Gong (/docs/integrations/document_loaders/airbyte_gong) Airbyte Hubspot (/docs/integrations/document_loaders/airbyte_hubspot) Airbyte JSON (/docs/integrations/document_loaders/airbyte_json) Airbyte Salesforce (/docs/integrations/document_loaders/airbyte_salesforce) Airbyte Shopify (/docs/integrations/document_loaders/airbyte_shopify) Airbyte Stripe (/docs/integrations/document_loaders/airbyte_stripe) Airbyte Typeform (/docs/integrations/document_loaders/airbyte_typeform) Airbyte Zendesk Support (/docs/integrations/document_loaders/airbyte_zendesk_support) Airtable (/docs/integrations/document_loaders/airtable) Alibaba Cloud MaxCompute (/docs/integrations/document_loaders/alibaba_cloud_maxcompute) Apify Dataset (/docs/integrations/document_loaders/apify_dataset) ArcGIS (/docs/integrations/document_loaders/arcgis) Arxiv (/docs/integrations/document_loaders/arxiv) AssemblyAI Audio Transcripts (/docs/integrations/document_loaders/assemblyai) Async Chromium (/docs/integrations/document_loaders/async_chromium) AsyncHtmlLoader (/docs/integrations/document_loaders/async_html) AWS S3 Directory (/docs/integrations/document_loaders/aws_s3_directory) AWS S3 File (/docs/integrations/document_loaders/aws_s3_file) AZLyrics (/docs/integrations/document_loaders/azlyrics) Azure Blob Storage Container (/docs/integrations/document_loaders/azure_blob_storage_container) Azure Blob Storage File (/docs/integrations/document_loaders/azure_blob_storage_file) Azure Document Intelligence (/docs/integrations/document_loaders/azure_document_intelligence) BibTeX (/docs/integrations/document_loaders/bibtex) BiliBili (/docs/integrations/document_loaders/bilibili) Blackboard (/docs/integrations/document_loaders/blackboard) Blockchain (/docs/integrations/document_loaders/blockchain) Brave Search (/docs/integrations/document_loaders/brave_search) Browserless (/docs/integrations/document_loaders/browserless) ChatGPT Data (/docs/integrations/document_loaders/chatgpt_loader) College Confidential (/docs/integrations/document_loaders/college_confidential) Concurrent Loader (/docs/integrations/document_loaders/concurrent) Confluence (/docs/integrations/document_loaders/confluence) CoNLL-U (/docs/integrations/document_loaders/conll-u) Copy Paste (/docs/integrations/document_loaders/copypaste) CSV (/docs/integrations/document_loaders/csv) Cube Semantic Layer (/docs/integrations/document_loaders/cube_semantic) Datadog Logs (/docs/integrations/document_loaders/datadog_logs) Diffbot (/docs/integrations/document_loaders/diffbot) Discord (/docs/integrations/document_loaders/discord) Docugami (/docs/integrations/document_loaders/docugami) Dropbox (/docs/integrations/document_loaders/dropbox) DuckDB (/docs/integrations/document_loaders/duckdb) Email (/docs/integrations/document_loaders/email) Embaas (/docs/integrations/document_loaders/embaas) EPub (/docs/integrations/document_loaders/epub) EverNote (/docs/integrations/document_loaders/evernote) example_data (/docs/integrations/document_loaders/example_data/notebook) Microsoft Excel (/docs/integrations/document_loaders/excel) Facebook Chat (/docs/integrations/document_loaders/facebook_chat) Fauna (/docs/integrations/document_loaders/fauna) Figma (/docs/integrations/document_loaders/figma) Geopandas (/docs/integrations/document_loaders/geopandas) Git (/docs/integrations/document_loaders/git) GitBook (/docs/integrations/document_loaders/gitbook) GitHub (/docs/integrations/document_loaders/github) Google BigQuery (/docs/integrations/document_loaders/google_bigquery) Google Cloud Storage Directory (/docs/integrations/document_loaders/google_cloud_storage_directory) Google Cloud Storage File (/docs/integrations/document_loaders/google_cloud_storage_file) Google Drive (/docs/integrations/document_loaders/google_drive) Grobid (/docs/integrations/document_loaders/grobid) Gutenberg (/docs/integrations/document_loaders/gutenberg) Hacker News (/docs/integrations/document_loaders/hacker_news) Huawei OBS Directory (/docs/integrations/document_loaders/huawei_obs_directory) Huawei OBS File (/docs/integrations/document_loaders/huawei_obs_file) HuggingFace dataset (/docs/integrations/document_loaders/hugging_face_dataset) iFixit (/docs/integrations/document_loaders/ifixit) Images (/docs/integrations/document_loaders/image) Image captions (/docs/integrations/document_loaders/image_captions) IMSDb (/docs/integrations/document_loaders/imsdb) Iugu (/docs/integrations/document_loaders/iugu) Joplin (/docs/integrations/document_loaders/joplin) Jupyter Notebook (/docs/integrations/document_loaders/jupyter_notebook) LarkSuite (FeiShu) (/docs/integrations/document_loaders/larksuite) Mastodon (/docs/integrations/document_loaders/mastodon) MediaWikiDump (/docs/integrations/document_loaders/mediawikidump) MergeDocLoader (/docs/integrations/document_loaders/merge_doc_loader) mhtml (/docs/integrations/document_loaders/mhtml) Microsoft OneDrive (/docs/integrations/document_loaders/microsoft_onedrive) Microsoft PowerPoint (/docs/integrations/document_loaders/microsoft_powerpoint) Microsoft SharePoint (/docs/integrations/document_loaders/microsoft_sharepoint) Microsoft Word (/docs/integrations/document_loaders/microsoft_word) Modern Treasury (/docs/integrations/document_loaders/modern_treasury) News URL (/docs/integrations/document_loaders/news) Notion DB 1/2 (/docs/integrations/document_loaders/notion) Notion DB 2/2 (/docs/integrations/document_loaders/notiondb) Nuclia Understanding API document loader (/docs/integrations/document_loaders/nuclia) Obsidian (/docs/integrations/document_loaders/obsidian) Open Document Format (ODT) (/docs/integrations/document_loaders/odt) Open City Data (/docs/integrations/document_loaders/open_city_data) Org-mode (/docs/integrations/document_loaders/org_mode) Pandas DataFrame (/docs/integrations/document_loaders/pandas_dataframe) Amazon Textract (/docs/integrations/document_loaders/pdf-amazonTextractPDFLoader) Polars DataFrame (/docs/integrations/document_loaders/polars_dataframe) Psychic (/docs/integrations/document_loaders/psychic) PubMed (/docs/integrations/document_loaders/pubmed) PySpark DataFrame Loader (/docs/integrations/document_loaders/pyspark_dataframe) ReadTheDocs Documentation (/docs/integrations/document_loaders/readthedocs_documentation) Recursive URL Loader (/docs/integrations/document_loaders/recursive_url_loader) Reddit (/docs/integrations/document_loaders/reddit) Roam (/docs/integrations/document_loaders/roam) Rockset (/docs/integrations/document_loaders/rockset) RSS Feeds (/docs/integrations/document_loaders/rss) RST (/docs/integrations/document_loaders/rst) Sitemap (/docs/integrations/document_loaders/sitemap) Slack (/docs/integrations/document_loaders/slack) Snowflake (/docs/integrations/document_loaders/snowflake) Source Code (/docs/integrations/document_loaders/source_code) Spreedly (/docs/integrations/document_loaders/spreedly) Stripe (/docs/integrations/document_loaders/stripe) Subtitle (/docs/integrations/document_loaders/subtitle) Telegram (/docs/integrations/document_loaders/telegram) Tencent COS Directory (/docs/integrations/document_loaders/tencent_cos_directory) Tencent COS File (/docs/integrations/document_loaders/tencent_cos_file) TensorFlow Datasets (/docs/integrations/document_loaders/tensorflow_datasets) 2Markdown (/docs/integrations/document_loaders/tomarkdown) TOML (/docs/integrations/document_loaders/toml) Trello (/docs/integrations/document_loaders/trello) TSV (/docs/integrations/document_loaders/tsv) Twitter (/docs/integrations/document_loaders/twitter) Unstructured File (/docs/integrations/document_loaders/unstructured_file) URL (/docs/integrations/document_loaders/url) Weather (/docs/integrations/document_loaders/weather) WebBaseLoader (/docs/integrations/document_loaders/web_base) WhatsApp Chat (/docs/integrations/document_loaders/whatsapp_chat) Wikipedia (/docs/integrations/document_loaders/wikipedia) XML (/docs/integrations/document_loaders/xml) Xorbits Pandas DataFrame (/docs/integrations/document_loaders/xorbits) Loading documents from a YouTube url (/docs/integrations/document_loaders/youtube_audio) YouTube transcripts (/docs/integrations/document_loaders/youtube_transcript) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Document loaders (/docs/integrations/document_loaders/) Google Drive (https://en.wikipedia.org/wiki/Google_Drive) ​ (#prerequisites) Google Drive API (https://console.cloud.google.com/flows/enableapi?apiid=drive.googleapis.com) Authorize credentials for desktop app (https://developers.google.com/drive/api/quickstart/python#authorize_credentials_for_a_desktop_application) ​ (#-instructions-for-ingesting-your-google-docs-data) https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5 (https://drive.google.com/drive/u/0/folders/1yucgL9WGgWZdM1TOuKkeghlPizuzMYb5) https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit (https://docs.google.com/document/d/1bfaMQ18_i56204VaQDVeAFpqEijJTgvurupdEDiaUQw/edit) GoogleDriveLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.googledrive.GoogleDriveLoader.html) ​ (#passing-in-optional-file-loaders) GoogleDriveLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.googledrive.GoogleDriveLoader.html) UnstructuredFileIOLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.unstructured.UnstructuredFileIOLoader.html) ​ (#extended-usage) ​ (#customize-the-search-pattern) list() (https://developers.google.com/drive/api/v3/reference/files/list) PromptTemplate (https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html) ​ (#modes-for-gslide-and-gsheet) ​ (#advanced-usage) PreviousGoogle Cloud Storage File (/docs/integrations/document_loaders/google_cloud_storage_file) NextGrobid (/docs/integrations/document_loaders/grobid) Prerequisites (#prerequisites) 🧑 Instructions for ingesting your Google Docs data (#-instructions-for-ingesting-your-google-docs-data) Passing in Optional File Loaders (#passing-in-optional-file-loaders) Extended usage (#extended-usage) Customize the search pattern (#customize-the-search-pattern) Advanced usage (#advanced-usage) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)