You can use a local NucliaDB instance or use Nuclia Cloud. When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key. Note: By default backend is set to http://localhost:8080. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores NucliaDB NucliaDB NucliaDB Usage with nuclia.cloud Usage with a local instance Add and delete texts to your Knowledge Box Search in your Knowledge Box Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesNucliaDBOn this pageNucliaDBYou can use a local NucliaDB instance or use Nuclia Cloud.When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key.#!pip install langchain nucliaUsage with nuclia.cloud‚Äãfrom langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)API Reference:NucliaDBUsage with a local instance‚ÄãNote: By default backend is set to http://localhost:8080.from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")API Reference:NucliaDBAdd and delete texts to your Knowledge Box‚Äãids = ndb.add_texts(["This is a new test", "This is a second test"])ndb.delete(ids=ids)Search in your Knowledge Box‚Äãresults = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content)PreviousNeo4j Vector IndexNextOpenSearchUsage with nuclia.cloudUsage with a local instanceAdd and delete texts to your Knowledge BoxSearch in your Knowledge BoxCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesNucliaDBOn this pageNucliaDBYou can use a local NucliaDB instance or use Nuclia Cloud.When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key.#!pip install langchain nucliaUsage with nuclia.cloud‚Äãfrom langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)API Reference:NucliaDBUsage with a local instance‚ÄãNote: By default backend is set to http://localhost:8080.from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")API Reference:NucliaDBAdd and delete texts to your Knowledge Box‚Äãids = ndb.add_texts(["This is a new test", "This is a second test"])ndb.delete(ids=ids)Search in your Knowledge Box‚Äãresults = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content)PreviousNeo4j Vector IndexNextOpenSearchUsage with nuclia.cloudUsage with a local instanceAdd and delete texts to your Knowledge BoxSearch in your Knowledge Box IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesNucliaDBOn this pageNucliaDBYou can use a local NucliaDB instance or use Nuclia Cloud.When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key.#!pip install langchain nucliaUsage with nuclia.cloud‚Äãfrom langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)API Reference:NucliaDBUsage with a local instance‚ÄãNote: By default backend is set to http://localhost:8080.from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")API Reference:NucliaDBAdd and delete texts to your Knowledge Box‚Äãids = ndb.add_texts(["This is a new test", "This is a second test"])ndb.delete(ids=ids)Search in your Knowledge Box‚Äãresults = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content)PreviousNeo4j Vector IndexNextOpenSearchUsage with nuclia.cloudUsage with a local instanceAdd and delete texts to your Knowledge BoxSearch in your Knowledge Box IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesNucliaDBOn this pageNucliaDBYou can use a local NucliaDB instance or use Nuclia Cloud.When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key.#!pip install langchain nucliaUsage with nuclia.cloud‚Äãfrom langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)API Reference:NucliaDBUsage with a local instance‚ÄãNote: By default backend is set to http://localhost:8080.from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")API Reference:NucliaDBAdd and delete texts to your Knowledge Box‚Äãids = ndb.add_texts(["This is a new test", "This is a second test"])ndb.delete(ids=ids)Search in your Knowledge Box‚Äãresults = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content)PreviousNeo4j Vector IndexNextOpenSearchUsage with nuclia.cloudUsage with a local instanceAdd and delete texts to your Knowledge BoxSearch in your Knowledge Box IntegrationsVector storesNucliaDBOn this pageNucliaDBYou can use a local NucliaDB instance or use Nuclia Cloud.When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key.#!pip install langchain nucliaUsage with nuclia.cloud‚Äãfrom langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)API Reference:NucliaDBUsage with a local instance‚ÄãNote: By default backend is set to http://localhost:8080.from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")API Reference:NucliaDBAdd and delete texts to your Knowledge Box‚Äãids = ndb.add_texts(["This is a new test", "This is a second test"])ndb.delete(ids=ids)Search in your Knowledge Box‚Äãresults = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content)PreviousNeo4j Vector IndexNextOpenSearchUsage with nuclia.cloudUsage with a local instanceAdd and delete texts to your Knowledge BoxSearch in your Knowledge Box IntegrationsVector storesNucliaDBOn this pageNucliaDBYou can use a local NucliaDB instance or use Nuclia Cloud.When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key.#!pip install langchain nucliaUsage with nuclia.cloud‚Äãfrom langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)API Reference:NucliaDBUsage with a local instance‚ÄãNote: By default backend is set to http://localhost:8080.from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")API Reference:NucliaDBAdd and delete texts to your Knowledge Box‚Äãids = ndb.add_texts(["This is a new test", "This is a second test"])ndb.delete(ids=ids)Search in your Knowledge Box‚Äãresults = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content)PreviousNeo4j Vector IndexNextOpenSearch IntegrationsVector storesNucliaDBOn this pageNucliaDBYou can use a local NucliaDB instance or use Nuclia Cloud.When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key.#!pip install langchain nucliaUsage with nuclia.cloud‚Äãfrom langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)API Reference:NucliaDBUsage with a local instance‚ÄãNote: By default backend is set to http://localhost:8080.from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")API Reference:NucliaDBAdd and delete texts to your Knowledge Box‚Äãids = ndb.add_texts(["This is a new test", "This is a second test"])ndb.delete(ids=ids)Search in your Knowledge Box‚Äãresults = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content)PreviousNeo4j Vector IndexNextOpenSearch On this page NucliaDBYou can use a local NucliaDB instance or use Nuclia Cloud.When using a local instance, you need a Nuclia Understanding API key, so your texts are properly vectorized and indexed. You can get a key by creating a free account at https://nuclia.cloud, and then create a NUA key.#!pip install langchain nucliaUsage with nuclia.cloud‚Äãfrom langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)API Reference:NucliaDBUsage with a local instance‚ÄãNote: By default backend is set to http://localhost:8080.from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")API Reference:NucliaDBAdd and delete texts to your Knowledge Box‚Äãids = ndb.add_texts(["This is a new test", "This is a second test"])ndb.delete(ids=ids)Search in your Knowledge Box‚Äãresults = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content) #!pip install langchain nuclia #!pip install langchain nuclia  from langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY) from langchain.vectorstores.nucliadb import NucliaDBAPI_KEY = "YOUR_API_KEY"ndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=False, api_key=API_KEY)  API Reference:NucliaDB from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server") from langchain.vectorstores.nucliadb import NucliaDBndb = NucliaDB(knowledge_box="YOUR_KB_ID", local=True, backend="http://my-local-server")  API Reference:NucliaDB ids = ndb.add_texts(["This is a new test", "This is a second test"]) ids = ndb.add_texts(["This is a new test", "This is a second test"])  ndb.delete(ids=ids) ndb.delete(ids=ids)  results = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content) results = ndb.similarity_search("Who was inspired by Ada Lovelace?")print(res.page_content)  Previous Neo4j Vector Index Next OpenSearch Usage with nuclia.cloudUsage with a local instanceAdd and delete texts to your Knowledge BoxSearch in your Knowledge Box Usage with nuclia.cloudUsage with a local instanceAdd and delete texts to your Knowledge BoxSearch in your Knowledge Box CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) Nuclia Cloud (https://nuclia.cloud) https://nuclia.cloud (https://nuclia.cloud) create a NUA key (https://docs.nuclia.dev/docs/docs/using/understanding/intro) ‚Äã (#usage-with-nucliacloud) NucliaDB (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.nucliadb.NucliaDB.html) ‚Äã (#usage-with-a-local-instance) NucliaDB (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.nucliadb.NucliaDB.html) ‚Äã (#add-and-delete-texts-to-your-knowledge-box) ‚Äã (#search-in-your-knowledge-box) PreviousNeo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NextOpenSearch (/docs/integrations/vectorstores/opensearch) Usage with nuclia.cloud (#usage-with-nucliacloud) Usage with a local instance (#usage-with-a-local-instance) Add and delete texts to your Knowledge Box (#add-and-delete-texts-to-your-knowledge-box) Search in your Knowledge Box (#search-in-your-knowledge-box) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)