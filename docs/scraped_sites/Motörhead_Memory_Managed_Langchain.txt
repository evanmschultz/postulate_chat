Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications. See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs MemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep Memory Cassandra Chat Message History Dynamodb Chat Message History Entity Memory with SQLite storage Momento Chat Message History Mongodb Chat Message History Motörhead Memory Motörhead Memory (Managed) Postgres Chat Message History Redis Chat Message History Rockset Chat Message History SQL Chat Message History Streamlit Chat Message History Xata chat memory Zep Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Memory Motörhead Memory (Managed) MotorheadMemory Setup Discord Twitter Python JS/TS Homepage Blog Skip to main content🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryMotörhead Memory (Managed)On this pageMotörhead Memory (Managed)Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.Setup​See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal.from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)API Reference:MotorheadMemoryllm_chain.run("hi im bob")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'llm_chain.run("whats my name?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'llm_chain.run("whats for dinner?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"PreviousMotörhead MemoryNextPostgres Chat Message HistorySetupCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. Skip to main content 🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK 🦜️🔗 LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryMotörhead Memory (Managed)On this pageMotörhead Memory (Managed)Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.Setup​See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal.from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)API Reference:MotorheadMemoryllm_chain.run("hi im bob")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'llm_chain.run("whats my name?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'llm_chain.run("whats for dinner?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"PreviousMotörhead MemoryNextPostgres Chat Message HistorySetup IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryMotörhead Memory (Managed)On this pageMotörhead Memory (Managed)Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.Setup​See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal.from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)API Reference:MotorheadMemoryllm_chain.run("hi im bob")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'llm_chain.run("whats my name?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'llm_chain.run("whats for dinner?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"PreviousMotörhead MemoryNextPostgres Chat Message HistorySetup IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsMemoryMotörhead Memory (Managed)On this pageMotörhead Memory (Managed)Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.Setup​See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal.from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)API Reference:MotorheadMemoryllm_chain.run("hi im bob")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'llm_chain.run("whats my name?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'llm_chain.run("whats for dinner?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"PreviousMotörhead MemoryNextPostgres Chat Message HistorySetup IntegrationsMemoryMotörhead Memory (Managed)On this pageMotörhead Memory (Managed)Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.Setup​See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal.from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)API Reference:MotorheadMemoryllm_chain.run("hi im bob")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'llm_chain.run("whats my name?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'llm_chain.run("whats for dinner?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"PreviousMotörhead MemoryNextPostgres Chat Message HistorySetup IntegrationsMemoryMotörhead Memory (Managed)On this pageMotörhead Memory (Managed)Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.Setup​See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal.from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)API Reference:MotorheadMemoryllm_chain.run("hi im bob")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'llm_chain.run("whats my name?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'llm_chain.run("whats for dinner?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"PreviousMotörhead MemoryNextPostgres Chat Message History IntegrationsMemoryMotörhead Memory (Managed)On this pageMotörhead Memory (Managed)Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.Setup​See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal.from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)API Reference:MotorheadMemoryllm_chain.run("hi im bob")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'llm_chain.run("whats my name?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'llm_chain.run("whats for dinner?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"PreviousMotörhead MemoryNextPostgres Chat Message History On this page Motörhead Memory (Managed)Motörhead is a memory server implemented in Rust. It automatically handles incremental summarization in the background and allows for stateless applications.Setup​See instructions at Motörhead for running the managed version of Motorhead. You can retrieve your api_key and client_id by creating an account on Metal.from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)API Reference:MotorheadMemoryllm_chain.run("hi im bob")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'llm_chain.run("whats my name?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'llm_chain.run("whats for dinner?")            > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?" from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,) from langchain.memory.motorhead_memory import MotorheadMemoryfrom langchain import OpenAI, LLMChain, PromptTemplatetemplate = """You are a chatbot having a conversation with a human.{chat_history}Human: {human_input}AI:"""prompt = PromptTemplate(    input_variables=["chat_history", "human_input"],     template=template)memory = MotorheadMemory(    api_key="YOUR_API_KEY",    client_id="YOUR_CLIENT_ID"    session_id="testing-1",    memory_key="chat_history")await memory.init();  # loads previous state from Motörhead 🤘llm_chain = LLMChain(    llm=OpenAI(),     prompt=prompt,     verbose=True,     memory=memory,)  API Reference:MotorheadMemory llm_chain.run("hi im bob") llm_chain.run("hi im bob")              > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'             > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'             > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.            Human: hi im bob    AI:        > Finished chain.    ' Hi Bob, nice to meet you! How are you doing today?'  llm_chain.run("whats my name?") llm_chain.run("whats my name?")              > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'             > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'             > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:        > Finished chain.    ' You said your name is Bob. Is that correct?'  llm_chain.run("whats for dinner?") llm_chain.run("whats for dinner?")              > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"             > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"             > Entering new LLMChain chain...    Prompt after formatting:    You are a chatbot having a conversation with a human.        Human: hi im bob    AI:  Hi Bob, nice to meet you! How are you doing today?    Human: whats my name?    AI:  You said your name is Bob. Is that correct?    Human: whats for dinner?    AI:        > Finished chain.    "  I'm sorry, I'm not sure what you're asking. Could you please rephrase your question?"  Previous Motörhead Memory Next Postgres Chat Message History Setup Setup CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright © 2023 LangChain, Inc. Copyright © 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) 🦜️🔗 LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Cassandra Chat Message History (/docs/integrations/memory/cassandra_chat_message_history) Dynamodb Chat Message History (/docs/integrations/memory/dynamodb_chat_message_history) Entity Memory with SQLite storage (/docs/integrations/memory/entity_memory_with_sqlite) Momento Chat Message History (/docs/integrations/memory/momento_chat_message_history) Mongodb Chat Message History (/docs/integrations/memory/mongodb_chat_message_history) Motörhead Memory (/docs/integrations/memory/motorhead_memory) Motörhead Memory (Managed) (/docs/integrations/memory/motorhead_memory_managed) Postgres Chat Message History (/docs/integrations/memory/postgres_chat_message_history) Redis Chat Message History (/docs/integrations/memory/redis_chat_message_history) Rockset Chat Message History (/docs/integrations/memory/rockset_chat_message_history) SQL Chat Message History (/docs/integrations/memory/sql_chat_message_history) Streamlit Chat Message History (/docs/integrations/memory/streamlit_chat_message_history) Xata chat memory (/docs/integrations/memory/xata_chat_message_history) Zep Memory (/docs/integrations/memory/zep_memory) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Memory (/docs/integrations/memory/) Motörhead (https://github.com/getmetal/motorhead) ​ (#setup) Motörhead (https://docs.getmetal.io/motorhead/introduction) Metal (https://getmetal.io) MotorheadMemory (https://api.python.langchain.com/en/latest/memory/langchain.memory.motorhead_memory.MotorheadMemory.html) PreviousMotörhead Memory (/docs/integrations/memory/motorhead_memory) NextPostgres Chat Message History (/docs/integrations/memory/postgres_chat_message_history) Setup (#setup) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)