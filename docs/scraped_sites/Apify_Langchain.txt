This notebook shows how to use the Apify integration for LangChain. Apify is a cloud platform for web scraping and data extraction, which provides an ecosystem of more than a thousand ready-made apps called Actors for various web scraping, crawling, and data extraction use cases. For example, you can use it to extract Google Search results, Instagram and Facebook profiles, products from Amazon or Shopify, Google Maps reviews, etc. etc. In this example, we'll use the Website Content Crawler Actor, which can deeply crawl websites such as documentation, knowledge bases, help centers, or blogs, and extract text content from the web pages. Then we feed the documents into a vector index and answer questions from it. First, import ApifyWrapper into your source code: Initialize it using your Apify API token and for the purpose of this example, also with your OpenAI API key: Then run the Actor, wait for it to finish, and fetch its results from the Apify dataset into a LangChain document loader. Note that if you already have some results in an Apify dataset, you can load them directly using ApifyDatasetLoader, as shown in this notebook. In that notebook, you'll also find the explanation of the dataset_mapping_function, which is used to map fields from the Apify dataset records to LangChain Document fields. Initialize the vector index from the crawled documents: And finally, query the vector index: IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits ToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language Actions Alpha Vantage Apify ArXiv AWS Lambda Shell (bash) Bing Search Brave Search ChatGPT Plugins Dall-E Image Generator DataForSeo DuckDuckGo Search Eden AI File System Golden Query Google Drive Google Places Google Search Google Serper Gradio GraphQL HuggingFace Hub Tools Human as a tool IFTTT WebHooks Lemon Agent Metaphor Search Nuclia Understanding OpenWeatherMap PubMed Requests SceneXplain Search Tools SearxNG Search SerpAPI Twilio Wikipedia Wolfram Alpha Yahoo Finance News YouTube Zapier Natural Language Actions Vector stores Grouped by provider  Integrations Tools Apify Document VectorstoreIndexCreator ApifyWrapper Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsApifyApifyThis notebook shows how to use the Apify integration for LangChain.Apify is a cloud platform for web scraping and data extraction, For example, you can use it to extract Google Search results, Instagram and Facebook profiles, products from Amazon or Shopify, Google Maps reviews, etc. etc.In this example, we'll use the Website Content Crawler Actor, and extract text content from the web pages. Then we feed the documents into a vector index and answer questions from it.#!pip install apify-client openai langchain chromadb tiktokenFirst, import ApifyWrapper into your source code:from langchain.document_loaders.base import Documentfrom langchain.indexes import VectorstoreIndexCreatorfrom langchain.utilities import ApifyWrapperAPI Reference:DocumentVectorstoreIndexCreatorApifyWrapperInitialize it using your Apify API token and for the purpose of this example, also with your OpenAI API key:import osos.environ["OPENAI_API_KEY"] = "Your OpenAI API key"os.environ["APIFY_API_TOKEN"] = "Your Apify API token"apify = ApifyWrapper()Then run the Actor, wait for it to finish, and fetch its results from the Apify dataset into a LangChain document loader.Note that if you already have some results in an Apify dataset, you can load them directly using ApifyDatasetLoader, as shown in this notebook. In that notebook, you'll also find the explanation of the dataset_mapping_function, which is used to map fields from the Apify dataset records to LangChain Document fields.loader = apify.call_actor(    actor_id="apify/website-content-crawler",    run_input={"startUrls": [{"url": "https://python.langchain.com/en/latest/"}]},    dataset_mapping_function=lambda item: Document(        page_content=item["text"] or "", metadata={"source": item["url"]}    ),)Initialize the vector index from the crawled documents:index = VectorstoreIndexCreator().from_loaders([loader])And finally, query the vector index:query = "What is LangChain?"result = index.query_with_sources(query)print(result["answer"])print(result["sources"])     LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.htmlPreviousAlpha VantageNextArXivCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsApifyApifyThis notebook shows how to use the Apify integration for LangChain.Apify is a cloud platform for web scraping and data extraction, and extract text content from the web pages. Then we feed the documents into a vector index and answer questions from it.#!pip install apify-client openai langchain chromadb tiktokenFirst, import ApifyWrapper into your source code:from langchain.document_loaders.base import Documentfrom langchain.indexes import VectorstoreIndexCreatorfrom langchain.utilities import ApifyWrapperAPI Reference:DocumentVectorstoreIndexCreatorApifyWrapperInitialize it using your Apify API token and for the purpose of this example, also with your OpenAI API key:import osos.environ["OPENAI_API_KEY"] = "Your OpenAI API key"os.environ["APIFY_API_TOKEN"] = "Your Apify API token"apify = ApifyWrapper()Then run the Actor, wait for it to finish, and fetch its results from the Apify dataset into a LangChain document loader.Note that if you already have some results in an Apify dataset, you can load them directly using ApifyDatasetLoader, as shown in this notebook. In that notebook, you'll also find the explanation of the dataset_mapping_function, which is used to map fields from the Apify dataset records to LangChain Document fields.loader = apify.call_actor(    actor_id="apify/website-content-crawler",    run_input={"startUrls": [{"url": "https://python.langchain.com/en/latest/"}]},    dataset_mapping_function=lambda item: Document(        page_content=item["text"] or "", metadata={"source": item["url"]}    ),)Initialize the vector index from the crawled documents:index = VectorstoreIndexCreator().from_loaders([loader])And finally, query the vector index:query = "What is LangChain?"result = index.query_with_sources(query)print(result["answer"])print(result["sources"])     LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.htmlPreviousAlpha VantageNextArXiv IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsApifyApifyThis notebook shows how to use the Apify integration for LangChain.Apify is a cloud platform for web scraping and data extraction, and extract text content from the web pages. Then we feed the documents into a vector index and answer questions from it.#!pip install apify-client openai langchain chromadb tiktokenFirst, import ApifyWrapper into your source code:from langchain.document_loaders.base import Documentfrom langchain.indexes import VectorstoreIndexCreatorfrom langchain.utilities import ApifyWrapperAPI Reference:DocumentVectorstoreIndexCreatorApifyWrapperInitialize it using your Apify API token and for the purpose of this example, also with your OpenAI API key:import osos.environ["OPENAI_API_KEY"] = "Your OpenAI API key"os.environ["APIFY_API_TOKEN"] = "Your Apify API token"apify = ApifyWrapper()Then run the Actor, wait for it to finish, and fetch its results from the Apify dataset into a LangChain document loader.Note that if you already have some results in an Apify dataset, you can load them directly using ApifyDatasetLoader, as shown in this notebook. In that notebook, you'll also find the explanation of the dataset_mapping_function, which is used to map fields from the Apify dataset records to LangChain Document fields.loader = apify.call_actor(    actor_id="apify/website-content-crawler",    run_input={"startUrls": [{"url": "https://python.langchain.com/en/latest/"}]},    dataset_mapping_function=lambda item: Document(        page_content=item["text"] or "", metadata={"source": item["url"]}    ),)Initialize the vector index from the crawled documents:index = VectorstoreIndexCreator().from_loaders([loader])And finally, query the vector index:query = "What is LangChain?"result = index.query_with_sources(query)print(result["answer"])print(result["sources"])     LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.htmlPreviousAlpha VantageNextArXiv IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsToolsApifyApifyThis notebook shows how to use the Apify integration for LangChain.Apify is a cloud platform for web scraping and data extraction, and extract text content from the web pages. Then we feed the documents into a vector index and answer questions from it.#!pip install apify-client openai langchain chromadb tiktokenFirst, import ApifyWrapper into your source code:from langchain.document_loaders.base import Documentfrom langchain.indexes import VectorstoreIndexCreatorfrom langchain.utilities import ApifyWrapperAPI Reference:DocumentVectorstoreIndexCreatorApifyWrapperInitialize it using your Apify API token and for the purpose of this example, also with your OpenAI API key:import osos.environ["OPENAI_API_KEY"] = "Your OpenAI API key"os.environ["APIFY_API_TOKEN"] = "Your Apify API token"apify = ApifyWrapper()Then run the Actor, wait for it to finish, and fetch its results from the Apify dataset into a LangChain document loader.Note that if you already have some results in an Apify dataset, you can load them directly using ApifyDatasetLoader, as shown in this notebook. In that notebook, you'll also find the explanation of the dataset_mapping_function, which is used to map fields from the Apify dataset records to LangChain Document fields.loader = apify.call_actor(    actor_id="apify/website-content-crawler",    run_input={"startUrls": [{"url": "https://python.langchain.com/en/latest/"}]},    dataset_mapping_function=lambda item: Document(        page_content=item["text"] or "", metadata={"source": item["url"]}    ),)Initialize the vector index from the crawled documents:index = VectorstoreIndexCreator().from_loaders([loader])And finally, query the vector index:query = "What is LangChain?"result = index.query_with_sources(query)print(result["answer"])print(result["sources"])     LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.htmlPreviousAlpha VantageNextArXiv IntegrationsToolsApifyApifyThis notebook shows how to use the Apify integration for LangChain.Apify is a cloud platform for web scraping and data extraction, and extract text content from the web pages. Then we feed the documents into a vector index and answer questions from it.#!pip install apify-client openai langchain chromadb tiktokenFirst, import ApifyWrapper into your source code:from langchain.document_loaders.base import Documentfrom langchain.indexes import VectorstoreIndexCreatorfrom langchain.utilities import ApifyWrapperAPI Reference:DocumentVectorstoreIndexCreatorApifyWrapperInitialize it using your Apify API token and for the purpose of this example, also with your OpenAI API key:import osos.environ["OPENAI_API_KEY"] = "Your OpenAI API key"os.environ["APIFY_API_TOKEN"] = "Your Apify API token"apify = ApifyWrapper()Then run the Actor, wait for it to finish, and fetch its results from the Apify dataset into a LangChain document loader.Note that if you already have some results in an Apify dataset, you can load them directly using ApifyDatasetLoader, as shown in this notebook. In that notebook, you'll also find the explanation of the dataset_mapping_function, which is used to map fields from the Apify dataset records to LangChain Document fields.loader = apify.call_actor(    actor_id="apify/website-content-crawler",    run_input={"startUrls": [{"url": "https://python.langchain.com/en/latest/"}]},    dataset_mapping_function=lambda item: Document(        page_content=item["text"] or "", metadata={"source": item["url"]}    ),)Initialize the vector index from the crawled documents:index = VectorstoreIndexCreator().from_loaders([loader])And finally, query the vector index:query = "What is LangChain?"result = index.query_with_sources(query)print(result["answer"])print(result["sources"])     LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.htmlPreviousAlpha VantageNextArXiv ApifyThis notebook shows how to use the Apify integration for LangChain.Apify is a cloud platform for web scraping and data extraction, and extract text content from the web pages. Then we feed the documents into a vector index and answer questions from it.#!pip install apify-client openai langchain chromadb tiktokenFirst, import ApifyWrapper into your source code:from langchain.document_loaders.base import Documentfrom langchain.indexes import VectorstoreIndexCreatorfrom langchain.utilities import ApifyWrapperAPI Reference:DocumentVectorstoreIndexCreatorApifyWrapperInitialize it using your Apify API token and for the purpose of this example, also with your OpenAI API key:import osos.environ["OPENAI_API_KEY"] = "Your OpenAI API key"os.environ["APIFY_API_TOKEN"] = "Your Apify API token"apify = ApifyWrapper()Then run the Actor, wait for it to finish, and fetch its results from the Apify dataset into a LangChain document loader.Note that if you already have some results in an Apify dataset, you can load them directly using ApifyDatasetLoader, as shown in this notebook. In that notebook, you'll also find the explanation of the dataset_mapping_function, which is used to map fields from the Apify dataset records to LangChain Document fields.loader = apify.call_actor(    actor_id="apify/website-content-crawler",    run_input={"startUrls": [{"url": "https://python.langchain.com/en/latest/"}]},    dataset_mapping_function=lambda item: Document(        page_content=item["text"] or "", metadata={"source": item["url"]}    ),)Initialize the vector index from the crawled documents:index = VectorstoreIndexCreator().from_loaders([loader])And finally, query the vector index:query = "What is LangChain?"result = index.query_with_sources(query)print(result["answer"])print(result["sources"])     LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.html #!pip install apify-client openai langchain chromadb tiktoken #!pip install apify-client openai langchain chromadb tiktoken  from langchain.document_loaders.base import Documentfrom langchain.indexes import VectorstoreIndexCreatorfrom langchain.utilities import ApifyWrapper from langchain.document_loaders.base import Documentfrom langchain.indexes import VectorstoreIndexCreatorfrom langchain.utilities import ApifyWrapper  API Reference:DocumentVectorstoreIndexCreatorApifyWrapper import osos.environ["OPENAI_API_KEY"] = "Your OpenAI API key"os.environ["APIFY_API_TOKEN"] = "Your Apify API token"apify = ApifyWrapper() import osos.environ["OPENAI_API_KEY"] = "Your OpenAI API key"os.environ["APIFY_API_TOKEN"] = "Your Apify API token"apify = ApifyWrapper()  loader = apify.call_actor(    actor_id="apify/website-content-crawler",    run_input={"startUrls": [{"url": "https://python.langchain.com/en/latest/"}]},    dataset_mapping_function=lambda item: Document(        page_content=item["text"] or "", metadata={"source": item["url"]}    ),) loader = apify.call_actor(    actor_id="apify/website-content-crawler",    run_input={"startUrls": [{"url": "https://python.langchain.com/en/latest/"}]},    dataset_mapping_function=lambda item: Document(        page_content=item["text"] or "", metadata={"source": item["url"]}    ),)  index = VectorstoreIndexCreator().from_loaders([loader]) index = VectorstoreIndexCreator().from_loaders([loader])  query = "What is LangChain?"result = index.query_with_sources(query) query = "What is LangChain?"result = index.query_with_sources(query)  print(result["answer"])print(result["sources"]) print(result["answer"])print(result["sources"])       LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.html      LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.html      LangChain is a standard interface through which you can interact with a variety of large language models (LLMs). It provides modules that can be used to build language model applications, and it also provides chains and agents with memory capabilities.        https://python.langchain.com/en/latest/modules/models/llms.html, https://python.langchain.com/en/latest/getting_started/getting_started.html  Previous Alpha Vantage Next ArXiv CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Alpha Vantage (/docs/integrations/tools/alpha_vantage) Apify (/docs/integrations/tools/apify) ArXiv (/docs/integrations/tools/arxiv) AWS Lambda (/docs/integrations/tools/awslambda) Shell (bash) (/docs/integrations/tools/bash) Bing Search (/docs/integrations/tools/bing_search) Brave Search (/docs/integrations/tools/brave_search) ChatGPT Plugins (/docs/integrations/tools/chatgpt_plugins) Dall-E Image Generator (/docs/integrations/tools/dalle_image_generator) DataForSeo (/docs/integrations/tools/dataforseo) DuckDuckGo Search (/docs/integrations/tools/ddg) Eden AI (/docs/integrations/tools/edenai_tools) File System (/docs/integrations/tools/filesystem) Golden Query (/docs/integrations/tools/golden_query) Google Drive (/docs/integrations/tools/google_drive) Google Places (/docs/integrations/tools/google_places) Google Search (/docs/integrations/tools/google_search) Google Serper (/docs/integrations/tools/google_serper) Gradio (/docs/integrations/tools/gradio_tools) GraphQL (/docs/integrations/tools/graphql) HuggingFace Hub Tools (/docs/integrations/tools/huggingface_tools) Human as a tool (/docs/integrations/tools/human_tools) IFTTT WebHooks (/docs/integrations/tools/ifttt) Lemon Agent (/docs/integrations/tools/lemonai) Metaphor Search (/docs/integrations/tools/metaphor_search) Nuclia Understanding (/docs/integrations/tools/nuclia) OpenWeatherMap (/docs/integrations/tools/openweathermap) PubMed (/docs/integrations/tools/pubmed) Requests (/docs/integrations/tools/requests) SceneXplain (/docs/integrations/tools/sceneXplain) Search Tools (/docs/integrations/tools/search_tools) SearxNG Search (/docs/integrations/tools/searx_search) SerpAPI (/docs/integrations/tools/serpapi) Twilio (/docs/integrations/tools/twilio) Wikipedia (/docs/integrations/tools/wikipedia) Wolfram Alpha (/docs/integrations/tools/wolfram_alpha) Yahoo Finance News (/docs/integrations/tools/yahoo_finance_news) YouTube (/docs/integrations/tools/youtube) Zapier Natural Language Actions (/docs/integrations/tools/zapier) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Tools (/docs/integrations/tools/) Apify integration (/docs/ecosystem/integrations/apify.html) Apify (https://apify.com) ecosystem (https://apify.com/store) Website Content Crawler (https://apify.com/apify/website-content-crawler) Document (https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html) VectorstoreIndexCreator (https://api.python.langchain.com/en/latest/indexes/langchain.indexes.vectorstore.VectorstoreIndexCreator.html) ApifyWrapper (https://api.python.langchain.com/en/latest/utilities/langchain.utilities.apify.ApifyWrapper.html) Apify API token (https://console.apify.com/account/integrations) this notebook (/docs/integrations/document_loaders/apify_dataset.html) PreviousAlpha Vantage (/docs/integrations/tools/alpha_vantage) NextArXiv (/docs/integrations/tools/arxiv) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)