Giving agents access to the shell is powerful (though risky outside a sandboxed environment). The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system. Note: Shell tool does not work with Windows OS. As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits ToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language Actions Alpha Vantage Apify ArXiv AWS Lambda Shell (bash) Bing Search Brave Search ChatGPT Plugins Dall-E Image Generator DataForSeo DuckDuckGo Search Eden AI File System Golden Query Google Drive Google Places Google Search Google Serper Gradio GraphQL HuggingFace Hub Tools Human as a tool IFTTT WebHooks Lemon Agent Metaphor Search Nuclia Understanding OpenWeatherMap PubMed Requests SceneXplain Search Tools SearxNG Search SerpAPI Twilio Wikipedia Wolfram Alpha Yahoo Finance News YouTube Zapier Natural Language Actions Vector stores Grouped by provider  Integrations Tools Shell (bash) ShellTool ChatOpenAI initialize_agent AgentType Use with Agents Discord Twitter Python JS/TS Homepage Blog Skip to main content🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsShell (bash)On this pageShell (bash)Giving agents access to the shell is powerful (though risky outside a sandboxed environment).The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.Note: Shell tool does not work with Windows OS.from langchain.tools import ShellToolshell_tool = ShellTool()API Reference:ShellToolprint(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))    Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(Use with Agents​As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page.from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")API Reference:ChatOpenAIinitialize_agentAgentType            > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'PreviousAWS LambdaNextBing SearchUse with AgentsCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. Skip to main content 🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK 🦜️🔗 LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsShell (bash)On this pageShell (bash)Giving agents access to the shell is powerful (though risky outside a sandboxed environment).The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.Note: Shell tool does not work with Windows OS.from langchain.tools import ShellToolshell_tool = ShellTool()API Reference:ShellToolprint(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))    Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(Use with Agents​As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page.from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")API Reference:ChatOpenAIinitialize_agentAgentType            > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'PreviousAWS LambdaNextBing SearchUse with Agents IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsShell (bash)On this pageShell (bash)Giving agents access to the shell is powerful (though risky outside a sandboxed environment).The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.Note: Shell tool does not work with Windows OS.from langchain.tools import ShellToolshell_tool = ShellTool()API Reference:ShellToolprint(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))    Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(Use with Agents​As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page.from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")API Reference:ChatOpenAIinitialize_agentAgentType            > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'PreviousAWS LambdaNextBing SearchUse with Agents IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsToolsShell (bash)On this pageShell (bash)Giving agents access to the shell is powerful (though risky outside a sandboxed environment).The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.Note: Shell tool does not work with Windows OS.from langchain.tools import ShellToolshell_tool = ShellTool()API Reference:ShellToolprint(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))    Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(Use with Agents​As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page.from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")API Reference:ChatOpenAIinitialize_agentAgentType            > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'PreviousAWS LambdaNextBing SearchUse with Agents IntegrationsToolsShell (bash)On this pageShell (bash)Giving agents access to the shell is powerful (though risky outside a sandboxed environment).The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.Note: Shell tool does not work with Windows OS.from langchain.tools import ShellToolshell_tool = ShellTool()API Reference:ShellToolprint(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))    Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(Use with Agents​As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page.from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")API Reference:ChatOpenAIinitialize_agentAgentType            > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'PreviousAWS LambdaNextBing SearchUse with Agents IntegrationsToolsShell (bash)On this pageShell (bash)Giving agents access to the shell is powerful (though risky outside a sandboxed environment).The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.Note: Shell tool does not work with Windows OS.from langchain.tools import ShellToolshell_tool = ShellTool()API Reference:ShellToolprint(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))    Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(Use with Agents​As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page.from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")API Reference:ChatOpenAIinitialize_agentAgentType            > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'PreviousAWS LambdaNextBing Search IntegrationsToolsShell (bash)On this pageShell (bash)Giving agents access to the shell is powerful (though risky outside a sandboxed environment).The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.Note: Shell tool does not work with Windows OS.from langchain.tools import ShellToolshell_tool = ShellTool()API Reference:ShellToolprint(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))    Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(Use with Agents​As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page.from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")API Reference:ChatOpenAIinitialize_agentAgentType            > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'PreviousAWS LambdaNextBing Search On this page Shell (bash)Giving agents access to the shell is powerful (though risky outside a sandboxed environment).The LLM can use it to execute any shell commands. A common use case for this is letting the LLM interact with your local file system.Note: Shell tool does not work with Windows OS.from langchain.tools import ShellToolshell_tool = ShellTool()API Reference:ShellToolprint(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))    Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(Use with Agents​As with all tools, these can be given to an agent to accomplish more complex tasks. Let's have the agent fetch some links from a web page.from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")API Reference:ChatOpenAIinitialize_agentAgentType            > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]' from langchain.tools import ShellToolshell_tool = ShellTool() from langchain.tools import ShellToolshell_tool = ShellTool()  API Reference:ShellTool print(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]})) print(shell_tool.run({"commands": ["echo 'Hello World!'", "time"]}))      Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(     Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(     Hello World!        real    0m0.000s    user    0m0.000s    sys 0m0.000s        /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(  from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.") from langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypellm = ChatOpenAI(temperature=0)shell_tool.description = shell_tool.description + f"args {shell_tool.args}".replace(    "{", "{{").replace("}", "}}")self_ask_with_search = initialize_agent(    [shell_tool], llm, agent=AgentType.CHAT_ZERO_SHOT_REACT_DESCRIPTION, verbose=True)self_ask_with_search.run(    "Download the langchain.com webpage and grep for all urls. Return only a sorted list of them. Be sure to use double quotes.")  API Reference:ChatOpenAIinitialize_agentAgentType             > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'             > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'             > Entering new AgentExecutor chain...    Question: What is the task?    Thought: We need to download the langchain.com webpage and extract all the URLs from it. Then we need to sort the URLs and return them.    Action:    ```    {      "action": "shell",      "action_input": {        "commands": [          "curl -s https://langchain.com | grep -o 'http[s]*://[^\" ]*' | sort"        ]      }    }    ```    /Users/wfh/code/lc/lckg/langchain/tools/shell/tool.py:34: UserWarning: The shell tool has no safeguards by default. Use at your own risk.      warnings.warn(        Observation: https://blog.langchain.dev/    https://discord.gg/6adMQxSpJS    https://docs.langchain.com/docs/    https://github.com/hwchase17/chat-langchain    https://github.com/hwchase17/langchain    https://github.com/hwchase17/langchainjs    https://github.com/sullivan-sean/chat-langchainjs    https://js.langchain.com/docs/    https://python.langchain.com/en/latest/    https://twitter.com/langchainai        Thought:The URLs have been successfully extracted and sorted. We can return the list of URLs as the final answer.    Final Answer: ["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]        > Finished chain.    '["https://blog.langchain.dev/", "https://discord.gg/6adMQxSpJS", "https://docs.langchain.com/docs/", "https://github.com/hwchase17/chat-langchain", "https://github.com/hwchase17/langchain", "https://github.com/hwchase17/langchainjs", "https://github.com/sullivan-sean/chat-langchainjs", "https://js.langchain.com/docs/", "https://python.langchain.com/en/latest/", "https://twitter.com/langchainai"]'  Previous AWS Lambda Next Bing Search Use with Agents Use with Agents CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright © 2023 LangChain, Inc. Copyright © 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) 🦜️🔗 LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Alpha Vantage (/docs/integrations/tools/alpha_vantage) Apify (/docs/integrations/tools/apify) ArXiv (/docs/integrations/tools/arxiv) AWS Lambda (/docs/integrations/tools/awslambda) Shell (bash) (/docs/integrations/tools/bash) Bing Search (/docs/integrations/tools/bing_search) Brave Search (/docs/integrations/tools/brave_search) ChatGPT Plugins (/docs/integrations/tools/chatgpt_plugins) Dall-E Image Generator (/docs/integrations/tools/dalle_image_generator) DataForSeo (/docs/integrations/tools/dataforseo) DuckDuckGo Search (/docs/integrations/tools/ddg) Eden AI (/docs/integrations/tools/edenai_tools) File System (/docs/integrations/tools/filesystem) Golden Query (/docs/integrations/tools/golden_query) Google Drive (/docs/integrations/tools/google_drive) Google Places (/docs/integrations/tools/google_places) Google Search (/docs/integrations/tools/google_search) Google Serper (/docs/integrations/tools/google_serper) Gradio (/docs/integrations/tools/gradio_tools) GraphQL (/docs/integrations/tools/graphql) HuggingFace Hub Tools (/docs/integrations/tools/huggingface_tools) Human as a tool (/docs/integrations/tools/human_tools) IFTTT WebHooks (/docs/integrations/tools/ifttt) Lemon Agent (/docs/integrations/tools/lemonai) Metaphor Search (/docs/integrations/tools/metaphor_search) Nuclia Understanding (/docs/integrations/tools/nuclia) OpenWeatherMap (/docs/integrations/tools/openweathermap) PubMed (/docs/integrations/tools/pubmed) Requests (/docs/integrations/tools/requests) SceneXplain (/docs/integrations/tools/sceneXplain) Search Tools (/docs/integrations/tools/search_tools) SearxNG Search (/docs/integrations/tools/searx_search) SerpAPI (/docs/integrations/tools/serpapi) Twilio (/docs/integrations/tools/twilio) Wikipedia (/docs/integrations/tools/wikipedia) Wolfram Alpha (/docs/integrations/tools/wolfram_alpha) Yahoo Finance News (/docs/integrations/tools/yahoo_finance_news) YouTube (/docs/integrations/tools/youtube) Zapier Natural Language Actions (/docs/integrations/tools/zapier) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Tools (/docs/integrations/tools/) ShellTool (https://api.python.langchain.com/en/latest/tools/langchain.tools.shell.tool.ShellTool.html) ​ (#use-with-agents) ChatOpenAI (https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html) initialize_agent (https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html) AgentType (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html) PreviousAWS Lambda (/docs/integrations/tools/awslambda) NextBing Search (/docs/integrations/tools/bing_search) Use with Agents (#use-with-agents) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)