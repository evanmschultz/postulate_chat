This notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy. Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver. To use the storage you need to provide only 2 things: By default, only the session id and message dictionary are stored in the table. However, sometimes you might want to store some additional information, like message date, author, language etc. To do that, you can create a custom message converter, by implementing BaseMessageConverter interface. You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs MemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep Memory Cassandra Chat Message History Dynamodb Chat Message History Entity Memory with SQLite storage Momento Chat Message History Mongodb Chat Message History Mot√∂rhead Memory Mot√∂rhead Memory (Managed) Postgres Chat Message History Redis Chat Message History Rockset Chat Message History SQL Chat Message History Streamlit Chat Message History Xata chat memory Zep Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Memory SQL Chat Message History Session Id - a unique identifier of the session, like user name, email, chat id etc. Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function. SQLChatMessageHistory BaseMessage HumanMessage AIMessage SystemMessage BaseMessageConverter Basic Usage Custom Storage Format Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemorySQL Chat Message HistoryOn this pageSQL Chat Message HistoryThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver.Basic Usage‚ÄãTo use the storage you need to provide only 2 things:Session Id - a unique identifier of the session, like user name, email, chat id etc.Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:SQLChatMessageHistorychat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]Custom Storage Format‚ÄãBy default, only the session id and message dictionary are stored in the table.However, sometimes you might want to store some additional information, like message date, author, language etc.To do that, you can create a custom message converter, by implementing BaseMessageConverter interface.from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverterchat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter.PreviousRockset Chat Message HistoryNextStreamlit Chat Message HistoryBasic UsageCustom Storage FormatCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemorySQL Chat Message HistoryOn this pageSQL Chat Message HistoryThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver.Basic Usage‚ÄãTo use the storage you need to provide only 2 things:Session Id - a unique identifier of the session, like user name, email, chat id etc.Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:SQLChatMessageHistorychat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]Custom Storage Format‚ÄãBy default, only the session id and message dictionary are stored in the table.However, sometimes you might want to store some additional information, like message date, author, language etc.To do that, you can create a custom message converter, by implementing BaseMessageConverter interface.from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverterchat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter.PreviousRockset Chat Message HistoryNextStreamlit Chat Message HistoryBasic UsageCustom Storage Format IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemorySQL Chat Message HistoryOn this pageSQL Chat Message HistoryThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver.Basic Usage‚ÄãTo use the storage you need to provide only 2 things:Session Id - a unique identifier of the session, like user name, email, chat id etc.Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:SQLChatMessageHistorychat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]Custom Storage Format‚ÄãBy default, only the session id and message dictionary are stored in the table.However, sometimes you might want to store some additional information, like message date, author, language etc.To do that, you can create a custom message converter, by implementing BaseMessageConverter interface.from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverterchat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter.PreviousRockset Chat Message HistoryNextStreamlit Chat Message HistoryBasic UsageCustom Storage Format IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsMemorySQL Chat Message HistoryOn this pageSQL Chat Message HistoryThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver.Basic Usage‚ÄãTo use the storage you need to provide only 2 things:Session Id - a unique identifier of the session, like user name, email, chat id etc.Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:SQLChatMessageHistorychat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]Custom Storage Format‚ÄãBy default, only the session id and message dictionary are stored in the table.However, sometimes you might want to store some additional information, like message date, author, language etc.To do that, you can create a custom message converter, by implementing BaseMessageConverter interface.from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverterchat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter.PreviousRockset Chat Message HistoryNextStreamlit Chat Message HistoryBasic UsageCustom Storage Format IntegrationsMemorySQL Chat Message HistoryOn this pageSQL Chat Message HistoryThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver.Basic Usage‚ÄãTo use the storage you need to provide only 2 things:Session Id - a unique identifier of the session, like user name, email, chat id etc.Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:SQLChatMessageHistorychat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]Custom Storage Format‚ÄãBy default, only the session id and message dictionary are stored in the table.However, sometimes you might want to store some additional information, like message date, author, language etc.To do that, you can create a custom message converter, by implementing BaseMessageConverter interface.from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverterchat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter.PreviousRockset Chat Message HistoryNextStreamlit Chat Message HistoryBasic UsageCustom Storage Format IntegrationsMemorySQL Chat Message HistoryOn this pageSQL Chat Message HistoryThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver.Basic Usage‚ÄãTo use the storage you need to provide only 2 things:Session Id - a unique identifier of the session, like user name, email, chat id etc.Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:SQLChatMessageHistorychat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]Custom Storage Format‚ÄãBy default, only the session id and message dictionary are stored in the table.However, sometimes you might want to store some additional information, like message date, author, language etc.To do that, you can create a custom message converter, by implementing BaseMessageConverter interface.from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverterchat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter.PreviousRockset Chat Message HistoryNextStreamlit Chat Message History IntegrationsMemorySQL Chat Message HistoryOn this pageSQL Chat Message HistoryThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver.Basic Usage‚ÄãTo use the storage you need to provide only 2 things:Session Id - a unique identifier of the session, like user name, email, chat id etc.Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:SQLChatMessageHistorychat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]Custom Storage Format‚ÄãBy default, only the session id and message dictionary are stored in the table.However, sometimes you might want to store some additional information, like message date, author, language etc.To do that, you can create a custom message converter, by implementing BaseMessageConverter interface.from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverterchat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter.PreviousRockset Chat Message HistoryNextStreamlit Chat Message History On this page SQL Chat Message HistoryThis notebook goes over a SQLChatMessageHistory class that allows to store chat history in any database supported by SQLAlchemy.Please note that to use it with databases other than SQLite, you will need to install the corresponding database driver.Basic Usage‚ÄãTo use the storage you need to provide only 2 things:Session Id - a unique identifier of the session, like user name, email, chat id etc.Connection string - a string that specifies the database connection. It will be passed to SQLAlchemy create_engine function.from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:SQLChatMessageHistorychat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]Custom Storage Format‚ÄãBy default, only the session id and message dictionary are stored in the table.However, sometimes you might want to store some additional information, like message date, author, language etc.To do that, you can create a custom message converter, by implementing BaseMessageConverter interface.from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverterchat_message_history.messages    [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]You also might want to change the name of session_id column. In this case you'll need to specify session_id_field_name parameter. from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi') from langchain.memory.chat_message_histories import SQLChatMessageHistorychat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db')chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')  API Reference:SQLChatMessageHistory chat_message_history.messages chat_message_history.messages      [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]     [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]     [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]  from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi') from datetime import datetimefrom langchain.schema import BaseMessage, HumanMessage, AIMessage, SystemMessagefrom typing import Anyfrom sqlalchemy import Column, Integer, Text, DateTimefrom sqlalchemy.orm import declarative_basefrom langchain.memory.chat_message_histories.sql import BaseMessageConverterBase = declarative_base()class CustomMessage(Base):    __tablename__ = 'custom_message_store'    id = Column(Integer, primary_key=True)    session_id = Column(Text)    type = Column(Text)    content = Column(Text)    created_at = Column(DateTime)    author_email = Column(Text)class CustomMessageConverter(BaseMessageConverter):    def __init__(self, author_email: str):        self.author_email = author_email        def from_sql_model(self, sql_message: Any) -> BaseMessage:        if sql_message.type == 'human':            return HumanMessage(                content=sql_message.content,            )        elif sql_message.type == 'ai':            return AIMessage(                content=sql_message.content,            )        elif sql_message.type == 'system':            return SystemMessage(                content=sql_message.content,            )        else:            raise ValueError(f'Unknown message type: {sql_message.type}')        def to_sql_model(self, message: BaseMessage, session_id: str) -> Any:        now = datetime.now()        return CustomMessage(            session_id=session_id,            type=message.type,            content=message.content,            created_at=now,            author_email=self.author_email        )        def get_sql_model_class(self) -> Any:        return CustomMessagechat_message_history = SQLChatMessageHistory(    session_id='test_session',    connection_string='sqlite:///sqlite.db',    custom_message_converter=CustomMessageConverter(        author_email='test@example.com'    ))chat_message_history.add_user_message('Hello')chat_message_history.add_ai_message('Hi')  API Reference:BaseMessageHumanMessageAIMessageSystemMessageBaseMessageConverter chat_message_history.messages chat_message_history.messages      [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]     [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]     [HumanMessage(content='Hello', additional_kwargs={}, example=False),     AIMessage(content='Hi', additional_kwargs={}, example=False)]  Previous Rockset Chat Message History Next Streamlit Chat Message History Basic UsageCustom Storage Format Basic UsageCustom Storage Format CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Cassandra Chat Message History (/docs/integrations/memory/cassandra_chat_message_history) Dynamodb Chat Message History (/docs/integrations/memory/dynamodb_chat_message_history) Entity Memory with SQLite storage (/docs/integrations/memory/entity_memory_with_sqlite) Momento Chat Message History (/docs/integrations/memory/momento_chat_message_history) Mongodb Chat Message History (/docs/integrations/memory/mongodb_chat_message_history) Mot√∂rhead Memory (/docs/integrations/memory/motorhead_memory) Mot√∂rhead Memory (Managed) (/docs/integrations/memory/motorhead_memory_managed) Postgres Chat Message History (/docs/integrations/memory/postgres_chat_message_history) Redis Chat Message History (/docs/integrations/memory/redis_chat_message_history) Rockset Chat Message History (/docs/integrations/memory/rockset_chat_message_history) SQL Chat Message History (/docs/integrations/memory/sql_chat_message_history) Streamlit Chat Message History (/docs/integrations/memory/streamlit_chat_message_history) Xata chat memory (/docs/integrations/memory/xata_chat_message_history) Zep Memory (/docs/integrations/memory/zep_memory) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Memory (/docs/integrations/memory/) ‚Äã (#basic-usage) SQLChatMessageHistory (https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.sql.SQLChatMessageHistory.html) ‚Äã (#custom-storage-format) BaseMessage (https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.BaseMessage.html) HumanMessage (https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.HumanMessage.html) AIMessage (https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.AIMessage.html) SystemMessage (https://api.python.langchain.com/en/latest/schema/langchain.schema.messages.SystemMessage.html) BaseMessageConverter (https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.sql.BaseMessageConverter.html) PreviousRockset Chat Message History (/docs/integrations/memory/rockset_chat_message_history) NextStreamlit Chat Message History (/docs/integrations/memory/streamlit_chat_message_history) Basic Usage (#basic-usage) Custom Storage Format (#custom-storage-format) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)