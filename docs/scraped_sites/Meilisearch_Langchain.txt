Meilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences.  You can self-host Meilisearch or run on Meilisearch Cloud. Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search. You will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account. As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page. You should now have a running Meilisearch instance with vector storage enabled. üéâ To interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key. Host API keys Meilisearch instance provides you with three API keys out of the box:  You can create additional API keys as needed. This guide uses the Meilisearch Python SDK. You can install it by running: For more information, refer to the Meilisearch Python SDK documentation. There are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment. You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples. We want to use OpenAIEmbeddings so we have to get the OpenAI API Key. This example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store. Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example. In this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings. In this approach, we create a vector store object and add documents to it. This specific method allows you to return the documents and the distance score of the query to them. Documentation Open-source repositories IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores Meilisearch In local, the default host is localhost:7700 On Meilisearch Cloud, find the host in your project Settings page A MASTER KEY ‚Äî it should only be used to create your Meilisearch instance A ADMIN KEY ‚Äî use it only server-side to update your database and its settings A SEARCH KEY ‚Äî a key that you can safely share in front-end applications Meilisearch OpenAIEmbeddings CharacterTextSplitter TextLoader Meilisearch Meilisearch Meilisearch Python SDK Meilisearch repository Meilisearch Python SDK SetupLaunching a Meilisearch instanceCredentialsInstalling dependencies Launching a Meilisearch instance Credentials Installing dependencies ExamplesAdding text and embeddingsAdding documents and embeddings Adding text and embeddings Adding documents and embeddings Add documents by creating a Meilisearch Vectorstore Similarity Search with score Similarity Search by vector Additional resources Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesMeilisearchOn this pageMeilisearchMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences. You can self-host Meilisearch or run on Meilisearch Cloud.Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.Setup‚ÄãLaunching a Meilisearch instance‚ÄãYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.You should now have a running Meilisearch instance with vector storage enabled. üéâCredentials‚ÄãTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.HostIn local, the default host is localhost:7700On Meilisearch Cloud, find the host in your project Settings pageAPI keysMeilisearch instance provides you with three API keys out of the box: A MASTER KEY ‚Äî it should only be used to create your Meilisearch instanceA ADMIN KEY ‚Äî use it only server-side to update your database and its settingsA SEARCH KEY ‚Äî a key that you can safely share in front-end applicationsYou can create additional API keys as needed.Installing dependencies‚ÄãThis guide uses the Meilisearch Python SDK. You can install it by running:pip install meilisearchFor more information, refer to the Meilisearch Python SDK documentation.Examples‚ÄãThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Adding text and embeddings‚ÄãThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitterwith open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)# Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.Adding documents and embeddings‚ÄãIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)API Reference:TextLoaderAdd documents by creating a Meilisearch Vectorstore‚ÄãIn this approach, we create a vector store object and add documents to it.from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)API Reference:MeilisearchSimilarity Search with score‚ÄãThis specific method allows you to return the documents and the distance score of the query to them.docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]Similarity Search by vector‚Äãembedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]Additional resources‚ÄãDocumentationMeilisearchMeilisearch Python SDKOpen-source repositoriesMeilisearch repositoryMeilisearch Python SDKPreviousGoogle Vertex AI MatchingEngineNextMilvusSetupLaunching a Meilisearch instanceCredentialsInstalling dependenciesExamplesAdding text and embeddingsAdding documents and embeddingsAdd documents by creating a Meilisearch VectorstoreSimilarity Search with scoreSimilarity Search by vectorAdditional resourcesCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesMeilisearchOn this pageMeilisearchMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences. You can self-host Meilisearch or run on Meilisearch Cloud.Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.Setup‚ÄãLaunching a Meilisearch instance‚ÄãYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.You should now have a running Meilisearch instance with vector storage enabled. üéâCredentials‚ÄãTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.HostIn local, the default host is localhost:7700On Meilisearch Cloud, find the host in your project Settings pageAPI keysMeilisearch instance provides you with three API keys out of the box: A MASTER KEY ‚Äî it should only be used to create your Meilisearch instanceA ADMIN KEY ‚Äî use it only server-side to update your database and its settingsA SEARCH KEY ‚Äî a key that you can safely share in front-end applicationsYou can create additional API keys as needed.Installing dependencies‚ÄãThis guide uses the Meilisearch Python SDK. You can install it by running:pip install meilisearchFor more information, refer to the Meilisearch Python SDK documentation.Examples‚ÄãThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Adding text and embeddings‚ÄãThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitterwith open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)# Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.Adding documents and embeddings‚ÄãIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)API Reference:TextLoaderAdd documents by creating a Meilisearch Vectorstore‚ÄãIn this approach, we create a vector store object and add documents to it.from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)API Reference:MeilisearchSimilarity Search with score‚ÄãThis specific method allows you to return the documents and the distance score of the query to them.docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]Similarity Search by vector‚Äãembedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]Additional resources‚ÄãDocumentationMeilisearchMeilisearch Python SDKOpen-source repositoriesMeilisearch repositoryMeilisearch Python SDKPreviousGoogle Vertex AI MatchingEngineNextMilvusSetupLaunching a Meilisearch instanceCredentialsInstalling dependenciesExamplesAdding text and embeddingsAdding documents and embeddingsAdd documents by creating a Meilisearch VectorstoreSimilarity Search with scoreSimilarity Search by vectorAdditional resources IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesMeilisearchOn this pageMeilisearchMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences. You can self-host Meilisearch or run on Meilisearch Cloud.Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.Setup‚ÄãLaunching a Meilisearch instance‚ÄãYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.You should now have a running Meilisearch instance with vector storage enabled. üéâCredentials‚ÄãTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.HostIn local, the default host is localhost:7700On Meilisearch Cloud, find the host in your project Settings pageAPI keysMeilisearch instance provides you with three API keys out of the box: A MASTER KEY ‚Äî it should only be used to create your Meilisearch instanceA ADMIN KEY ‚Äî use it only server-side to update your database and its settingsA SEARCH KEY ‚Äî a key that you can safely share in front-end applicationsYou can create additional API keys as needed.Installing dependencies‚ÄãThis guide uses the Meilisearch Python SDK. You can install it by running:pip install meilisearchFor more information, refer to the Meilisearch Python SDK documentation.Examples‚ÄãThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Adding text and embeddings‚ÄãThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitterwith open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)# Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.Adding documents and embeddings‚ÄãIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)API Reference:TextLoaderAdd documents by creating a Meilisearch Vectorstore‚ÄãIn this approach, we create a vector store object and add documents to it.from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)API Reference:MeilisearchSimilarity Search with score‚ÄãThis specific method allows you to return the documents and the distance score of the query to them.docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]Similarity Search by vector‚Äãembedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]Additional resources‚ÄãDocumentationMeilisearchMeilisearch Python SDKOpen-source repositoriesMeilisearch repositoryMeilisearch Python SDKPreviousGoogle Vertex AI MatchingEngineNextMilvusSetupLaunching a Meilisearch instanceCredentialsInstalling dependenciesExamplesAdding text and embeddingsAdding documents and embeddingsAdd documents by creating a Meilisearch VectorstoreSimilarity Search with scoreSimilarity Search by vectorAdditional resources IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesMeilisearchOn this pageMeilisearchMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences. You can self-host Meilisearch or run on Meilisearch Cloud.Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.Setup‚ÄãLaunching a Meilisearch instance‚ÄãYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.You should now have a running Meilisearch instance with vector storage enabled. üéâCredentials‚ÄãTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.HostIn local, the default host is localhost:7700On Meilisearch Cloud, find the host in your project Settings pageAPI keysMeilisearch instance provides you with three API keys out of the box: A MASTER KEY ‚Äî it should only be used to create your Meilisearch instanceA ADMIN KEY ‚Äî use it only server-side to update your database and its settingsA SEARCH KEY ‚Äî a key that you can safely share in front-end applicationsYou can create additional API keys as needed.Installing dependencies‚ÄãThis guide uses the Meilisearch Python SDK. You can install it by running:pip install meilisearchFor more information, refer to the Meilisearch Python SDK documentation.Examples‚ÄãThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Adding text and embeddings‚ÄãThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitterwith open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)# Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.Adding documents and embeddings‚ÄãIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)API Reference:TextLoaderAdd documents by creating a Meilisearch Vectorstore‚ÄãIn this approach, we create a vector store object and add documents to it.from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)API Reference:MeilisearchSimilarity Search with score‚ÄãThis specific method allows you to return the documents and the distance score of the query to them.docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]Similarity Search by vector‚Äãembedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]Additional resources‚ÄãDocumentationMeilisearchMeilisearch Python SDKOpen-source repositoriesMeilisearch repositoryMeilisearch Python SDKPreviousGoogle Vertex AI MatchingEngineNextMilvusSetupLaunching a Meilisearch instanceCredentialsInstalling dependenciesExamplesAdding text and embeddingsAdding documents and embeddingsAdd documents by creating a Meilisearch VectorstoreSimilarity Search with scoreSimilarity Search by vectorAdditional resources IntegrationsVector storesMeilisearchOn this pageMeilisearchMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences. You can self-host Meilisearch or run on Meilisearch Cloud.Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.Setup‚ÄãLaunching a Meilisearch instance‚ÄãYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.You should now have a running Meilisearch instance with vector storage enabled. üéâCredentials‚ÄãTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.HostIn local, the default host is localhost:7700On Meilisearch Cloud, find the host in your project Settings pageAPI keysMeilisearch instance provides you with three API keys out of the box: A MASTER KEY ‚Äî it should only be used to create your Meilisearch instanceA ADMIN KEY ‚Äî use it only server-side to update your database and its settingsA SEARCH KEY ‚Äî a key that you can safely share in front-end applicationsYou can create additional API keys as needed.Installing dependencies‚ÄãThis guide uses the Meilisearch Python SDK. You can install it by running:pip install meilisearchFor more information, refer to the Meilisearch Python SDK documentation.Examples‚ÄãThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Adding text and embeddings‚ÄãThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitterwith open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)# Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.Adding documents and embeddings‚ÄãIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)API Reference:TextLoaderAdd documents by creating a Meilisearch Vectorstore‚ÄãIn this approach, we create a vector store object and add documents to it.from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)API Reference:MeilisearchSimilarity Search with score‚ÄãThis specific method allows you to return the documents and the distance score of the query to them.docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]Similarity Search by vector‚Äãembedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]Additional resources‚ÄãDocumentationMeilisearchMeilisearch Python SDKOpen-source repositoriesMeilisearch repositoryMeilisearch Python SDKPreviousGoogle Vertex AI MatchingEngineNextMilvusSetupLaunching a Meilisearch instanceCredentialsInstalling dependenciesExamplesAdding text and embeddingsAdding documents and embeddingsAdd documents by creating a Meilisearch VectorstoreSimilarity Search with scoreSimilarity Search by vectorAdditional resources IntegrationsVector storesMeilisearchOn this pageMeilisearchMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences. You can self-host Meilisearch or run on Meilisearch Cloud.Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.Setup‚ÄãLaunching a Meilisearch instance‚ÄãYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.You should now have a running Meilisearch instance with vector storage enabled. üéâCredentials‚ÄãTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.HostIn local, the default host is localhost:7700On Meilisearch Cloud, find the host in your project Settings pageAPI keysMeilisearch instance provides you with three API keys out of the box: A MASTER KEY ‚Äî it should only be used to create your Meilisearch instanceA ADMIN KEY ‚Äî use it only server-side to update your database and its settingsA SEARCH KEY ‚Äî a key that you can safely share in front-end applicationsYou can create additional API keys as needed.Installing dependencies‚ÄãThis guide uses the Meilisearch Python SDK. You can install it by running:pip install meilisearchFor more information, refer to the Meilisearch Python SDK documentation.Examples‚ÄãThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Adding text and embeddings‚ÄãThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitterwith open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)# Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.Adding documents and embeddings‚ÄãIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)API Reference:TextLoaderAdd documents by creating a Meilisearch Vectorstore‚ÄãIn this approach, we create a vector store object and add documents to it.from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)API Reference:MeilisearchSimilarity Search with score‚ÄãThis specific method allows you to return the documents and the distance score of the query to them.docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]Similarity Search by vector‚Äãembedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]Additional resources‚ÄãDocumentationMeilisearchMeilisearch Python SDKOpen-source repositoriesMeilisearch repositoryMeilisearch Python SDKPreviousGoogle Vertex AI MatchingEngineNextMilvus IntegrationsVector storesMeilisearchOn this pageMeilisearchMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences. You can self-host Meilisearch or run on Meilisearch Cloud.Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.Setup‚ÄãLaunching a Meilisearch instance‚ÄãYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.You should now have a running Meilisearch instance with vector storage enabled. üéâCredentials‚ÄãTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.HostIn local, the default host is localhost:7700On Meilisearch Cloud, find the host in your project Settings pageAPI keysMeilisearch instance provides you with three API keys out of the box: A MASTER KEY ‚Äî it should only be used to create your Meilisearch instanceA ADMIN KEY ‚Äî use it only server-side to update your database and its settingsA SEARCH KEY ‚Äî a key that you can safely share in front-end applicationsYou can create additional API keys as needed.Installing dependencies‚ÄãThis guide uses the Meilisearch Python SDK. You can install it by running:pip install meilisearchFor more information, refer to the Meilisearch Python SDK documentation.Examples‚ÄãThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Adding text and embeddings‚ÄãThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitterwith open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)# Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.Adding documents and embeddings‚ÄãIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)API Reference:TextLoaderAdd documents by creating a Meilisearch Vectorstore‚ÄãIn this approach, we create a vector store object and add documents to it.from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)API Reference:MeilisearchSimilarity Search with score‚ÄãThis specific method allows you to return the documents and the distance score of the query to them.docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]Similarity Search by vector‚Äãembedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]Additional resources‚ÄãDocumentationMeilisearchMeilisearch Python SDKOpen-source repositoriesMeilisearch repositoryMeilisearch Python SDKPreviousGoogle Vertex AI MatchingEngineNextMilvus On this page MeilisearchMeilisearch is an open-source, lightning-fast, and hyper relevant search engine. It comes with great defaults to help developers build snappy search experiences. You can self-host Meilisearch or run on Meilisearch Cloud.Meilisearch v1.3 supports vector search. This page guides you through integrating Meilisearch as a vector store and using it to perform vector search.Setup‚ÄãLaunching a Meilisearch instance‚ÄãYou will need a running Meilisearch instance to use as your vector store. You can run Meilisearch in local or create a Meilisearch Cloud account.As of Meilisearch v1.3, vector storage is an experimental feature. After launching your Meilisearch instance, you need to enable vector storage. For self-hosted Meilisearch, read the docs on enabling experimental features. On Meilisearch Cloud, enable Vector Store via your project Settings page.You should now have a running Meilisearch instance with vector storage enabled. üéâCredentials‚ÄãTo interact with your Meilisearch instance, the Meilisearch SDK needs a host (URL of your instance) and an API key.HostIn local, the default host is localhost:7700On Meilisearch Cloud, find the host in your project Settings pageAPI keysMeilisearch instance provides you with three API keys out of the box: A MASTER KEY ‚Äî it should only be used to create your Meilisearch instanceA ADMIN KEY ‚Äî use it only server-side to update your database and its settingsA SEARCH KEY ‚Äî a key that you can safely share in front-end applicationsYou can create additional API keys as needed.Installing dependencies‚ÄãThis guide uses the Meilisearch Python SDK. You can install it by running:pip install meilisearchFor more information, refer to the Meilisearch Python SDK documentation.Examples‚ÄãThere are multiple ways to initialize the Meilisearch vector store: providing a Meilisearch client or the URL and API key as needed. In our examples, the credentials will be loaded from the environment.You can make environment variables available in your Notebook environment by using os and getpass. You can use this technique for all the following examples.import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")We want to use OpenAIEmbeddings so we have to get the OpenAI API Key.os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")Adding text and embeddings‚ÄãThis example adds text to the Meilisearch vector database without having to initialize a Meilisearch vector store.from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitterwith open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)# Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)Behind the scenes, Meilisearch will convert the text to multiple vectors. This will bring us to the same result as the following example.Adding documents and embeddings‚ÄãIn this example, we'll use Langchain TextSplitter to split the text in multiple documents. Then, we'll store these documents along with their embeddings.from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)API Reference:TextLoaderAdd documents by creating a Meilisearch Vectorstore‚ÄãIn this approach, we create a vector store object and add documents to it.from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)API Reference:MeilisearchSimilarity Search with score‚ÄãThis specific method allows you to return the documents and the distance score of the query to them.docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]Similarity Search by vector‚Äãembedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]Additional resources‚ÄãDocumentationMeilisearchMeilisearch Python SDKOpen-source repositoriesMeilisearch repositoryMeilisearch Python SDK pip install meilisearch pip install meilisearch  import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:") import osimport getpassos.environ["MEILI_HTTP_ADDR"] = getpass.getpass("Meilisearch HTTP address and port:")os.environ["MEILI_MASTER_KEY"] = getpass.getpass("Meilisearch API Key:")  os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:") os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")  from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings() from langchain.vectorstores import Meilisearchfrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterembeddings = OpenAIEmbeddings()  API Reference:MeilisearchOpenAIEmbeddingsCharacterTextSplitter with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union) with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)  # Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings) # Use Meilisearch vector store to store texts & associated embeddings as vectorvector_store = Meilisearch.from_texts(texts=texts, embedding=embeddings)  from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content) from langchain.document_loaders import TextLoader# Load textloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)# Create documentsdocs = text_splitter.split_documents(documents)# Import documents & embeddings in the vector storevector_store = Meilisearch.from_documents(documents=documents, embedding=embeddings)# Search in our vector storequery = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)print(docs[0].page_content)  API Reference:TextLoader from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents) from langchain.vectorstores import Meilisearchimport meilisearchclient = meilisearch.Client(url="http://127.0.0.1:7700", api_key="***")vector_store = Meilisearch(    embedding=embeddings, client=client, index_name="langchain_demo", text_key="text")vector_store.add_documents(documents)  API Reference:Meilisearch docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0] docs_and_scores = vector_store.similarity_search_with_score(query)docs_and_scores[0]  embedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0] embedding_vector = embeddings.embed_query(query)docs_and_scores = vector_store.similarity_search_by_vector(embedding_vector)docs_and_scores[0]  Previous Google Vertex AI MatchingEngine Next Milvus SetupLaunching a Meilisearch instanceCredentialsInstalling dependenciesExamplesAdding text and embeddingsAdding documents and embeddingsAdd documents by creating a Meilisearch VectorstoreSimilarity Search with scoreSimilarity Search by vectorAdditional resources SetupLaunching a Meilisearch instanceCredentialsInstalling dependenciesExamplesAdding text and embeddingsAdding documents and embeddingsAdd documents by creating a Meilisearch VectorstoreSimilarity Search with scoreSimilarity Search by vectorAdditional resources CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) Meilisearch (https://meilisearch.com) self-host Meilisearch (https://www.meilisearch.com/docs/learn/getting_started/installation#local-installation) Meilisearch Cloud (https://www.meilisearch.com/pricing) ‚Äã (#setup) ‚Äã (#launching-a-meilisearch-instance) Meilisearch in local (https://www.meilisearch.com/docs/learn/getting_started/installation#local-installation) Meilisearch Cloud (https://cloud.meilisearch.com/) enabling experimental features (https://www.meilisearch.com/docs/learn/experimental/vector-search) ‚Äã (#credentials) additional API keys (https://www.meilisearch.com/docs/learn/security/master_api_keys) ‚Äã (#installing-dependencies) Meilisearch Python SDK (https://github.com/meilisearch/meilisearch-python) Meilisearch Python SDK documentation (https://meilisearch.github.io/meilisearch-python/) ‚Äã (#examples) ‚Äã (#adding-text-and-embeddings) Meilisearch (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.meilisearch.Meilisearch.html) OpenAIEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) ‚Äã (#adding-documents-and-embeddings) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) ‚Äã (#add-documents-by-creating-a-meilisearch-vectorstore) Meilisearch (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.meilisearch.Meilisearch.html) ‚Äã (#similarity-search-with-score) ‚Äã (#similarity-search-by-vector) ‚Äã (#additional-resources) Meilisearch (https://www.meilisearch.com/docs/) Meilisearch Python SDK (https://python-sdk.meilisearch.com) Meilisearch repository (https://github.com/meilisearch/meilisearch) Meilisearch Python SDK (https://github.com/meilisearch/meilisearch-python) PreviousGoogle Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) NextMilvus (/docs/integrations/vectorstores/milvus) Setup (#setup) Launching a Meilisearch instance (#launching-a-meilisearch-instance) Credentials (#credentials) Installing dependencies (#installing-dependencies) Examples (#examples) Adding text and embeddings (#adding-text-and-embeddings) Adding documents and embeddings (#adding-documents-and-embeddings) Add documents by creating a Meilisearch Vectorstore (#add-documents-by-creating-a-meilisearch-vectorstore) Similarity Search with score (#similarity-search-with-score) Similarity Search by vector (#similarity-search-by-vector) Additional resources (#additional-resources) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)