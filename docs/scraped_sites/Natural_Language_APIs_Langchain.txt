Natural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints.  This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs. For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook. Some endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object. Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request. Adding the Spoonacular endpoints. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbits AINetwork Airbyte Question Answering Amadeus Azure Cognitive Services CSV Document Comparison Github Gitlab Gmail Google Drive tool Jira JSON MultiOn Office365 OpenAPI Natural Language APIs Pandas Dataframe PlayWright Browser PowerBI Dataset Python Spark Dataframe Spark SQL SQL Database Vectorstore Xorbits Tools Vector stores Grouped by provider  Integrations Agents & Toolkits Natural Language APIs LLMChain OpenAI PromptTemplate Requests APIOperation OpenAPISpec AgentType Tool initialize_agent NLAToolkit Go to the Spoonacular API Console and make a free account. Click on Profile and copy your API key below. First, import dependencies and load the LLM Next, load the Natural Language API Toolkits Create the Agent Use Auth and add more Endpoints Thank you! Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsNatural Language APIsOn this pageNatural Language APIsNatural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints. This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs.For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook.First, import dependencies and load the LLM‚Äãfrom typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkitAPI Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit# Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.Next, load the Natural Language API Toolkits‚Äãspeak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.Create the Agent‚Äã# Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")            > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'Use Auth and add more Endpoints‚ÄãSome endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object.Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request.Adding the Spoonacular endpoints.Go to the Spoonacular API Console and make a free account.Click on Profile and copy your API key below.spoonacular_api_key = ""  # Copy from the API Consolerequests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)    Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameternatural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")    34 tools loaded.# Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)# Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")mrkl.run(user_input)            > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'Thank you!‚Äãnatural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")    "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."PreviousOpenAPINextPandas DataframeFirst, import dependencies and load the LLMNext, load the Natural Language API ToolkitsCreate the AgentUse Auth and add more EndpointsThank you!CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsNatural Language APIsOn this pageNatural Language APIsNatural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints. This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs.For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook.First, import dependencies and load the LLM‚Äãfrom typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkitAPI Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit# Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.Next, load the Natural Language API Toolkits‚Äãspeak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.Create the Agent‚Äã# Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")            > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'Use Auth and add more Endpoints‚ÄãSome endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object.Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request.Adding the Spoonacular endpoints.Go to the Spoonacular API Console and make a free account.Click on Profile and copy your API key below.spoonacular_api_key = ""  # Copy from the API Consolerequests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)    Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameternatural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")    34 tools loaded.# Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)# Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")mrkl.run(user_input)            > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'Thank you!‚Äãnatural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")    "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."PreviousOpenAPINextPandas DataframeFirst, import dependencies and load the LLMNext, load the Natural Language API ToolkitsCreate the AgentUse Auth and add more EndpointsThank you! IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsNatural Language APIsOn this pageNatural Language APIsNatural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints. This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs.For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook.First, import dependencies and load the LLM‚Äãfrom typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkitAPI Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit# Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.Next, load the Natural Language API Toolkits‚Äãspeak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.Create the Agent‚Äã# Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")            > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'Use Auth and add more Endpoints‚ÄãSome endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object.Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request.Adding the Spoonacular endpoints.Go to the Spoonacular API Console and make a free account.Click on Profile and copy your API key below.spoonacular_api_key = ""  # Copy from the API Consolerequests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)    Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameternatural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")    34 tools loaded.# Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)# Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")mrkl.run(user_input)            > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'Thank you!‚Äãnatural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")    "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."PreviousOpenAPINextPandas DataframeFirst, import dependencies and load the LLMNext, load the Natural Language API ToolkitsCreate the AgentUse Auth and add more EndpointsThank you! IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsAgents & ToolkitsNatural Language APIsOn this pageNatural Language APIsNatural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints. This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs.For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook.First, import dependencies and load the LLM‚Äãfrom typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkitAPI Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit# Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.Next, load the Natural Language API Toolkits‚Äãspeak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.Create the Agent‚Äã# Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")            > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'Use Auth and add more Endpoints‚ÄãSome endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object.Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request.Adding the Spoonacular endpoints.Go to the Spoonacular API Console and make a free account.Click on Profile and copy your API key below.spoonacular_api_key = ""  # Copy from the API Consolerequests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)    Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameternatural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")    34 tools loaded.# Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)# Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")mrkl.run(user_input)            > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'Thank you!‚Äãnatural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")    "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."PreviousOpenAPINextPandas DataframeFirst, import dependencies and load the LLMNext, load the Natural Language API ToolkitsCreate the AgentUse Auth and add more EndpointsThank you! IntegrationsAgents & ToolkitsNatural Language APIsOn this pageNatural Language APIsNatural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints. This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs.For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook.First, import dependencies and load the LLM‚Äãfrom typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkitAPI Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit# Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.Next, load the Natural Language API Toolkits‚Äãspeak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.Create the Agent‚Äã# Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")            > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'Use Auth and add more Endpoints‚ÄãSome endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object.Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request.Adding the Spoonacular endpoints.Go to the Spoonacular API Console and make a free account.Click on Profile and copy your API key below.spoonacular_api_key = ""  # Copy from the API Consolerequests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)    Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameternatural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")    34 tools loaded.# Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)# Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")mrkl.run(user_input)            > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'Thank you!‚Äãnatural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")    "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."PreviousOpenAPINextPandas DataframeFirst, import dependencies and load the LLMNext, load the Natural Language API ToolkitsCreate the AgentUse Auth and add more EndpointsThank you! IntegrationsAgents & ToolkitsNatural Language APIsOn this pageNatural Language APIsNatural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints. This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs.For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook.First, import dependencies and load the LLM‚Äãfrom typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkitAPI Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit# Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.Next, load the Natural Language API Toolkits‚Äãspeak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.Create the Agent‚Äã# Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")            > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'Use Auth and add more Endpoints‚ÄãSome endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object.Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request.Adding the Spoonacular endpoints.Go to the Spoonacular API Console and make a free account.Click on Profile and copy your API key below.spoonacular_api_key = ""  # Copy from the API Consolerequests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)    Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameternatural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")    34 tools loaded.# Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)# Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")mrkl.run(user_input)            > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'Thank you!‚Äãnatural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")    "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."PreviousOpenAPINextPandas Dataframe IntegrationsAgents & ToolkitsNatural Language APIsOn this pageNatural Language APIsNatural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints. This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs.For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook.First, import dependencies and load the LLM‚Äãfrom typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkitAPI Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit# Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.Next, load the Natural Language API Toolkits‚Äãspeak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.Create the Agent‚Äã# Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")            > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'Use Auth and add more Endpoints‚ÄãSome endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object.Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request.Adding the Spoonacular endpoints.Go to the Spoonacular API Console and make a free account.Click on Profile and copy your API key below.spoonacular_api_key = ""  # Copy from the API Consolerequests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)    Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameternatural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")    34 tools loaded.# Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)# Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")mrkl.run(user_input)            > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'Thank you!‚Äãnatural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")    "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."PreviousOpenAPINextPandas Dataframe On this page Natural Language APIsNatural Language API Toolkits (NLAToolkits) permit LangChain Agents to efficiently plan and combine calls across endpoints. This notebook demonstrates a sample composition of the Speak, Klarna, and Spoonacluar APIs.For a detailed walkthrough of the OpenAPI chains wrapped within the NLAToolkit, see the OpenAPI Operation Chain notebook.First, import dependencies and load the LLM‚Äãfrom typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkitAPI Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit# Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.Next, load the Natural Language API Toolkits‚Äãspeak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.Create the Agent‚Äã# Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")            > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'Use Auth and add more Endpoints‚ÄãSome endpoints may require user authentication via things like access tokens. Here we show how to pass in the authentication information via the Requests wrapper object.Since each NLATool exposes a concisee natural language interface to its wrapped API, the top level conversational agent has an easier job incorporating each endpoint to satisfy a user's request.Adding the Spoonacular endpoints.Go to the Spoonacular API Console and make a free account.Click on Profile and copy your API key below.spoonacular_api_key = ""  # Copy from the API Consolerequests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)    Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameternatural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")    34 tools loaded.# Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)# Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")mrkl.run(user_input)            > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'Thank you!‚Äãnatural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")    "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German." from typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkit from typing import List, Optionalfrom langchain.chains import LLMChainfrom langchain.llms import OpenAIfrom langchain.prompts import PromptTemplatefrom langchain.requests import Requestsfrom langchain.tools import APIOperation, OpenAPISpecfrom langchain.agents import AgentType, Tool, initialize_agentfrom langchain.agents.agent_toolkits import NLAToolkit  API Reference:LLMChainOpenAIPromptTemplateRequestsAPIOperationOpenAPISpecAgentTypeToolinitialize_agentNLAToolkit # Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here. # Select the LLM to use. Here, we use text-davinci-003llm = OpenAI(    temperature=0, max_tokens=700)  # You can swap between different core LLM's here.  speak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/") speak_toolkit = NLAToolkit.from_llm_and_url(llm, "https://api.speak.com/openapi.yaml")klarna_toolkit = NLAToolkit.from_llm_and_url(    llm, "https://www.klarna.com/us/shopping/public/openai/v0/api-docs/")      Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.     Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.     Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Attempting to load an OpenAPI 3.0.1 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.  # Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response.""" # Slightly tweak the instructions from the default agentopenapi_format_instructions = """Use the following format:Question: the input question you must answerThought: you should always think about what to doAction: the action to take, should be one of [{tool_names}]Action Input: what to instruct the AI Action representative.Observation: The Agent's response... (this Thought/Action/Action Input/Observation can repeat N times)Thought: I now know the final answer. User can't see any of my observations, API responses, links, or tools.Final Answer: the final answer to the original input question with the right amount of detailWhen responding with your Final Answer, remember that the person you are responding to CANNOT see any of your Thought/Action/Action Input/Observations, so if there is any relevant information there you need to include it explicitly in your response."""  natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},) natural_language_tools = speak_toolkit.get_tools() + klarna_toolkit.get_tools()mrkl = initialize_agent(    natural_language_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)  mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it") mrkl.run(    "I have an end of year party for my Italian class and have to buy some Italian clothes for it")              > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'             > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'             > Entering new AgentExecutor chain...     I need to find out what kind of Italian clothes are available    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian clothes    Observation: The API response contains two products from the Al√© brand in Italian Blue. The first is the Al√© Colour Block Short Sleeve Jersey Men - Italian Blue, which costs $86.49, and the second is the Al√© Dolid Flash Jersey Men - Italian Blue, which costs $40.00.    Thought: I now know what kind of Italian clothes are available and how much they cost.    Final Answer: You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.        > Finished chain.    'You can buy two products from the Al√© brand in Italian Blue for your end of year party. The Al√© Colour Block Short Sleeve Jersey Men - Italian Blue costs $86.49, and the Al√© Dolid Flash Jersey Men - Italian Blue costs $40.00.'  spoonacular_api_key = ""  # Copy from the API Console spoonacular_api_key = ""  # Copy from the API Console  requests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text) requests = Requests(headers={"x-api-key": spoonacular_api_key})spoonacular_toolkit = NLAToolkit.from_llm_and_url(    llm,    "https://spoonacular.com/application/frontend/downloads/spoonacular-openapi-3.json",    requests=requests,    max_text_length=1800,  # If you want to truncate the response text)      Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter     Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter     Attempting to load an OpenAPI 3.0.0 spec.  This may result in degraded performance. Convert your OpenAPI spec to 3.1.* spec for better support.    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Accept. Valid values are ['path', 'query'] Ignoring optional parameter    Unsupported APIPropertyLocation "header" for parameter Content-Type. Valid values are ['path', 'query'] Ignoring optional parameter  natural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.") natural_language_api_tools = (    speak_toolkit.get_tools()    + klarna_toolkit.get_tools()    + spoonacular_toolkit.get_tools()[:30])print(f"{len(natural_language_api_tools)} tools loaded.")      34 tools loaded.     34 tools loaded.     34 tools loaded.  # Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},) # Create an agent with the new toolsmrkl = initialize_agent(    natural_language_api_tools,    llm,    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,    verbose=True,    agent_kwargs={"format_instructions": openapi_format_instructions},)  # Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?") # Make the query more complex!user_input = (    "I'm learning Italian, and my language class is having an end of year party... "    " Could you help me find an Italian outfit to wear and"    " an appropriate recipe to prepare so I can present for the class in Italian?")  mrkl.run(user_input) mrkl.run(user_input)              > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'             > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'             > Entering new AgentExecutor chain...     I need to find a recipe and an outfit that is Italian-themed.    Action: spoonacular_API.searchRecipes    Action Input: Italian    Observation: The API response contains 10 Italian recipes, including Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, and Pappa Al Pomodoro.    Thought: I need to find an Italian-themed outfit.    Action: Open_AI_Klarna_product_Api.productsUsingGET    Action Input: Italian    Observation: I found 10 products related to 'Italian' in the API response. These products include Italian Gold Sparkle Perfectina Necklace - Gold, Italian Design Miami Cuban Link Chain Necklace - Gold, Italian Gold Miami Cuban Link Chain Necklace - Gold, Italian Gold Herringbone Necklace - Gold, Italian Gold Claddagh Ring - Gold, Italian Gold Herringbone Chain Necklace - Gold, Garmin QuickFit 22mm Italian Vacchetta Leather Band, Macy's Italian Horn Charm - Gold, Dolce & Gabbana Light Blue Italian Love Pour Homme EdT 1.7 fl oz.    Thought: I now know the final answer.    Final Answer: To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.        > Finished chain.    'To present for your Italian language class, you could wear an Italian Gold Sparkle Perfectina Necklace - Gold, an Italian Design Miami Cuban Link Chain Necklace - Gold, or an Italian Gold Miami Cuban Link Chain Necklace - Gold. For a recipe, you could make Turkey Tomato Cheese Pizza, Broccolini Quinoa Pilaf, Bruschetta Style Pork & Pasta, Salmon Quinoa Risotto, Italian Tuna Pasta, Roasted Brussels Sprouts With Garlic, Asparagus Lemon Risotto, Italian Steamed Artichokes, Crispy Italian Cauliflower Poppers Appetizer, or Pappa Al Pomodoro.'  natural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!") natural_language_api_tools[1].run(    "Tell the LangChain audience to 'enjoy the meal' in Italian, please!")      "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."     "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."     "In Italian, you can say 'Buon appetito' to someone to wish them to enjoy their meal. This phrase is commonly used in Italy when someone is about to eat, often at the beginning of a meal. It's similar to saying 'Bon app√©tit' in French or 'Guten Appetit' in German."  Previous OpenAPI Next Pandas Dataframe First, import dependencies and load the LLMNext, load the Natural Language API ToolkitsCreate the AgentUse Auth and add more EndpointsThank you! First, import dependencies and load the LLMNext, load the Natural Language API ToolkitsCreate the AgentUse Auth and add more EndpointsThank you! CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) AINetwork (/docs/integrations/toolkits/ainetwork) Airbyte Question Answering (/docs/integrations/toolkits/airbyte_structured_qa) Amadeus (/docs/integrations/toolkits/amadeus) Azure Cognitive Services (/docs/integrations/toolkits/azure_cognitive_services) CSV (/docs/integrations/toolkits/csv) Document Comparison (/docs/integrations/toolkits/document_comparison_toolkit) Github (/docs/integrations/toolkits/github) Gitlab (/docs/integrations/toolkits/gitlab) Gmail (/docs/integrations/toolkits/gmail) Google Drive tool (/docs/integrations/toolkits/google_drive) Jira (/docs/integrations/toolkits/jira) JSON (/docs/integrations/toolkits/json) MultiOn (/docs/integrations/toolkits/multion) Office365 (/docs/integrations/toolkits/office365) OpenAPI (/docs/integrations/toolkits/openapi) Natural Language APIs (/docs/integrations/toolkits/openapi_nla) Pandas Dataframe (/docs/integrations/toolkits/pandas) PlayWright Browser (/docs/integrations/toolkits/playwright) PowerBI Dataset (/docs/integrations/toolkits/powerbi) Python (/docs/integrations/toolkits/python) Spark Dataframe (/docs/integrations/toolkits/spark) Spark SQL (/docs/integrations/toolkits/spark_sql) SQL Database (/docs/integrations/toolkits/sql_database) Vectorstore (/docs/integrations/toolkits/vectorstore) Xorbits (/docs/integrations/toolkits/xorbits) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Agents & Toolkits (/docs/integrations/toolkits/) OpenAPI Operation Chain (/docs/use_cases/apis/openapi.html) ‚Äã (#first-import-dependencies-and-load-the-llm) LLMChain (https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html) OpenAI (https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html) PromptTemplate (https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.PromptTemplate.html) Requests (https://api.python.langchain.com/en/latest/utilities/langchain.utilities.requests.Requests.html) APIOperation (https://api.python.langchain.com/en/latest/tools/langchain.tools.openapi.utils.api_models.APIOperation.html) OpenAPISpec (https://api.python.langchain.com/en/latest/utilities/langchain.utilities.openapi.OpenAPISpec.html) AgentType (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html) Tool (https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html) initialize_agent (https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html) NLAToolkit (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.nla.toolkit.NLAToolkit.html) ‚Äã (#next-load-the-natural-language-api-toolkits) ‚Äã (#create-the-agent) ‚Äã (#use-auth-and-add-more-endpoints) Spoonacular API Console (https://spoonacular.com/food-api/console#Profile) ‚Äã (#thank-you) PreviousOpenAPI (/docs/integrations/toolkits/openapi) NextPandas Dataframe (/docs/integrations/toolkits/pandas) First, import dependencies and load the LLM (#first-import-dependencies-and-load-the-llm) Next, load the Natural Language API Toolkits (#next-load-the-natural-language-api-toolkits) Create the Agent (#create-the-agent) Use Auth and add more Endpoints (#use-auth-and-add-more-endpoints) Thank you! (#thank-you) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)