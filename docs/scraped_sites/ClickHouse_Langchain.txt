ClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL. This notebook shows how to use functionality related to the ClickHouse vector search. Setting up local clickhouse server with docker (optional) Setup up clickhouse client driver We want to use OpenAIEmbeddings so we have to get the OpenAI API Key. Clickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed. You can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL. NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user. If you custimized your column_map under your setting, you search with filter like this: IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores ClickHouse OpenAIEmbeddings CharacterTextSplitter Clickhouse ClickhouseSettings TextLoader Clickhouse ClickhouseSettings TextLoader Setting up envrionments Get connection info and data schemaClickhouse table schema Clickhouse table schema Filtering Deleting your data Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesClickHouseOn this pageClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.This notebook shows how to use functionality related to the ClickHouse vector search.Setting up envrionments‚ÄãSetting up local clickhouse server with docker (optional)docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11Setup up clickhouse client driverpip install clickhouse-connectWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettingsAPI Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoaderfor d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]print(docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.Get connection info and data schema‚Äãprint(str(docsearch))    default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------    Clickhouse table schema‚ÄãClickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed.print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")    Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192Filtering‚ÄãYou can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL.NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.If you custimized your column_map under your setting, you search with filter like this:from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)API Reference:ClickhouseClickhouseSettingsTextLoader    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")    0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...Deleting your data‚Äãdocsearch.drop()PreviousChromaNextDashVectorSetting up envrionmentsGet connection info and data schemaClickhouse table schemaFilteringDeleting your dataCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesClickHouseOn this pageClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.This notebook shows how to use functionality related to the ClickHouse vector search.Setting up envrionments‚ÄãSetting up local clickhouse server with docker (optional)docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11Setup up clickhouse client driverpip install clickhouse-connectWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettingsAPI Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoaderfor d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]print(docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.Get connection info and data schema‚Äãprint(str(docsearch))    default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------    Clickhouse table schema‚ÄãClickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed.print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")    Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192Filtering‚ÄãYou can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL.NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.If you custimized your column_map under your setting, you search with filter like this:from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)API Reference:ClickhouseClickhouseSettingsTextLoader    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")    0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...Deleting your data‚Äãdocsearch.drop()PreviousChromaNextDashVectorSetting up envrionmentsGet connection info and data schemaClickhouse table schemaFilteringDeleting your data IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesClickHouseOn this pageClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.This notebook shows how to use functionality related to the ClickHouse vector search.Setting up envrionments‚ÄãSetting up local clickhouse server with docker (optional)docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11Setup up clickhouse client driverpip install clickhouse-connectWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettingsAPI Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoaderfor d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]print(docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.Get connection info and data schema‚Äãprint(str(docsearch))    default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------    Clickhouse table schema‚ÄãClickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed.print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")    Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192Filtering‚ÄãYou can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL.NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.If you custimized your column_map under your setting, you search with filter like this:from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)API Reference:ClickhouseClickhouseSettingsTextLoader    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")    0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...Deleting your data‚Äãdocsearch.drop()PreviousChromaNextDashVectorSetting up envrionmentsGet connection info and data schemaClickhouse table schemaFilteringDeleting your data IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesClickHouseOn this pageClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.This notebook shows how to use functionality related to the ClickHouse vector search.Setting up envrionments‚ÄãSetting up local clickhouse server with docker (optional)docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11Setup up clickhouse client driverpip install clickhouse-connectWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettingsAPI Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoaderfor d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]print(docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.Get connection info and data schema‚Äãprint(str(docsearch))    default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------    Clickhouse table schema‚ÄãClickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed.print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")    Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192Filtering‚ÄãYou can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL.NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.If you custimized your column_map under your setting, you search with filter like this:from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)API Reference:ClickhouseClickhouseSettingsTextLoader    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")    0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...Deleting your data‚Äãdocsearch.drop()PreviousChromaNextDashVectorSetting up envrionmentsGet connection info and data schemaClickhouse table schemaFilteringDeleting your data IntegrationsVector storesClickHouseOn this pageClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.This notebook shows how to use functionality related to the ClickHouse vector search.Setting up envrionments‚ÄãSetting up local clickhouse server with docker (optional)docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11Setup up clickhouse client driverpip install clickhouse-connectWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettingsAPI Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoaderfor d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]print(docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.Get connection info and data schema‚Äãprint(str(docsearch))    default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------    Clickhouse table schema‚ÄãClickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed.print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")    Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192Filtering‚ÄãYou can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL.NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.If you custimized your column_map under your setting, you search with filter like this:from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)API Reference:ClickhouseClickhouseSettingsTextLoader    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")    0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...Deleting your data‚Äãdocsearch.drop()PreviousChromaNextDashVectorSetting up envrionmentsGet connection info and data schemaClickhouse table schemaFilteringDeleting your data IntegrationsVector storesClickHouseOn this pageClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.This notebook shows how to use functionality related to the ClickHouse vector search.Setting up envrionments‚ÄãSetting up local clickhouse server with docker (optional)docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11Setup up clickhouse client driverpip install clickhouse-connectWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettingsAPI Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoaderfor d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]print(docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.Get connection info and data schema‚Äãprint(str(docsearch))    default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------    Clickhouse table schema‚ÄãClickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed.print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")    Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192Filtering‚ÄãYou can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL.NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.If you custimized your column_map under your setting, you search with filter like this:from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)API Reference:ClickhouseClickhouseSettingsTextLoader    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")    0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...Deleting your data‚Äãdocsearch.drop()PreviousChromaNextDashVector IntegrationsVector storesClickHouseOn this pageClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.This notebook shows how to use functionality related to the ClickHouse vector search.Setting up envrionments‚ÄãSetting up local clickhouse server with docker (optional)docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11Setup up clickhouse client driverpip install clickhouse-connectWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettingsAPI Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoaderfor d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]print(docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.Get connection info and data schema‚Äãprint(str(docsearch))    default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------    Clickhouse table schema‚ÄãClickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed.print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")    Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192Filtering‚ÄãYou can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL.NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.If you custimized your column_map under your setting, you search with filter like this:from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)API Reference:ClickhouseClickhouseSettingsTextLoader    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")    0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...Deleting your data‚Äãdocsearch.drop()PreviousChromaNextDashVector On this page ClickHouseClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics with full SQL support and a wide range of functions to assist users in writing analytical queries. Lately added data structures and distance search functions (like L2Distance) as well as approximate nearest neighbor search indexes enable ClickHouse to be used as a high performance and scalable vector database to store and search vectors with SQL.This notebook shows how to use functionality related to the ClickHouse vector search.Setting up envrionments‚ÄãSetting up local clickhouse server with docker (optional)docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11Setup up clickhouse client driverpip install clickhouse-connectWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettingsAPI Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoaderfor d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]print(docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.Get connection info and data schema‚Äãprint(str(docsearch))    default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------    Clickhouse table schema‚ÄãClickhouse table will be automatically created if not exist by default. Advanced users could pre-create the table with optimized settings. For distributed Clickhouse cluster with sharding, table engine should be configured as Distributed.print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")    Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192Filtering‚ÄãYou can have direct access to ClickHouse SQL where statement. You can write WHERE clause following standard SQL.NOTE: Please be aware of SQL injection, this interface must not be directly called by end-user.If you custimized your column_map under your setting, you search with filter like this:from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)API Reference:ClickhouseClickhouseSettingsTextLoader    Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")    0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...Deleting your data‚Äãdocsearch.drop() docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11 docker run -d -p 8123:8123 -p9000:9000 --name langchain-clickhouse-server --ulimit nofile=262144:262144 clickhouse/clickhouse-server:23.4.2.11  pip install clickhouse-connect pip install clickhouse-connect  import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:") import osimport getpassif not os.environ["OPENAI_API_KEY"]:    os.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")  from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettings from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Clickhouse, ClickhouseSettings  API Reference:OpenAIEmbeddingsCharacterTextSplitterClickhouseClickhouseSettings from langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings() from langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()  API Reference:TextLoader for d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query) for d in docs:    d.metadata = {"some": "metadata"}settings = ClickhouseSettings(table="clickhouse_vector_search_example")docsearch = Clickhouse.from_documents(docs, embeddings, config=settings)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)      Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]     Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]     Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 2801.49it/s]  print(docs[0].page_content) print(docs[0].page_content)      Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.     Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.     Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.  print(str(docsearch)) print(str(docsearch))      default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------         default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------         default.clickhouse_vector_search_example @ localhost:8123        username: None        Table Schema:    ---------------------------------------------------    |id                      |Nullable(String)        |    |document                |Nullable(String)        |    |embedding               |Array(Float32)          |    |metadata                |Object('json')          |    |uuid                    |UUID                    |    ---------------------------------------------------      print(f"Clickhouse Table DDL:\n\n{docsearch.schema}") print(f"Clickhouse Table DDL:\n\n{docsearch.schema}")      Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192     Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192     Clickhouse Table DDL:        CREATE TABLE IF NOT EXISTS default.clickhouse_vector_search_example(        id Nullable(String),        document Nullable(String),        embedding Array(Float32),        metadata JSON,        uuid UUID DEFAULT generateUUIDv4(),        CONSTRAINT cons_vec_len CHECK length(embedding) = 1536,        INDEX vec_idx embedding TYPE annoy(100,'L2Distance') GRANULARITY 1000    ) ENGINE = MergeTree ORDER BY uuid SETTINGS index_granularity = 8192  from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings) from langchain.vectorstores import Clickhouse, ClickhouseSettingsfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()for i, d in enumerate(docs):    d.metadata = {"doc_id": i}docsearch = Clickhouse.from_documents(docs, embeddings)  API Reference:ClickhouseClickhouseSettingsTextLoader     Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]     Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]     Inserting data...: 100%|‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà| 42/42 [00:00<00:00, 6939.56it/s]  meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...") meta = docsearch.metadata_columnoutput = docsearch.similarity_search_with_relevance_scores(    "What did the president say about Ketanji Brown Jackson?",    k=4,    where_str=f"{meta}.doc_id<10",)for d, dist in output:    print(dist, d.metadata, d.page_content[:20] + "...")      0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...     0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...     0.6779101415357189 {'doc_id': 0} Madam Speaker, Madam...    0.6997970363474885 {'doc_id': 8} And so many families...    0.7044504914336727 {'doc_id': 1} Groups of citizens b...    0.7053558702165094 {'doc_id': 6} And I‚Äôm taking robus...  docsearch.drop() docsearch.drop()  Previous Chroma Next DashVector Setting up envrionmentsGet connection info and data schemaClickhouse table schemaFilteringDeleting your data Setting up envrionmentsGet connection info and data schemaClickhouse table schemaFilteringDeleting your data CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) ClickHouse (https://clickhouse.com/) approximate nearest neighbor search indexes (https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/annindexes) ‚Äã (#setting-up-envrionments) OpenAIEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) Clickhouse (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.clickhouse.Clickhouse.html) ClickhouseSettings (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.clickhouse.ClickhouseSettings.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) ‚Äã (#get-connection-info-and-data-schema) ‚Äã (#clickhouse-table-schema) ‚Äã (#filtering) Clickhouse (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.clickhouse.Clickhouse.html) ClickhouseSettings (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.clickhouse.ClickhouseSettings.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) ‚Äã (#deleting-your-data) PreviousChroma (/docs/integrations/vectorstores/chroma) NextDashVector (/docs/integrations/vectorstores/dashvector) Setting up envrionments (#setting-up-envrionments) Get connection info and data schema (#get-connection-info-and-data-schema) Clickhouse table schema (#clickhouse-table-schema) Filtering (#filtering) Deleting your data (#deleting-your-data) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)