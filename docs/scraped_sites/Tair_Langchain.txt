Tair is a cloud native in-memory database service developed by Alibaba Cloud. It provides rich data models and enterprise-grade capabilities to support your real-time online scenarios while maintaining full compatibility with open source Redis. Tair also introduces persistent memory-optimized instances that are based on the new non-volatile memory (NVM) storage medium. This notebook shows how to use functionality related to the Tair vector database. To run, you should have a Tair instance up and running. Connect to Tair using the TAIR_URL environment variable  or the keyword argument tair_url. Then store documents and embeddings into Tair. Query similar documents. Tair Hybrid Search Index build Tair Hybrid Search IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores Tair FakeEmbeddings CharacterTextSplitter Tair TextLoader Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesTairTairTair is a cloud native in-memory database service developed by Alibaba Cloud. It provides rich data models and enterprise-grade capabilities to support your real-time online scenarios while maintaining full compatibility with open source Redis. Tair also introduces persistent memory-optimized instances that are based on the new non-volatile memory (NVM) storage medium.This notebook shows how to use functionality related to the Tair vector database.To run, you should have a Tair instance up and running.from langchain.embeddings.fake import FakeEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import TairAPI Reference:FakeEmbeddingsCharacterTextSplitterTairfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../extras/modules/state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = FakeEmbeddings(size=128)API Reference:TextLoader    ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txtConnect to Tair using the TAIR_URL environment variable export TAIR_URL="redis://{username}:{password}@{tair_address}:{tair_port}"or the keyword argument tair_url.Then store documents and embeddings into Tair.tair_url = "redis://localhost:6379"# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not definedQuery similar documents.query = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)docs[0]    Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})Tair Hybrid Search Index build# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url, index_params={"lexical_algorithm":"bm25"})Tair Hybrid Searchquery = "What did the president say about Ketanji Brown Jackson"# hybrid_ratio: 0.5 hybrid search, 0.9999 vector search, 0.0001 text searchkwargs = {"TEXT" : query, "hybrid_ratio" : 0.5}docs = vector_store.similarity_search(query, **kwargs)docs[0]PreviousSupabase (Postgres)NextTencent Cloud VectorDBCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesTairTairTair is a cloud native in-memory database service developed by Alibaba Cloud. It provides rich data models and enterprise-grade capabilities to support your real-time online scenarios while maintaining full compatibility with open source Redis. Tair also introduces persistent memory-optimized instances that are based on the new non-volatile memory (NVM) storage medium.This notebook shows how to use functionality related to the Tair vector database.To run, you should have a Tair instance up and running.from langchain.embeddings.fake import FakeEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import TairAPI Reference:FakeEmbeddingsCharacterTextSplitterTairfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../extras/modules/state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = FakeEmbeddings(size=128)API Reference:TextLoader    ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txtConnect to Tair using the TAIR_URL environment variable export TAIR_URL="redis://{username}:{password}@{tair_address}:{tair_port}"or the keyword argument tair_url.Then store documents and embeddings into Tair.tair_url = "redis://localhost:6379"# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not definedQuery similar documents.query = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)docs[0]    Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})Tair Hybrid Search Index build# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url, index_params={"lexical_algorithm":"bm25"})Tair Hybrid Searchquery = "What did the president say about Ketanji Brown Jackson"# hybrid_ratio: 0.5 hybrid search, 0.9999 vector search, 0.0001 text searchkwargs = {"TEXT" : query, "hybrid_ratio" : 0.5}docs = vector_store.similarity_search(query, **kwargs)docs[0]PreviousSupabase (Postgres)NextTencent Cloud VectorDB IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesTairTairTair is a cloud native in-memory database service developed by Alibaba Cloud. It provides rich data models and enterprise-grade capabilities to support your real-time online scenarios while maintaining full compatibility with open source Redis. Tair also introduces persistent memory-optimized instances that are based on the new non-volatile memory (NVM) storage medium.This notebook shows how to use functionality related to the Tair vector database.To run, you should have a Tair instance up and running.from langchain.embeddings.fake import FakeEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import TairAPI Reference:FakeEmbeddingsCharacterTextSplitterTairfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../extras/modules/state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = FakeEmbeddings(size=128)API Reference:TextLoader    ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txtConnect to Tair using the TAIR_URL environment variable export TAIR_URL="redis://{username}:{password}@{tair_address}:{tair_port}"or the keyword argument tair_url.Then store documents and embeddings into Tair.tair_url = "redis://localhost:6379"# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not definedQuery similar documents.query = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)docs[0]    Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})Tair Hybrid Search Index build# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url, index_params={"lexical_algorithm":"bm25"})Tair Hybrid Searchquery = "What did the president say about Ketanji Brown Jackson"# hybrid_ratio: 0.5 hybrid search, 0.9999 vector search, 0.0001 text searchkwargs = {"TEXT" : query, "hybrid_ratio" : 0.5}docs = vector_store.similarity_search(query, **kwargs)docs[0]PreviousSupabase (Postgres)NextTencent Cloud VectorDB IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesTairTairTair is a cloud native in-memory database service developed by Alibaba Cloud. It provides rich data models and enterprise-grade capabilities to support your real-time online scenarios while maintaining full compatibility with open source Redis. Tair also introduces persistent memory-optimized instances that are based on the new non-volatile memory (NVM) storage medium.This notebook shows how to use functionality related to the Tair vector database.To run, you should have a Tair instance up and running.from langchain.embeddings.fake import FakeEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import TairAPI Reference:FakeEmbeddingsCharacterTextSplitterTairfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../extras/modules/state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = FakeEmbeddings(size=128)API Reference:TextLoader    ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txtConnect to Tair using the TAIR_URL environment variable export TAIR_URL="redis://{username}:{password}@{tair_address}:{tair_port}"or the keyword argument tair_url.Then store documents and embeddings into Tair.tair_url = "redis://localhost:6379"# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not definedQuery similar documents.query = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)docs[0]    Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})Tair Hybrid Search Index build# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url, index_params={"lexical_algorithm":"bm25"})Tair Hybrid Searchquery = "What did the president say about Ketanji Brown Jackson"# hybrid_ratio: 0.5 hybrid search, 0.9999 vector search, 0.0001 text searchkwargs = {"TEXT" : query, "hybrid_ratio" : 0.5}docs = vector_store.similarity_search(query, **kwargs)docs[0]PreviousSupabase (Postgres)NextTencent Cloud VectorDB IntegrationsVector storesTairTairTair is a cloud native in-memory database service developed by Alibaba Cloud. It provides rich data models and enterprise-grade capabilities to support your real-time online scenarios while maintaining full compatibility with open source Redis. Tair also introduces persistent memory-optimized instances that are based on the new non-volatile memory (NVM) storage medium.This notebook shows how to use functionality related to the Tair vector database.To run, you should have a Tair instance up and running.from langchain.embeddings.fake import FakeEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import TairAPI Reference:FakeEmbeddingsCharacterTextSplitterTairfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../extras/modules/state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = FakeEmbeddings(size=128)API Reference:TextLoader    ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txtConnect to Tair using the TAIR_URL environment variable export TAIR_URL="redis://{username}:{password}@{tair_address}:{tair_port}"or the keyword argument tair_url.Then store documents and embeddings into Tair.tair_url = "redis://localhost:6379"# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not definedQuery similar documents.query = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)docs[0]    Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})Tair Hybrid Search Index build# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url, index_params={"lexical_algorithm":"bm25"})Tair Hybrid Searchquery = "What did the president say about Ketanji Brown Jackson"# hybrid_ratio: 0.5 hybrid search, 0.9999 vector search, 0.0001 text searchkwargs = {"TEXT" : query, "hybrid_ratio" : 0.5}docs = vector_store.similarity_search(query, **kwargs)docs[0]PreviousSupabase (Postgres)NextTencent Cloud VectorDB TairTair is a cloud native in-memory database service developed by Alibaba Cloud. It provides rich data models and enterprise-grade capabilities to support your real-time online scenarios while maintaining full compatibility with open source Redis. Tair also introduces persistent memory-optimized instances that are based on the new non-volatile memory (NVM) storage medium.This notebook shows how to use functionality related to the Tair vector database.To run, you should have a Tair instance up and running.from langchain.embeddings.fake import FakeEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import TairAPI Reference:FakeEmbeddingsCharacterTextSplitterTairfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../extras/modules/state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = FakeEmbeddings(size=128)API Reference:TextLoader    ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txtConnect to Tair using the TAIR_URL environment variable export TAIR_URL="redis://{username}:{password}@{tair_address}:{tair_port}"or the keyword argument tair_url.Then store documents and embeddings into Tair.tair_url = "redis://localhost:6379"# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not definedQuery similar documents.query = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)docs[0]    Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})Tair Hybrid Search Index build# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url, index_params={"lexical_algorithm":"bm25"})Tair Hybrid Searchquery = "What did the president say about Ketanji Brown Jackson"# hybrid_ratio: 0.5 hybrid search, 0.9999 vector search, 0.0001 text searchkwargs = {"TEXT" : query, "hybrid_ratio" : 0.5}docs = vector_store.similarity_search(query, **kwargs)docs[0] from langchain.embeddings.fake import FakeEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Tair from langchain.embeddings.fake import FakeEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Tair  API Reference:FakeEmbeddingsCharacterTextSplitterTair from langchain.document_loaders import TextLoaderloader = TextLoader("../../../extras/modules/state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = FakeEmbeddings(size=128) from langchain.document_loaders import TextLoaderloader = TextLoader("../../../extras/modules/state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = FakeEmbeddings(size=128)  API Reference:TextLoader     ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txt     ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txt     ---------------------------------------------------------------------------    FileNotFoundError                         Traceback (most recent call last)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:40, in TextLoader.load(self)         39 try:    ---> 40     with open(self.file_path, encoding=self.encoding) as f:         41         text = f.read()    FileNotFoundError: [Errno 2] No such file or directory: '../../../state_of_the_union.txt'        The above exception was the direct cause of the following exception:    RuntimeError                              Traceback (most recent call last)    Cell In[30], line 4          1 from langchain.document_loaders import TextLoader          3 loader = TextLoader("../../../state_of_the_union.txt")    ----> 4 documents = loader.load()          5 text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)          6 docs = text_splitter.split_documents(documents)    File /opt/homebrew/lib/python3.10/site-packages/langchain/document_loaders/text.py:56, in TextLoader.load(self)         54         raise RuntimeError(f"Error loading {self.file_path}") from e         55 except Exception as e:    ---> 56     raise RuntimeError(f"Error loading {self.file_path}") from e         58 metadata = {"source": self.file_path}         59 return [Document(page_content=text, metadata=metadata)]    RuntimeError: Error loading ../../../state_of_the_union.txt  export TAIR_URL="redis://{username}:{password}@{tair_address}:{tair_port}" export TAIR_URL="redis://{username}:{password}@{tair_address}:{tair_port}"  tair_url = "redis://localhost:6379"# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url) tair_url = "redis://localhost:6379"# drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)      ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not defined     ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not defined     ---------------------------------------------------------------------------    NameError                                 Traceback (most recent call last)    Cell In[6], line 6          3 # drop first if index already exists          4 Tair.drop_index(tair_url=tair_url)    ----> 6 vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url)    NameError: name 'docs' is not defined  query = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)docs[0] query = "What did the president say about Ketanji Brown Jackson"docs = vector_store.similarity_search(query)docs[0]      Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})     Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})     Document(page_content='We‚Äôre going after the criminals who stole billions in relief money meant for small businesses and millions of Americans.  \n\nAnd tonight, I‚Äôm announcing that the Justice Department will name a chief prosecutor for pandemic fraud. \n\nBy the end of this year, the deficit will be down to less than half what it was before I took office.  \n\nThe only president ever to cut the deficit by more than one trillion dollars in a single year. \n\nLowering your costs also means demanding more competition. \n\nI‚Äôm a capitalist, but capitalism without competition isn‚Äôt capitalism. \n\nIt‚Äôs exploitation‚Äîand it drives up prices. \n\nWhen corporations don‚Äôt have to compete, their profits go up, your prices go up, and small businesses and family farmers and ranchers go under. \n\nWe see it happening with ocean carriers moving goods in and out of America. \n\nDuring the pandemic, these foreign-owned companies raised prices by as much as 1,000% and made record profits.', metadata={'source': '../../../state_of_the_union.txt'})  # drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url, index_params={"lexical_algorithm":"bm25"}) # drop first if index already existsTair.drop_index(tair_url=tair_url)vector_store = Tair.from_documents(docs, embeddings, tair_url=tair_url, index_params={"lexical_algorithm":"bm25"})  query = "What did the president say about Ketanji Brown Jackson"# hybrid_ratio: 0.5 hybrid search, 0.9999 vector search, 0.0001 text searchkwargs = {"TEXT" : query, "hybrid_ratio" : 0.5}docs = vector_store.similarity_search(query, **kwargs)docs[0] query = "What did the president say about Ketanji Brown Jackson"# hybrid_ratio: 0.5 hybrid search, 0.9999 vector search, 0.0001 text searchkwargs = {"TEXT" : query, "hybrid_ratio" : 0.5}docs = vector_store.similarity_search(query, **kwargs)docs[0]  Previous Supabase (Postgres) Next Tencent Cloud VectorDB CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) Tair (https://www.alibabacloud.com/help/en/tair/latest/what-is-tair) FakeEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.fake.FakeEmbeddings.html) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) Tair (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.tair.Tair.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) PreviousSupabase (Postgres) (/docs/integrations/vectorstores/supabase) NextTencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)