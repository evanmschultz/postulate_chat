This notebook goes over how to use Dynamodb to store chat message history. First make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3. Next, create the DynamoDB Table where we will be storing messages: Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor. The default key for DynamoDBChatMessageHistory is {"SessionId": self.session_id}, but you can modify this to match your table design. You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id} When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter. Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs MemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep Memory Cassandra Chat Message History Dynamodb Chat Message History Entity Memory with SQLite storage Momento Chat Message History Mongodb Chat Message History Motörhead Memory Motörhead Memory (Managed) Postgres Chat Message History Redis Chat Message History Rockset Chat Message History SQL Chat Message History Streamlit Chat Message History Xata chat memory Zep Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Memory Dynamodb Chat Message History DynamoDBChatMessageHistory DynamoDBChatMessageHistory DynamoDBChatMessageHistory Tool ConversationBufferMemory ChatOpenAI initialize_agent AgentType PythonREPL DynamoDBChatMessageHistory DynamoDBChatMessageHistory with Custom Endpoint URL DynamoDBChatMessageHistory With Different Keys Composite KeysPrimary Key NameComposite Keys Primary Key Name Composite Keys Agent with DynamoDB Memory Discord Twitter Python JS/TS Homepage Blog Skip to main content🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryDynamodb Chat Message HistoryOn this pageDynamodb Chat Message HistoryThis notebook goes over how to use Dynamodb to store chat message history.First make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3.Next, create the DynamoDB Table where we will be storing messages:import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count)    0DynamoDBChatMessageHistory​from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?")API Reference:DynamoDBChatMessageHistoryhistory.messages    [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]DynamoDBChatMessageHistory with Custom Endpoint URL​Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",)API Reference:DynamoDBChatMessageHistoryDynamoDBChatMessageHistory With Different Keys Composite Keys​The default key for DynamoDBChatMessageHistory is {"SessionId": self.session_id}, but you can modify this to match your table design.Primary Key Name​You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id}Composite Keys​When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter.Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messagesAPI Reference:DynamoDBChatMessageHistory    0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]Agent with DynamoDB Memory​from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True)API Reference:ToolConversationBufferMemoryChatOpenAIinitialize_agentAgentTypePythonREPLpython_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )]llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,)    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)agent_chain.run(input="Hello!")agent_chain.run(input="Who owns Twitter?")agent_chain.run(input="My name is Bob.")agent_chain.run(input="Who am I?")PreviousCassandra Chat Message HistoryNextEntity Memory with SQLite storageDynamoDBChatMessageHistoryDynamoDBChatMessageHistory with Custom Endpoint URLDynamoDBChatMessageHistory With Different Keys Composite KeysPrimary Key NameComposite KeysAgent with DynamoDB MemoryCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. Skip to main content 🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK 🦜️🔗 LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryDynamodb Chat Message HistoryOn this pageDynamodb Chat Message HistoryThis notebook goes over how to use Dynamodb to store chat message history.First make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3.Next, create the DynamoDB Table where we will be storing messages:import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count)    0DynamoDBChatMessageHistory​from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?")API Reference:DynamoDBChatMessageHistoryhistory.messages    [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]DynamoDBChatMessageHistory with Custom Endpoint URL​Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",)API Reference:DynamoDBChatMessageHistoryDynamoDBChatMessageHistory With Different Keys Composite Keys​The default key for DynamoDBChatMessageHistory is {"SessionId": self.session_id}, but you can modify this to match your table design.Primary Key Name​You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id}Composite Keys​When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter.Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messagesAPI Reference:DynamoDBChatMessageHistory    0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]Agent with DynamoDB Memory​from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True)API Reference:ToolConversationBufferMemoryChatOpenAIinitialize_agentAgentTypePythonREPLpython_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )]llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,)    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)agent_chain.run(input="Hello!")agent_chain.run(input="Who owns Twitter?")agent_chain.run(input="My name is Bob.")agent_chain.run(input="Who am I?")PreviousCassandra Chat Message HistoryNextEntity Memory with SQLite storageDynamoDBChatMessageHistoryDynamoDBChatMessageHistory with Custom Endpoint URLDynamoDBChatMessageHistory With Different Keys Composite KeysPrimary Key NameComposite KeysAgent with DynamoDB Memory IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryDynamodb Chat Message HistoryOn this pageDynamodb Chat Message HistoryThis notebook goes over how to use Dynamodb to store chat message history.First make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3.Next, create the DynamoDB Table where we will be storing messages:import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count)    0DynamoDBChatMessageHistory​from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?")API Reference:DynamoDBChatMessageHistoryhistory.messages    [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]DynamoDBChatMessageHistory with Custom Endpoint URL​Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",)API Reference:DynamoDBChatMessageHistoryDynamoDBChatMessageHistory With Different Keys Composite Keys​The default key for DynamoDBChatMessageHistory is {"SessionId": self.session_id}, but you can modify this to match your table design.Primary Key Name​You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id}Composite Keys​When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter.Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messagesAPI Reference:DynamoDBChatMessageHistory    0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]Agent with DynamoDB Memory​from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True)API Reference:ToolConversationBufferMemoryChatOpenAIinitialize_agentAgentTypePythonREPLpython_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )]llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,)    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)agent_chain.run(input="Hello!")agent_chain.run(input="Who owns Twitter?")agent_chain.run(input="My name is Bob.")agent_chain.run(input="Who am I?")PreviousCassandra Chat Message HistoryNextEntity Memory with SQLite storageDynamoDBChatMessageHistoryDynamoDBChatMessageHistory with Custom Endpoint URLDynamoDBChatMessageHistory With Different Keys Composite KeysPrimary Key NameComposite KeysAgent with DynamoDB Memory IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMotörhead MemoryMotörhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsMemoryDynamodb Chat Message HistoryOn this pageDynamodb Chat Message HistoryThis notebook goes over how to use Dynamodb to store chat message history.First make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3.Next, create the DynamoDB Table where we will be storing messages:import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count)    0DynamoDBChatMessageHistory​from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?")API Reference:DynamoDBChatMessageHistoryhistory.messages    [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]DynamoDBChatMessageHistory with Custom Endpoint URL​Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",)API Reference:DynamoDBChatMessageHistoryDynamoDBChatMessageHistory With Different Keys Composite Keys​The default key for DynamoDBChatMessageHistory is {"SessionId": self.session_id}, but you can modify this to match your table design.Primary Key Name​You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id}Composite Keys​When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter.Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messagesAPI Reference:DynamoDBChatMessageHistory    0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]Agent with DynamoDB Memory​from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True)API Reference:ToolConversationBufferMemoryChatOpenAIinitialize_agentAgentTypePythonREPLpython_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )]llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,)    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)agent_chain.run(input="Hello!")agent_chain.run(input="Who owns Twitter?")agent_chain.run(input="My name is Bob.")agent_chain.run(input="Who am I?")PreviousCassandra Chat Message HistoryNextEntity Memory with SQLite storageDynamoDBChatMessageHistoryDynamoDBChatMessageHistory with Custom Endpoint URLDynamoDBChatMessageHistory With Different Keys Composite KeysPrimary Key NameComposite KeysAgent with DynamoDB Memory IntegrationsMemoryDynamodb Chat Message HistoryOn this pageDynamodb Chat Message HistoryThis notebook goes over how to use Dynamodb to store chat message history.First make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3.Next, create the DynamoDB Table where we will be storing messages:import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count)    0DynamoDBChatMessageHistory​from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?")API Reference:DynamoDBChatMessageHistoryhistory.messages    [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]DynamoDBChatMessageHistory with Custom Endpoint URL​Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",)API Reference:DynamoDBChatMessageHistoryDynamoDBChatMessageHistory With Different Keys Composite Keys​The default key for DynamoDBChatMessageHistory is {"SessionId": self.session_id}, but you can modify this to match your table design.Primary Key Name​You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id}Composite Keys​When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter.Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messagesAPI Reference:DynamoDBChatMessageHistory    0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]Agent with DynamoDB Memory​from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True)API Reference:ToolConversationBufferMemoryChatOpenAIinitialize_agentAgentTypePythonREPLpython_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )]llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,)    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)agent_chain.run(input="Hello!")agent_chain.run(input="Who owns Twitter?")agent_chain.run(input="My name is Bob.")agent_chain.run(input="Who am I?")PreviousCassandra Chat Message HistoryNextEntity Memory with SQLite storage IntegrationsMemoryDynamodb Chat Message HistoryOn this pageDynamodb Chat Message HistoryThis notebook goes over how to use Dynamodb to store chat message history.First make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3.Next, create the DynamoDB Table where we will be storing messages:import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count)    0DynamoDBChatMessageHistory​from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?")API Reference:DynamoDBChatMessageHistoryhistory.messages    [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]DynamoDBChatMessageHistory with Custom Endpoint URL​Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",)API Reference:DynamoDBChatMessageHistoryDynamoDBChatMessageHistory With Different Keys Composite Keys​The default key for DynamoDBChatMessageHistory is {"SessionId": self.session_id}, but you can modify this to match your table design.Primary Key Name​You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id}Composite Keys​When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter.Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messagesAPI Reference:DynamoDBChatMessageHistory    0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]Agent with DynamoDB Memory​from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True)API Reference:ToolConversationBufferMemoryChatOpenAIinitialize_agentAgentTypePythonREPLpython_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )]llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,)    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)agent_chain.run(input="Hello!")agent_chain.run(input="Who owns Twitter?")agent_chain.run(input="My name is Bob.")agent_chain.run(input="Who am I?")PreviousCassandra Chat Message HistoryNextEntity Memory with SQLite storage On this page Dynamodb Chat Message HistoryThis notebook goes over how to use Dynamodb to store chat message history.First make sure you have correctly configured the AWS CLI. Then make sure you have installed boto3.Next, create the DynamoDB Table where we will be storing messages:import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count)    0DynamoDBChatMessageHistory​from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?")API Reference:DynamoDBChatMessageHistoryhistory.messages    [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]DynamoDBChatMessageHistory with Custom Endpoint URL​Sometimes it is useful to specify the URL to the AWS endpoint to connect to. For instance, when you are running locally against Localstack. For those cases you can specify the URL via the endpoint_url parameter in the constructor.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",)API Reference:DynamoDBChatMessageHistoryDynamoDBChatMessageHistory With Different Keys Composite Keys​The default key for DynamoDBChatMessageHistory is {"SessionId": self.session_id}, but you can modify this to match your table design.Primary Key Name​You may modify the primary key by passing in a primary_key_name value in the constructor, resulting in the following: {self.primary_key_name: self.session_id}Composite Keys​When using an existing DynamoDB table, you may need to modify the key structure from the default of to something including a Sort Key. To do this you may use the key parameter.Passing a value for key will override the primary_key parameter, and the resulting key structure will be the passed value.from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messagesAPI Reference:DynamoDBChatMessageHistory    0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]Agent with DynamoDB Memory​from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True)API Reference:ToolConversationBufferMemoryChatOpenAIinitialize_agentAgentTypePythonREPLpython_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )]llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,)    ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)agent_chain.run(input="Hello!")agent_chain.run(input="Who owns Twitter?")agent_chain.run(input="My name is Bob.")agent_chain.run(input="Who am I?") import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count) import boto3# Get the service resource.dynamodb = boto3.resource("dynamodb")# Create the DynamoDB table.table = dynamodb.create_table(    TableName="SessionTable",    KeySchema=[{"AttributeName": "SessionId", "KeyType": "HASH"}],    AttributeDefinitions=[{"AttributeName": "SessionId", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.table.meta.client.get_waiter("table_exists").wait(TableName="SessionTable")# Print out some data about the table.print(table.item_count)      0     0     0  from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?") from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="0")history.add_user_message("hi!")history.add_ai_message("whats up?")  API Reference:DynamoDBChatMessageHistory history.messages history.messages      [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]     [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]     [HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False),     HumanMessage(content='hi!', additional_kwargs={}, example=False),     AIMessage(content='whats up?', additional_kwargs={}, example=False)]  from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",) from langchain.memory.chat_message_histories import DynamoDBChatMessageHistoryhistory = DynamoDBChatMessageHistory(    table_name="SessionTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",)  API Reference:DynamoDBChatMessageHistory from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messages from langchain.memory.chat_message_histories import DynamoDBChatMessageHistorycomposite_table = dynamodb.create_table(    TableName="CompositeTable",    KeySchema=[{"AttributeName": "PK", "KeyType": "HASH"}, {"AttributeName": "SK", "KeyType": "RANGE"}],    AttributeDefinitions=[{"AttributeName": "PK", "AttributeType": "S"}, {"AttributeName": "SK", "AttributeType": "S"}],    BillingMode="PAY_PER_REQUEST",)# Wait until the table exists.composite_table.meta.client.get_waiter("table_exists").wait(TableName="CompositeTable")# Print out some data about the table.print(composite_table.item_count)my_key = {    "PK": "session_id::0",    "SK":  "langchain_history",}composite_key_history = DynamoDBChatMessageHistory(    table_name="CompositeTable",    session_id="0",    endpoint_url="http://localhost.localstack.cloud:4566",    key=my_key,)composite_key_history.add_user_message("hello, composite dynamodb table!")composite_key_history.messages  API Reference:DynamoDBChatMessageHistory     0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]     0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]     0    [HumanMessage(content='hello, composite dynamodb table!', additional_kwargs={}, example=False)]  from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True) from langchain.agents import Toolfrom langchain.memory import ConversationBufferMemoryfrom langchain.chat_models import ChatOpenAIfrom langchain.agents import initialize_agentfrom langchain.agents import AgentTypefrom langchain.utilities import PythonREPLfrom getpass import getpassmessage_history = DynamoDBChatMessageHistory(table_name="SessionTable", session_id="1")memory = ConversationBufferMemory(    memory_key="chat_history", chat_memory=message_history, return_messages=True)  API Reference:ToolConversationBufferMemoryChatOpenAIinitialize_agentAgentTypePythonREPL python_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )] python_repl = PythonREPL()# You can create the tool to pass to an agenttools = [    Tool(        name="python_repl",        description="A Python shell. Use this to execute python commands. Input should be a valid python command. If you want to see the output of a value, you should print it out with `print(...)`.",        func=python_repl.run,    )]  llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,) llm = ChatOpenAI(temperature=0)agent_chain = initialize_agent(    tools,    llm,    agent=AgentType.CHAT_CONVERSATIONAL_REACT_DESCRIPTION,    verbose=True,    memory=memory,)      ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)     ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)     ---------------------------------------------------------------------------    ValidationError                           Traceback (most recent call last)    Cell In[17], line 1    ----> 1 llm = ChatOpenAI(temperature=0)          2 agent_chain = initialize_agent(          3     tools,          4     llm,       (...)          7     memory=memory,          8 )    File ~/Documents/projects/langchain/libs/langchain/langchain/load/serializable.py:74, in Serializable.__init__(self, **kwargs)         73 def __init__(self, **kwargs: Any) -> None:    ---> 74     super().__init__(**kwargs)         75     self._lc_kwargs = kwargs    File ~/Documents/projects/langchain/.venv/lib/python3.9/site-packages/pydantic/main.py:341, in pydantic.main.BaseModel.__init__()    ValidationError: 1 validation error for ChatOpenAI    __root__      Did not find openai_api_key, please add an environment variable `OPENAI_API_KEY` which contains it, or pass  `openai_api_key` as a named parameter. (type=value_error)  agent_chain.run(input="Hello!") agent_chain.run(input="Hello!")  agent_chain.run(input="Who owns Twitter?") agent_chain.run(input="Who owns Twitter?")  agent_chain.run(input="My name is Bob.") agent_chain.run(input="My name is Bob.")  agent_chain.run(input="Who am I?") agent_chain.run(input="Who am I?")  Previous Cassandra Chat Message History Next Entity Memory with SQLite storage DynamoDBChatMessageHistoryDynamoDBChatMessageHistory with Custom Endpoint URLDynamoDBChatMessageHistory With Different Keys Composite KeysPrimary Key NameComposite KeysAgent with DynamoDB Memory DynamoDBChatMessageHistoryDynamoDBChatMessageHistory with Custom Endpoint URLDynamoDBChatMessageHistory With Different Keys Composite KeysPrimary Key NameComposite KeysAgent with DynamoDB Memory CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright © 2023 LangChain, Inc. Copyright © 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) 🦜️🔗 LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Cassandra Chat Message History (/docs/integrations/memory/cassandra_chat_message_history) Dynamodb Chat Message History (/docs/integrations/memory/dynamodb_chat_message_history) Entity Memory with SQLite storage (/docs/integrations/memory/entity_memory_with_sqlite) Momento Chat Message History (/docs/integrations/memory/momento_chat_message_history) Mongodb Chat Message History (/docs/integrations/memory/mongodb_chat_message_history) Motörhead Memory (/docs/integrations/memory/motorhead_memory) Motörhead Memory (Managed) (/docs/integrations/memory/motorhead_memory_managed) Postgres Chat Message History (/docs/integrations/memory/postgres_chat_message_history) Redis Chat Message History (/docs/integrations/memory/redis_chat_message_history) Rockset Chat Message History (/docs/integrations/memory/rockset_chat_message_history) SQL Chat Message History (/docs/integrations/memory/sql_chat_message_history) Streamlit Chat Message History (/docs/integrations/memory/streamlit_chat_message_history) Xata chat memory (/docs/integrations/memory/xata_chat_message_history) Zep Memory (/docs/integrations/memory/zep_memory) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Memory (/docs/integrations/memory/) AWS CLI (https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html) ​ (#dynamodbchatmessagehistory) DynamoDBChatMessageHistory (https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.dynamodb.DynamoDBChatMessageHistory.html) ​ (#dynamodbchatmessagehistory-with-custom-endpoint-url) Localstack (https://localstack.cloud/) DynamoDBChatMessageHistory (https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.dynamodb.DynamoDBChatMessageHistory.html) ​ (#dynamodbchatmessagehistory-with-different-keys-composite-keys) ​ (#primary-key-name) ​ (#composite-keys) DynamoDBChatMessageHistory (https://api.python.langchain.com/en/latest/memory/langchain.memory.chat_message_histories.dynamodb.DynamoDBChatMessageHistory.html) ​ (#agent-with-dynamodb-memory) Tool (https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html) ConversationBufferMemory (https://api.python.langchain.com/en/latest/memory/langchain.memory.buffer.ConversationBufferMemory.html) ChatOpenAI (https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html) initialize_agent (https://api.python.langchain.com/en/latest/agents/langchain.agents.initialize.initialize_agent.html) AgentType (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html) PythonREPL (https://api.python.langchain.com/en/latest/utilities/langchain.utilities.python.PythonREPL.html) PreviousCassandra Chat Message History (/docs/integrations/memory/cassandra_chat_message_history) NextEntity Memory with SQLite storage (/docs/integrations/memory/entity_memory_with_sqlite) DynamoDBChatMessageHistory (#dynamodbchatmessagehistory) DynamoDBChatMessageHistory with Custom Endpoint URL (#dynamodbchatmessagehistory-with-custom-endpoint-url) DynamoDBChatMessageHistory With Different Keys Composite Keys (#dynamodbchatmessagehistory-with-different-keys-composite-keys) Primary Key Name (#primary-key-name) Composite Keys (#composite-keys) Agent with DynamoDB Memory (#agent-with-dynamodb-memory) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)