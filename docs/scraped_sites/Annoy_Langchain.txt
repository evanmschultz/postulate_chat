Annoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data. This notebook shows how to use functionality related to the Annoy vector database. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores Annoy HuggingFaceEmbeddings Annoy TextLoader CharacterTextSplitter Document InMemoryDocstore Create VectorStore from texts Create VectorStore from docs Create VectorStore via existing embeddings Search via embeddings Search via docstore id Save and load Construct from scratch Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesAnnoyOn this pageAnnoyAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.This notebook shows how to use functionality related to the Annoy vector database.NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!#!pip install annoyCreate VectorStore from texts‚Äãfrom langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()API Reference:HuggingFaceEmbeddingsAnnoytexts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)vector_store.similarity_search("food", k=3)    [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]# the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Create VectorStore from docs‚Äãfrom langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderCharacterTextSplitterdocs[:5]    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)print(docs[0].page_content[:100])    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights AcCreate VectorStore via existing embeddings‚Äãembs = embeddings_func.embed_documents(texts)data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)vector_store_from_embeddings.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Search via embeddings‚Äãmotorbike_emb = embeddings_func.embed_query("motorbike")vector_store.similarity_search_by_vector(motorbike_emb, k=3)    [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)    [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]Search via docstore id‚Äãvector_store.index_to_docstore_id    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]    Document(page_content='pizza is great', metadata={})# same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Save and load‚Äãvector_store.save_local("my_annoy_index_and_docstore")    saving configloaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)# same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Construct from scratch‚Äãimport uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)API Reference:DocumentInMemoryDocstoredb_manually.similarity_search_with_score("eating!", k=3)    [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]PreviousAnalyticDBNextAtlasCreate VectorStore from textsCreate VectorStore from docsCreate VectorStore via existing embeddingsSearch via embeddingsSearch via docstore idSave and loadConstruct from scratchCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesAnnoyOn this pageAnnoyAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.This notebook shows how to use functionality related to the Annoy vector database.NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!#!pip install annoyCreate VectorStore from texts‚Äãfrom langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()API Reference:HuggingFaceEmbeddingsAnnoytexts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)vector_store.similarity_search("food", k=3)    [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]# the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Create VectorStore from docs‚Äãfrom langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderCharacterTextSplitterdocs[:5]    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)print(docs[0].page_content[:100])    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights AcCreate VectorStore via existing embeddings‚Äãembs = embeddings_func.embed_documents(texts)data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)vector_store_from_embeddings.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Search via embeddings‚Äãmotorbike_emb = embeddings_func.embed_query("motorbike")vector_store.similarity_search_by_vector(motorbike_emb, k=3)    [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)    [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]Search via docstore id‚Äãvector_store.index_to_docstore_id    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]    Document(page_content='pizza is great', metadata={})# same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Save and load‚Äãvector_store.save_local("my_annoy_index_and_docstore")    saving configloaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)# same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Construct from scratch‚Äãimport uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)API Reference:DocumentInMemoryDocstoredb_manually.similarity_search_with_score("eating!", k=3)    [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]PreviousAnalyticDBNextAtlasCreate VectorStore from textsCreate VectorStore from docsCreate VectorStore via existing embeddingsSearch via embeddingsSearch via docstore idSave and loadConstruct from scratch IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesAnnoyOn this pageAnnoyAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.This notebook shows how to use functionality related to the Annoy vector database.NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!#!pip install annoyCreate VectorStore from texts‚Äãfrom langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()API Reference:HuggingFaceEmbeddingsAnnoytexts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)vector_store.similarity_search("food", k=3)    [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]# the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Create VectorStore from docs‚Äãfrom langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderCharacterTextSplitterdocs[:5]    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)print(docs[0].page_content[:100])    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights AcCreate VectorStore via existing embeddings‚Äãembs = embeddings_func.embed_documents(texts)data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)vector_store_from_embeddings.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Search via embeddings‚Äãmotorbike_emb = embeddings_func.embed_query("motorbike")vector_store.similarity_search_by_vector(motorbike_emb, k=3)    [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)    [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]Search via docstore id‚Äãvector_store.index_to_docstore_id    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]    Document(page_content='pizza is great', metadata={})# same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Save and load‚Äãvector_store.save_local("my_annoy_index_and_docstore")    saving configloaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)# same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Construct from scratch‚Äãimport uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)API Reference:DocumentInMemoryDocstoredb_manually.similarity_search_with_score("eating!", k=3)    [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]PreviousAnalyticDBNextAtlasCreate VectorStore from textsCreate VectorStore from docsCreate VectorStore via existing embeddingsSearch via embeddingsSearch via docstore idSave and loadConstruct from scratch IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesAnnoyOn this pageAnnoyAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.This notebook shows how to use functionality related to the Annoy vector database.NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!#!pip install annoyCreate VectorStore from texts‚Äãfrom langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()API Reference:HuggingFaceEmbeddingsAnnoytexts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)vector_store.similarity_search("food", k=3)    [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]# the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Create VectorStore from docs‚Äãfrom langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderCharacterTextSplitterdocs[:5]    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)print(docs[0].page_content[:100])    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights AcCreate VectorStore via existing embeddings‚Äãembs = embeddings_func.embed_documents(texts)data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)vector_store_from_embeddings.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Search via embeddings‚Äãmotorbike_emb = embeddings_func.embed_query("motorbike")vector_store.similarity_search_by_vector(motorbike_emb, k=3)    [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)    [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]Search via docstore id‚Äãvector_store.index_to_docstore_id    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]    Document(page_content='pizza is great', metadata={})# same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Save and load‚Äãvector_store.save_local("my_annoy_index_and_docstore")    saving configloaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)# same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Construct from scratch‚Äãimport uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)API Reference:DocumentInMemoryDocstoredb_manually.similarity_search_with_score("eating!", k=3)    [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]PreviousAnalyticDBNextAtlasCreate VectorStore from textsCreate VectorStore from docsCreate VectorStore via existing embeddingsSearch via embeddingsSearch via docstore idSave and loadConstruct from scratch IntegrationsVector storesAnnoyOn this pageAnnoyAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.This notebook shows how to use functionality related to the Annoy vector database.NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!#!pip install annoyCreate VectorStore from texts‚Äãfrom langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()API Reference:HuggingFaceEmbeddingsAnnoytexts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)vector_store.similarity_search("food", k=3)    [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]# the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Create VectorStore from docs‚Äãfrom langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderCharacterTextSplitterdocs[:5]    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)print(docs[0].page_content[:100])    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights AcCreate VectorStore via existing embeddings‚Äãembs = embeddings_func.embed_documents(texts)data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)vector_store_from_embeddings.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Search via embeddings‚Äãmotorbike_emb = embeddings_func.embed_query("motorbike")vector_store.similarity_search_by_vector(motorbike_emb, k=3)    [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)    [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]Search via docstore id‚Äãvector_store.index_to_docstore_id    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]    Document(page_content='pizza is great', metadata={})# same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Save and load‚Äãvector_store.save_local("my_annoy_index_and_docstore")    saving configloaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)# same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Construct from scratch‚Äãimport uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)API Reference:DocumentInMemoryDocstoredb_manually.similarity_search_with_score("eating!", k=3)    [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]PreviousAnalyticDBNextAtlasCreate VectorStore from textsCreate VectorStore from docsCreate VectorStore via existing embeddingsSearch via embeddingsSearch via docstore idSave and loadConstruct from scratch IntegrationsVector storesAnnoyOn this pageAnnoyAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.This notebook shows how to use functionality related to the Annoy vector database.NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!#!pip install annoyCreate VectorStore from texts‚Äãfrom langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()API Reference:HuggingFaceEmbeddingsAnnoytexts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)vector_store.similarity_search("food", k=3)    [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]# the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Create VectorStore from docs‚Äãfrom langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderCharacterTextSplitterdocs[:5]    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)print(docs[0].page_content[:100])    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights AcCreate VectorStore via existing embeddings‚Äãembs = embeddings_func.embed_documents(texts)data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)vector_store_from_embeddings.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Search via embeddings‚Äãmotorbike_emb = embeddings_func.embed_query("motorbike")vector_store.similarity_search_by_vector(motorbike_emb, k=3)    [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)    [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]Search via docstore id‚Äãvector_store.index_to_docstore_id    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]    Document(page_content='pizza is great', metadata={})# same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Save and load‚Äãvector_store.save_local("my_annoy_index_and_docstore")    saving configloaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)# same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Construct from scratch‚Äãimport uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)API Reference:DocumentInMemoryDocstoredb_manually.similarity_search_with_score("eating!", k=3)    [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]PreviousAnalyticDBNextAtlas IntegrationsVector storesAnnoyOn this pageAnnoyAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.This notebook shows how to use functionality related to the Annoy vector database.NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!#!pip install annoyCreate VectorStore from texts‚Äãfrom langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()API Reference:HuggingFaceEmbeddingsAnnoytexts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)vector_store.similarity_search("food", k=3)    [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]# the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Create VectorStore from docs‚Äãfrom langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderCharacterTextSplitterdocs[:5]    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)print(docs[0].page_content[:100])    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights AcCreate VectorStore via existing embeddings‚Äãembs = embeddings_func.embed_documents(texts)data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)vector_store_from_embeddings.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Search via embeddings‚Äãmotorbike_emb = embeddings_func.embed_query("motorbike")vector_store.similarity_search_by_vector(motorbike_emb, k=3)    [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)    [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]Search via docstore id‚Äãvector_store.index_to_docstore_id    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]    Document(page_content='pizza is great', metadata={})# same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Save and load‚Äãvector_store.save_local("my_annoy_index_and_docstore")    saving configloaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)# same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Construct from scratch‚Äãimport uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)API Reference:DocumentInMemoryDocstoredb_manually.similarity_search_with_score("eating!", k=3)    [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]PreviousAnalyticDBNextAtlas On this page AnnoyAnnoy (Approximate Nearest Neighbors Oh Yeah) is a C++ library with Python bindings to search for points in space that are close to a given query point. It also creates large read-only file-based data structures that are mmapped into memory so that many processes may share the same data.This notebook shows how to use functionality related to the Annoy vector database.NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!#!pip install annoyCreate VectorStore from texts‚Äãfrom langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()API Reference:HuggingFaceEmbeddingsAnnoytexts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)# allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)vector_store.similarity_search("food", k=3)    [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]# the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Create VectorStore from docs‚Äãfrom langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderCharacterTextSplitterdocs[:5]    [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)print(docs[0].page_content[:100])    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights AcCreate VectorStore via existing embeddings‚Äãembs = embeddings_func.embed_documents(texts)data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)vector_store_from_embeddings.similarity_search_with_score("food", k=3)    [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]Search via embeddings‚Äãmotorbike_emb = embeddings_func.embed_query("motorbike")vector_store.similarity_search_by_vector(motorbike_emb, k=3)    [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)    [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]Search via docstore id‚Äãvector_store.index_to_docstore_id    {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]    Document(page_content='pizza is great', metadata={})# same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Save and load‚Äãvector_store.save_local("my_annoy_index_and_docstore")    saving configloaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)# same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)    [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]Construct from scratch‚Äãimport uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)API Reference:DocumentInMemoryDocstoredb_manually.similarity_search_with_score("eating!", k=3)    [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)] NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative! NOTE: Annoy is read-only - once the index is built you cannot add any more emebddings!If you want to progressively add new entries to your VectorStore then better choose an alternative!  #!pip install annoy #!pip install annoy  from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings() from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.vectorstores import Annoyembeddings_func = HuggingFaceEmbeddings()  API Reference:HuggingFaceEmbeddingsAnnoy texts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func) texts = ["pizza is great", "I love salad", "my car", "a dog"]# default metric is angularvector_store = Annoy.from_texts(texts, embeddings_func)  # allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1) # allows for custom annoy parameters, defaults are n_trees=100, n_jobs=-1, metric="angular"vector_store_v2 = Annoy.from_texts(    texts, embeddings_func, metric="dot", n_trees=100, n_jobs=1)  vector_store.similarity_search("food", k=3) vector_store.similarity_search("food", k=3)      [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]     [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]     [Document(page_content='pizza is great', metadata={}),     Document(page_content='I love salad', metadata={}),     Document(page_content='my car', metadata={})]  # the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3) # the score is a distance metric, so lower is bettervector_store.similarity_search_with_score("food", k=3)      [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]     [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]     [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]  from langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents) from langchain.document_loaders import TextLoaderfrom langchain.text_splitter import CharacterTextSplitterloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)  API Reference:TextLoaderCharacterTextSplitter docs[:5] docs[:5]      [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]     [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]     [Document(page_content='Madam Speaker, Madam Vice President, our First Lady and Second Gentleman. Members of Congress and the Cabinet. Justices of the Supreme Court. My fellow Americans.  \n\nLast year COVID-19 kept us apart. This year we are finally together again. \n\nTonight, we meet as Democrats Republicans and Independents. But most importantly as Americans. \n\nWith a duty to one another to the American people to the Constitution. \n\nAnd with an unwavering resolve that freedom will always triumph over tyranny. \n\nSix days ago, Russia‚Äôs Vladimir Putin sought to shake the foundations of the free world thinking he could make it bend to his menacing ways. But he badly miscalculated. \n\nHe thought he could roll into Ukraine and the world would roll over. Instead he met a wall of strength he never imagined. \n\nHe met the Ukrainian people. \n\nFrom President Zelenskyy to every Ukrainian, their fearlessness, their courage, their determination, inspires the world.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Groups of citizens blocking tanks with their bodies. Everyone from students to retirees teachers turned soldiers defending their homeland. \n\nIn this struggle as President Zelenskyy said in his speech to the European Parliament ‚ÄúLight will win over darkness.‚Äù The Ukrainian Ambassador to the United States is here tonight. \n\nLet each of us here tonight in this Chamber send an unmistakable signal to Ukraine and to the world. \n\nPlease rise if you are able and show that, Yes, we the United States of America stand with the Ukrainian people. \n\nThroughout our history we‚Äôve learned this lesson when dictators do not pay a price for their aggression they cause more chaos.   \n\nThey keep moving.   \n\nAnd the costs and the threats to America and the world keep rising.   \n\nThat‚Äôs why the NATO Alliance was created to secure peace and stability in Europe after World War 2. \n\nThe United States is a member along with 29 other nations. \n\nIt matters. American diplomacy matters. American resolve matters.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='Putin‚Äôs latest attack on Ukraine was premeditated and unprovoked. \n\nHe rejected repeated efforts at diplomacy. \n\nHe thought the West and NATO wouldn‚Äôt respond. And he thought he could divide us at home. Putin was wrong. We were ready.  Here is what we did.   \n\nWe prepared extensively and carefully. \n\nWe spent months building a coalition of other freedom-loving nations from Europe and the Americas to Asia and Africa to confront Putin. \n\nI spent countless hours unifying our European allies. We shared with the world in advance what we knew Putin was planning and precisely how he would try to falsely justify his aggression.  \n\nWe countered Russia‚Äôs lies with truth.   \n\nAnd now that he has acted the free world is holding him accountable. \n\nAlong with twenty-seven members of the European Union including France, Germany, Italy, as well as countries like the United Kingdom, Canada, Japan, Korea, Australia, New Zealand, and many others, even Switzerland.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='We are inflicting pain on Russia and supporting the people of Ukraine. Putin is now isolated from the world more than ever. \n\nTogether with our allies ‚Äìwe are right now enforcing powerful economic sanctions. \n\nWe are cutting off Russia‚Äôs largest banks from the international financial system.  \n\nPreventing Russia‚Äôs central bank from defending the Russian Ruble making Putin‚Äôs $630 Billion ‚Äúwar fund‚Äù worthless.   \n\nWe are choking off Russia‚Äôs access to technology that will sap its economic strength and weaken its military for years to come.  \n\nTonight I say to the Russian oligarchs and corrupt leaders who have bilked billions of dollars off this violent regime no more. \n\nThe U.S. Department of Justice is assembling a dedicated task force to go after the crimes of Russian oligarchs.  \n\nWe are joining with our European allies to find and seize your yachts your luxury apartments your private jets. We are coming for your ill-begotten gains.', metadata={'source': '../../../state_of_the_union.txt'}),     Document(page_content='And tonight I am announcing that we will join our allies in closing off American air space to all Russian flights ‚Äì further isolating Russia ‚Äì and adding an additional squeeze ‚Äìon their economy. The Ruble has lost 30% of its value. \n\nThe Russian stock market has lost 40% of its value and trading remains suspended. Russia‚Äôs economy is reeling and Putin alone is to blame. \n\nTogether with our allies we are providing support to the Ukrainians in their fight for freedom. Military assistance. Economic assistance. Humanitarian assistance. \n\nWe are giving more than $1 Billion in direct assistance to Ukraine. \n\nAnd we will continue to aid the Ukrainian people as they defend their country and to help ease their suffering.  \n\nLet me be clear, our forces are not engaged and will not engage in conflict with Russian forces in Ukraine.  \n\nOur forces are not going to Europe to fight in Ukraine, but to defend our NATO Allies ‚Äì in the event that Putin decides to keep moving west.', metadata={'source': '../../../state_of_the_union.txt'})]  vector_store_from_docs = Annoy.from_documents(docs, embeddings_func) vector_store_from_docs = Annoy.from_documents(docs, embeddings_func)  query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query) query = "What did the president say about Ketanji Brown Jackson"docs = vector_store_from_docs.similarity_search(query)  print(docs[0].page_content[:100]) print(docs[0].page_content[:100])      Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Ac     Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Ac     Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Ac  embs = embeddings_func.embed_documents(texts) embs = embeddings_func.embed_documents(texts)  data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func) data = list(zip(texts, embs))vector_store_from_embeddings = Annoy.from_embeddings(data, embeddings_func)  vector_store_from_embeddings.similarity_search_with_score("food", k=3) vector_store_from_embeddings.similarity_search_with_score("food", k=3)      [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]     [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]     [(Document(page_content='pizza is great', metadata={}), 1.0944390296936035),     (Document(page_content='I love salad', metadata={}), 1.1273186206817627),     (Document(page_content='my car', metadata={}), 1.1580758094787598)]  motorbike_emb = embeddings_func.embed_query("motorbike") motorbike_emb = embeddings_func.embed_query("motorbike")  vector_store.similarity_search_by_vector(motorbike_emb, k=3) vector_store.similarity_search_by_vector(motorbike_emb, k=3)      [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]     [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]     [Document(page_content='my car', metadata={}),     Document(page_content='a dog', metadata={}),     Document(page_content='pizza is great', metadata={})]  vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3) vector_store.similarity_search_with_score_by_vector(motorbike_emb, k=3)      [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]     [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]     [(Document(page_content='my car', metadata={}), 1.0870471000671387),     (Document(page_content='a dog', metadata={}), 1.2095637321472168),     (Document(page_content='pizza is great', metadata={}), 1.3254905939102173)]  vector_store.index_to_docstore_id vector_store.index_to_docstore_id      {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}     {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}     {0: '2d1498a8-a37c-4798-acb9-0016504ed798',     1: '2d30aecc-88e0-4469-9d51-0ef7e9858e6d',     2: '927f1120-985b-4691-b577-ad5cb42e011c',     3: '3056ddcf-a62f-48c8-bd98-b9e57a3dfcae'}  some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]] some_docstore_id = 0  # texts[0]vector_store.docstore._dict[vector_store.index_to_docstore_id[some_docstore_id]]      Document(page_content='pizza is great', metadata={})     Document(page_content='pizza is great', metadata={})     Document(page_content='pizza is great', metadata={})  # same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3) # same document has distance 0vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)      [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]     [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]     [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]  vector_store.save_local("my_annoy_index_and_docstore") vector_store.save_local("my_annoy_index_and_docstore")      saving config     saving config     saving config  loaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func) loaded_vector_store = Annoy.load_local(    "my_annoy_index_and_docstore", embeddings=embeddings_func)  # same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3) # same document has distance 0loaded_vector_store.similarity_search_with_score_by_index(some_docstore_id, k=3)      [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]     [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]     [(Document(page_content='pizza is great', metadata={}), 0.0),     (Document(page_content='I love salad', metadata={}), 1.0734446048736572),     (Document(page_content='my car', metadata={}), 1.2895267009735107)]  import uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id) import uuidfrom annoy import AnnoyIndexfrom langchain.docstore.document import Documentfrom langchain.docstore.in_memory import InMemoryDocstoremetadatas = [{"x": "food"}, {"x": "food"}, {"x": "stuff"}, {"x": "animal"}]# embeddingsembeddings = embeddings_func.embed_documents(texts)# embedding dimf = len(embeddings[0])# indexmetric = "angular"index = AnnoyIndex(f, metric=metric)for i, emb in enumerate(embeddings):    index.add_item(i, emb)index.build(10)# docstoredocuments = []for i, text in enumerate(texts):    metadata = metadatas[i] if metadatas else {}    documents.append(Document(page_content=text, metadata=metadata))index_to_docstore_id = {i: str(uuid.uuid4()) for i in range(len(documents))}docstore = InMemoryDocstore(    {index_to_docstore_id[i]: doc for i, doc in enumerate(documents)})db_manually = Annoy(    embeddings_func.embed_query, index, metric, docstore, index_to_docstore_id)  API Reference:DocumentInMemoryDocstore db_manually.similarity_search_with_score("eating!", k=3) db_manually.similarity_search_with_score("eating!", k=3)      [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]     [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]     [(Document(page_content='pizza is great', metadata={'x': 'food'}),      1.1314140558242798),     (Document(page_content='I love salad', metadata={'x': 'food'}),      1.1668788194656372),     (Document(page_content='my car', metadata={'x': 'stuff'}), 1.226445198059082)]  Previous AnalyticDB Next Atlas Create VectorStore from textsCreate VectorStore from docsCreate VectorStore via existing embeddingsSearch via embeddingsSearch via docstore idSave and loadConstruct from scratch Create VectorStore from textsCreate VectorStore from docsCreate VectorStore via existing embeddingsSearch via embeddingsSearch via docstore idSave and loadConstruct from scratch CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) Annoy (https://github.com/spotify/annoy) ‚Äã (#create-vectorstore-from-texts) HuggingFaceEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.HuggingFaceEmbeddings.html) Annoy (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.annoy.Annoy.html) ‚Äã (#create-vectorstore-from-docs) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) ‚Äã (#create-vectorstore-via-existing-embeddings) ‚Äã (#search-via-embeddings) ‚Äã (#search-via-docstore-id) ‚Äã (#save-and-load) ‚Äã (#construct-from-scratch) Document (https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html) InMemoryDocstore (https://api.python.langchain.com/en/latest/docstore/langchain.docstore.in_memory.InMemoryDocstore.html) PreviousAnalyticDB (/docs/integrations/vectorstores/analyticdb) NextAtlas (/docs/integrations/vectorstores/atlas) Create VectorStore from texts (#create-vectorstore-from-texts) Create VectorStore from docs (#create-vectorstore-from-docs) Create VectorStore via existing embeddings (#create-vectorstore-via-existing-embeddings) Search via embeddings (#search-via-embeddings) Search via docstore id (#search-via-docstore-id) Save and load (#save-and-load) Construct from scratch (#construct-from-scratch) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)