Atlas is a platform by Nomic made for interacting with both small and internet scale unstructured datasets. It enables anyone to visualize, search, and share massive datasets in their browser. This notebook shows you how to use functionality related to the AtlasDB vectorstore. Here is a map with the result of this code. This map displays the texts of the State of the Union. https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647 IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores Atlas OpenAIEmbeddings SpacyTextSplitter AtlasDB TextLoader Load Packages Prepare the Data Map the Data using Nomic's Atlas Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesAtlasOn this pageAtlasAtlas is a platform by Nomic made for interacting with both small and internet scale unstructured datasets. It enables anyone to visualize, search, and share massive datasets in their browser.This notebook shows you how to use functionality related to the AtlasDB vectorstore.pip install spacypython3 -m spacy download en_core_web_smpip install nomicLoad Packages‚Äãimport timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsSpacyTextSplitterAtlasDBTextLoaderATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6"Prepare the Data‚Äãloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts]Map the Data using Nomic's Atlas‚Äãdb = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},)db.project.wait_for_project_lock()db.projectHere is a map with the result of this code. This map displays the texts of the State of the Union. https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647PreviousAnnoyNextAwaDBLoad PackagesPrepare the DataMap the Data using Nomic's AtlasCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesAtlasOn this pageAtlasAtlas is a platform by Nomic made for interacting with both small and internet scale unstructured datasets. It enables anyone to visualize, search, and share massive datasets in their browser.This notebook shows you how to use functionality related to the AtlasDB vectorstore.pip install spacypython3 -m spacy download en_core_web_smpip install nomicLoad Packages‚Äãimport timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsSpacyTextSplitterAtlasDBTextLoaderATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6"Prepare the Data‚Äãloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts]Map the Data using Nomic's Atlas‚Äãdb = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},)db.project.wait_for_project_lock()db.projectHere is a map with the result of this code. This map displays the texts of the State of the Union. https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647PreviousAnnoyNextAwaDBLoad PackagesPrepare the DataMap the Data using Nomic's Atlas IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesAtlasOn this pageAtlasAtlas is a platform by Nomic made for interacting with both small and internet scale unstructured datasets. It enables anyone to visualize, search, and share massive datasets in their browser.This notebook shows you how to use functionality related to the AtlasDB vectorstore.pip install spacypython3 -m spacy download en_core_web_smpip install nomicLoad Packages‚Äãimport timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsSpacyTextSplitterAtlasDBTextLoaderATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6"Prepare the Data‚Äãloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts]Map the Data using Nomic's Atlas‚Äãdb = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},)db.project.wait_for_project_lock()db.projectHere is a map with the result of this code. This map displays the texts of the State of the Union. https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647PreviousAnnoyNextAwaDBLoad PackagesPrepare the DataMap the Data using Nomic's Atlas IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesAtlasOn this pageAtlasAtlas is a platform by Nomic made for interacting with both small and internet scale unstructured datasets. It enables anyone to visualize, search, and share massive datasets in their browser.This notebook shows you how to use functionality related to the AtlasDB vectorstore.pip install spacypython3 -m spacy download en_core_web_smpip install nomicLoad Packages‚Äãimport timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsSpacyTextSplitterAtlasDBTextLoaderATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6"Prepare the Data‚Äãloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts]Map the Data using Nomic's Atlas‚Äãdb = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},)db.project.wait_for_project_lock()db.projectHere is a map with the result of this code. This map displays the texts of the State of the Union. https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647PreviousAnnoyNextAwaDBLoad PackagesPrepare the DataMap the Data using Nomic's Atlas IntegrationsVector storesAtlasOn this pageAtlasAtlas is a platform by Nomic made for interacting with both small and internet scale unstructured datasets. It enables anyone to visualize, search, and share massive datasets in their browser.This notebook shows you how to use functionality related to the AtlasDB vectorstore.pip install spacypython3 -m spacy download en_core_web_smpip install nomicLoad Packages‚Äãimport timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsSpacyTextSplitterAtlasDBTextLoaderATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6"Prepare the Data‚Äãloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts]Map the Data using Nomic's Atlas‚Äãdb = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},)db.project.wait_for_project_lock()db.projectHere is a map with the result of this code. This map displays the texts of the State of the Union. https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647PreviousAnnoyNextAwaDB IntegrationsVector storesAtlasOn this pageAtlasAtlas is a platform by Nomic made for interacting with both small and internet scale unstructured datasets. It enables anyone to visualize, search, and share massive datasets in their browser.This notebook shows you how to use functionality related to the AtlasDB vectorstore.pip install spacypython3 -m spacy download en_core_web_smpip install nomicLoad Packages‚Äãimport timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsSpacyTextSplitterAtlasDBTextLoaderATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6"Prepare the Data‚Äãloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts]Map the Data using Nomic's Atlas‚Äãdb = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},)db.project.wait_for_project_lock()db.projectHere is a map with the result of this code. This map displays the texts of the State of the Union. https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647PreviousAnnoyNextAwaDB On this page AtlasAtlas is a platform by Nomic made for interacting with both small and internet scale unstructured datasets. It enables anyone to visualize, search, and share massive datasets in their browser.This notebook shows you how to use functionality related to the AtlasDB vectorstore.pip install spacypython3 -m spacy download en_core_web_smpip install nomicLoad Packages‚Äãimport timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsSpacyTextSplitterAtlasDBTextLoaderATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6"Prepare the Data‚Äãloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts]Map the Data using Nomic's Atlas‚Äãdb = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},)db.project.wait_for_project_lock()db.projectHere is a map with the result of this code. This map displays the texts of the State of the Union. https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647 pip install spacy pip install spacy  python3 -m spacy download en_core_web_sm python3 -m spacy download en_core_web_sm  pip install nomic pip install nomic  import timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoader import timefrom langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import SpacyTextSplitterfrom langchain.vectorstores import AtlasDBfrom langchain.document_loaders import TextLoader  API Reference:OpenAIEmbeddingsSpacyTextSplitterAtlasDBTextLoader ATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6" ATLAS_TEST_API_KEY = "7xDPkYXSYDc1_ErdTPIcoAR9RNd8YDlkS3nVNXcVoIMZ6"  loader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts] loader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = SpacyTextSplitter(separator="|")texts = []for doc in text_splitter.split_documents(documents):    texts.extend(doc.page_content.split("|"))texts = [e.strip() for e in texts]  db = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},) db = AtlasDB.from_texts(    texts=texts,    name="test_index_" + str(time.time()),  # unique name for your vector store    description="test_index",  # a description for your vector store    api_key=ATLAS_TEST_API_KEY,    index_kwargs={"build_topic_model": True},)  db.project.wait_for_project_lock() db.project.wait_for_project_lock()  db.project db.project  Previous Annoy Next AwaDB Load PackagesPrepare the DataMap the Data using Nomic's Atlas Load PackagesPrepare the DataMap the Data using Nomic's Atlas CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) Atlas (https://docs.nomic.ai/index.html) ‚Äã (#load-packages) OpenAIEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html) SpacyTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.SpacyTextSplitter.html) AtlasDB (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.atlas.AtlasDB.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) ‚Äã (#prepare-the-data) ‚Äã (#map-the-data-using-nomics-atlas) https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647 (https://atlas.nomic.ai/map/3e4de075-89ff-486a-845c-36c23f30bb67/d8ce2284-8edb-4050-8b9b-9bb543d7f647) PreviousAnnoy (/docs/integrations/vectorstores/annoy) NextAwaDB (/docs/integrations/vectorstores/awadb) Load Packages (#load-packages) Prepare the Data (#prepare-the-data) Map the Data using Nomic's Atlas (#map-the-data-using-nomics-atlas) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)