This notebook showcases an agent interacting with large JSON/dict objects. This is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question. In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find here. We will use the JSON agent to answer some questions about the API spec. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbits AINetwork Airbyte Question Answering Amadeus Azure Cognitive Services CSV Document Comparison Github Gitlab Gmail Google Drive tool Jira JSON MultiOn Office365 OpenAPI Natural Language APIs Pandas Dataframe PlayWright Browser PowerBI Dataset Python Spark Dataframe Spark SQL SQL Database Vectorstore Xorbits Tools Vector stores Grouped by provider  Integrations Agents & Toolkits JSON create_json_agent AgentExecutor JsonToolkit LLMChain OpenAI TextRequestsWrapper JsonSpec Initialization Example: getting the required POST parameters for a request Discord Twitter Python JS/TS Homepage Blog Skip to main content🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsJSONOn this pageJSONThis notebook showcases an agent interacting with large JSON/dict objects. This is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question.In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find here.We will use the JSON agent to answer some questions about the API spec.Initialization​import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpecAPI Reference:create_json_agentAgentExecutorJsonToolkitLLMChainOpenAITextRequestsWrapperJsonSpecwith open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True)Example: getting the required POST parameters for a request​json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?")            > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."PreviousJiraNextMultiOnInitializationExample: getting the required POST parameters for a requestCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. Skip to main content 🦜️🔗 LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK 🦜️🔗 LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsJSONOn this pageJSONThis notebook showcases an agent interacting with large JSON/dict objects. This is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question.In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find here.We will use the JSON agent to answer some questions about the API spec.Initialization​import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpecAPI Reference:create_json_agentAgentExecutorJsonToolkitLLMChainOpenAITextRequestsWrapperJsonSpecwith open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True)Example: getting the required POST parameters for a request​json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?")            > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."PreviousJiraNextMultiOnInitializationExample: getting the required POST parameters for a request IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsJSONOn this pageJSONThis notebook showcases an agent interacting with large JSON/dict objects. This is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question.In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find here.We will use the JSON agent to answer some questions about the API spec.Initialization​import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpecAPI Reference:create_json_agentAgentExecutorJsonToolkitLLMChainOpenAITextRequestsWrapperJsonSpecwith open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True)Example: getting the required POST parameters for a request​json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?")            > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."PreviousJiraNextMultiOnInitializationExample: getting the required POST parameters for a request IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsAgents & ToolkitsJSONOn this pageJSONThis notebook showcases an agent interacting with large JSON/dict objects. This is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question.In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find here.We will use the JSON agent to answer some questions about the API spec.Initialization​import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpecAPI Reference:create_json_agentAgentExecutorJsonToolkitLLMChainOpenAITextRequestsWrapperJsonSpecwith open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True)Example: getting the required POST parameters for a request​json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?")            > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."PreviousJiraNextMultiOnInitializationExample: getting the required POST parameters for a request IntegrationsAgents & ToolkitsJSONOn this pageJSONThis notebook showcases an agent interacting with large JSON/dict objects. This is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question.In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find here.We will use the JSON agent to answer some questions about the API spec.Initialization​import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpecAPI Reference:create_json_agentAgentExecutorJsonToolkitLLMChainOpenAITextRequestsWrapperJsonSpecwith open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True)Example: getting the required POST parameters for a request​json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?")            > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."PreviousJiraNextMultiOn IntegrationsAgents & ToolkitsJSONOn this pageJSONThis notebook showcases an agent interacting with large JSON/dict objects. This is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question.In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find here.We will use the JSON agent to answer some questions about the API spec.Initialization​import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpecAPI Reference:create_json_agentAgentExecutorJsonToolkitLLMChainOpenAITextRequestsWrapperJsonSpecwith open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True)Example: getting the required POST parameters for a request​json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?")            > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."PreviousJiraNextMultiOn On this page JSONThis notebook showcases an agent interacting with large JSON/dict objects. This is useful when you want to answer questions about a JSON blob that's too large to fit in the context window of an LLM. The agent is able to iteratively explore the blob to find what it needs to answer the user's question.In the below example, we are using the OpenAPI spec for the OpenAI API, which you can find here.We will use the JSON agent to answer some questions about the API spec.Initialization​import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpecAPI Reference:create_json_agentAgentExecutorJsonToolkitLLMChainOpenAITextRequestsWrapperJsonSpecwith open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True)Example: getting the required POST parameters for a request​json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?")            > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'." import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpec import osimport yamlfrom langchain.agents import create_json_agent, AgentExecutorfrom langchain.agents.agent_toolkits import JsonToolkitfrom langchain.chains import LLMChainfrom langchain.llms.openai import OpenAIfrom langchain.requests import TextRequestsWrapperfrom langchain.tools.json.tool import JsonSpec  API Reference:create_json_agentAgentExecutorJsonToolkitLLMChainOpenAITextRequestsWrapperJsonSpec with open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True) with open("openai_openapi.yml") as f:    data = yaml.load(f, Loader=yaml.FullLoader)json_spec = JsonSpec(dict_=data, max_value_length=4000)json_toolkit = JsonToolkit(spec=json_spec)json_agent_executor = create_json_agent(    llm=OpenAI(temperature=0), toolkit=json_toolkit, verbose=True)  json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?") json_agent_executor.run(    "What are the required parameters in the request body to the /completions endpoint?")              > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."             > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."             > Entering new AgentExecutor chain...    Action: json_spec_list_keys    Action Input: data    Observation: ['openapi', 'info', 'servers', 'tags', 'paths', 'components', 'x-oaiMeta']    Thought: I should look at the paths key to see what endpoints exist    Action: json_spec_list_keys    Action Input: data["paths"]    Observation: ['/engines', '/engines/{engine_id}', '/completions', '/edits', '/images/generations', '/images/edits', '/images/variations', '/embeddings', '/engines/{engine_id}/search', '/files', '/files/{file_id}', '/files/{file_id}/content', '/answers', '/classifications', '/fine-tunes', '/fine-tunes/{fine_tune_id}', '/fine-tunes/{fine_tune_id}/cancel', '/fine-tunes/{fine_tune_id}/events', '/models', '/models/{model}', '/moderations']    Thought: I should look at the /completions endpoint to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]    Observation: ['post']    Thought: I should look at the post key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]    Observation: ['operationId', 'tags', 'summary', 'requestBody', 'responses', 'x-oaiMeta']    Thought: I should look at the requestBody key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]    Observation: ['required', 'content']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["required"]    Observation: True    Thought: I should look at the content key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]    Observation: ['application/json']    Thought: I should look at the application/json key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]    Observation: ['schema']    Thought: I should look at the schema key to see what parameters are required    Action: json_spec_list_keys    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]    Observation: ['$ref']    Thought: I should look at the $ref key to see what parameters are required    Action: json_spec_get_value    Action Input: data["paths"]["/completions"]["post"]["requestBody"]["content"]["application/json"]["schema"]["$ref"]    Observation: #/components/schemas/CreateCompletionRequest    Thought: I should look at the CreateCompletionRequest schema to see what parameters are required    Action: json_spec_list_keys    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]    Observation: ['type', 'properties', 'required']    Thought: I should look at the required key to see what parameters are required    Action: json_spec_get_value    Action Input: data["components"]["schemas"]["CreateCompletionRequest"]["required"]    Observation: ['model']    Thought: I now know the final answer    Final Answer: The required parameters in the request body to the /completions endpoint are 'model'.        > Finished chain.    "The required parameters in the request body to the /completions endpoint are 'model'."  Previous Jira Next MultiOn InitializationExample: getting the required POST parameters for a request InitializationExample: getting the required POST parameters for a request CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright © 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright © 2023 LangChain, Inc. Copyright © 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) 🦜️🔗 LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) AINetwork (/docs/integrations/toolkits/ainetwork) Airbyte Question Answering (/docs/integrations/toolkits/airbyte_structured_qa) Amadeus (/docs/integrations/toolkits/amadeus) Azure Cognitive Services (/docs/integrations/toolkits/azure_cognitive_services) CSV (/docs/integrations/toolkits/csv) Document Comparison (/docs/integrations/toolkits/document_comparison_toolkit) Github (/docs/integrations/toolkits/github) Gitlab (/docs/integrations/toolkits/gitlab) Gmail (/docs/integrations/toolkits/gmail) Google Drive tool (/docs/integrations/toolkits/google_drive) Jira (/docs/integrations/toolkits/jira) JSON (/docs/integrations/toolkits/json) MultiOn (/docs/integrations/toolkits/multion) Office365 (/docs/integrations/toolkits/office365) OpenAPI (/docs/integrations/toolkits/openapi) Natural Language APIs (/docs/integrations/toolkits/openapi_nla) Pandas Dataframe (/docs/integrations/toolkits/pandas) PlayWright Browser (/docs/integrations/toolkits/playwright) PowerBI Dataset (/docs/integrations/toolkits/powerbi) Python (/docs/integrations/toolkits/python) Spark Dataframe (/docs/integrations/toolkits/spark) Spark SQL (/docs/integrations/toolkits/spark_sql) SQL Database (/docs/integrations/toolkits/sql_database) Vectorstore (/docs/integrations/toolkits/vectorstore) Xorbits (/docs/integrations/toolkits/xorbits) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Agents & Toolkits (/docs/integrations/toolkits/) here (https://github.com/openai/openai-openapi/blob/master/openapi.yaml) ​ (#initialization) create_json_agent (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.json.base.create_json_agent.html) AgentExecutor (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent.AgentExecutor.html) JsonToolkit (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.json.toolkit.JsonToolkit.html) LLMChain (https://api.python.langchain.com/en/latest/chains/langchain.chains.llm.LLMChain.html) OpenAI (https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html) TextRequestsWrapper (https://api.python.langchain.com/en/latest/utilities/langchain.utilities.requests.TextRequestsWrapper.html) JsonSpec (https://api.python.langchain.com/en/latest/tools/langchain.tools.json.tool.JsonSpec.html) ​ (#example-getting-the-required-post-parameters-for-a-request) PreviousJira (/docs/integrations/toolkits/jira) NextMultiOn (/docs/integrations/toolkits/multion) Initialization (#initialization) Example: getting the required POST parameters for a request (#example-getting-the-required-post-parameters-for-a-request) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)