This notebook shows how to use functionality related to the Marqo vectorstore. Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you. To run this notebook with our docker image please run the following commands first to get Marqo: One of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example: If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method. If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts. The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods. We also expose marqos weighted queries which are a powerful way to compose complex semantic searches. This section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores Marqo CharacterTextSplitter Marqo TextLoader TextLoader If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method. If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts. RetrievalQAWithSourcesChain Additional features Weighted Queries Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesMarqoOn this pageMarqoThis notebook shows how to use functionality related to the Marqo vectorstore.Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.To run this notebook with our docker image please run the following commands first to get Marqo:docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latestpip install marqofrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoaderAPI Reference:CharacterTextSplitterMarqoTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderimport marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)    Index langchain-demo exists.print(result_docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254Additional features‚ÄãOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.Multimodal Example‚Äã# use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)    {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)for doc in doc_results:    print(doc.page_content)    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpgText only example‚Äã# use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)    {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}# Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])    ['9986cc72-adcd-4080-9d74-265c173a9ec3']query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)    This is a document that is about elephantsWeighted Queries‚ÄãWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.Question Answering with SourcesThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")API Reference:RetrievalQAWithSourcesChain    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)    Index langchain-qa-with-retrieval exists.chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}PreviousLanceDBNextGoogle Vertex AI MatchingEngineAdditional featuresWeighted QueriesCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesMarqoOn this pageMarqoThis notebook shows how to use functionality related to the Marqo vectorstore.Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.To run this notebook with our docker image please run the following commands first to get Marqo:docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latestpip install marqofrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoaderAPI Reference:CharacterTextSplitterMarqoTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderimport marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)    Index langchain-demo exists.print(result_docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254Additional features‚ÄãOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.Multimodal Example‚Äã# use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)    {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)for doc in doc_results:    print(doc.page_content)    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpgText only example‚Äã# use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)    {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}# Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])    ['9986cc72-adcd-4080-9d74-265c173a9ec3']query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)    This is a document that is about elephantsWeighted Queries‚ÄãWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.Question Answering with SourcesThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")API Reference:RetrievalQAWithSourcesChain    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)    Index langchain-qa-with-retrieval exists.chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}PreviousLanceDBNextGoogle Vertex AI MatchingEngineAdditional featuresWeighted Queries IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesMarqoOn this pageMarqoThis notebook shows how to use functionality related to the Marqo vectorstore.Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.To run this notebook with our docker image please run the following commands first to get Marqo:docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latestpip install marqofrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoaderAPI Reference:CharacterTextSplitterMarqoTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderimport marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)    Index langchain-demo exists.print(result_docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254Additional features‚ÄãOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.Multimodal Example‚Äã# use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)    {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)for doc in doc_results:    print(doc.page_content)    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpgText only example‚Äã# use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)    {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}# Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])    ['9986cc72-adcd-4080-9d74-265c173a9ec3']query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)    This is a document that is about elephantsWeighted Queries‚ÄãWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.Question Answering with SourcesThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")API Reference:RetrievalQAWithSourcesChain    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)    Index langchain-qa-with-retrieval exists.chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}PreviousLanceDBNextGoogle Vertex AI MatchingEngineAdditional featuresWeighted Queries IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesMarqoOn this pageMarqoThis notebook shows how to use functionality related to the Marqo vectorstore.Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.To run this notebook with our docker image please run the following commands first to get Marqo:docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latestpip install marqofrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoaderAPI Reference:CharacterTextSplitterMarqoTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderimport marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)    Index langchain-demo exists.print(result_docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254Additional features‚ÄãOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.Multimodal Example‚Äã# use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)    {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)for doc in doc_results:    print(doc.page_content)    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpgText only example‚Äã# use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)    {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}# Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])    ['9986cc72-adcd-4080-9d74-265c173a9ec3']query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)    This is a document that is about elephantsWeighted Queries‚ÄãWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.Question Answering with SourcesThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")API Reference:RetrievalQAWithSourcesChain    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)    Index langchain-qa-with-retrieval exists.chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}PreviousLanceDBNextGoogle Vertex AI MatchingEngineAdditional featuresWeighted Queries IntegrationsVector storesMarqoOn this pageMarqoThis notebook shows how to use functionality related to the Marqo vectorstore.Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.To run this notebook with our docker image please run the following commands first to get Marqo:docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latestpip install marqofrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoaderAPI Reference:CharacterTextSplitterMarqoTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderimport marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)    Index langchain-demo exists.print(result_docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254Additional features‚ÄãOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.Multimodal Example‚Äã# use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)    {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)for doc in doc_results:    print(doc.page_content)    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpgText only example‚Äã# use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)    {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}# Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])    ['9986cc72-adcd-4080-9d74-265c173a9ec3']query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)    This is a document that is about elephantsWeighted Queries‚ÄãWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.Question Answering with SourcesThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")API Reference:RetrievalQAWithSourcesChain    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)    Index langchain-qa-with-retrieval exists.chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}PreviousLanceDBNextGoogle Vertex AI MatchingEngineAdditional featuresWeighted Queries IntegrationsVector storesMarqoOn this pageMarqoThis notebook shows how to use functionality related to the Marqo vectorstore.Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.To run this notebook with our docker image please run the following commands first to get Marqo:docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latestpip install marqofrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoaderAPI Reference:CharacterTextSplitterMarqoTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderimport marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)    Index langchain-demo exists.print(result_docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254Additional features‚ÄãOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.Multimodal Example‚Äã# use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)    {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)for doc in doc_results:    print(doc.page_content)    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpgText only example‚Äã# use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)    {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}# Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])    ['9986cc72-adcd-4080-9d74-265c173a9ec3']query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)    This is a document that is about elephantsWeighted Queries‚ÄãWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.Question Answering with SourcesThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")API Reference:RetrievalQAWithSourcesChain    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)    Index langchain-qa-with-retrieval exists.chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}PreviousLanceDBNextGoogle Vertex AI MatchingEngine IntegrationsVector storesMarqoOn this pageMarqoThis notebook shows how to use functionality related to the Marqo vectorstore.Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.To run this notebook with our docker image please run the following commands first to get Marqo:docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latestpip install marqofrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoaderAPI Reference:CharacterTextSplitterMarqoTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderimport marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)    Index langchain-demo exists.print(result_docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254Additional features‚ÄãOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.Multimodal Example‚Äã# use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)    {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)for doc in doc_results:    print(doc.page_content)    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpgText only example‚Äã# use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)    {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}# Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])    ['9986cc72-adcd-4080-9d74-265c173a9ec3']query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)    This is a document that is about elephantsWeighted Queries‚ÄãWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.Question Answering with SourcesThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")API Reference:RetrievalQAWithSourcesChain    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)    Index langchain-qa-with-retrieval exists.chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}PreviousLanceDBNextGoogle Vertex AI MatchingEngine On this page MarqoThis notebook shows how to use functionality related to the Marqo vectorstore.Marqo is an open-source vector search engine. Marqo allows you to store and query multimodal data such as text and images. Marqo creates the vectors for you using a huge selection of opensource models, you can also provide your own finetuned models and Marqo will handle the loading and inference for you.To run this notebook with our docker image please run the following commands first to get Marqo:docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latestpip install marqofrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoaderAPI Reference:CharacterTextSplitterMarqoTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)API Reference:TextLoaderimport marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)    Index langchain-demo exists.print(result_docs[0].page_content)    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")    Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254Additional features‚ÄãOne of the powerful features of Marqo as a vectorstore is that you can use indexes created externally. For example:If you had a database of image and text pairs from another application, you can simply just use it in langchain with the Marqo vectorstore. Note that bringing your own multimodal indexes will disable the add_texts method.If you had a database of text documents, you can bring it into the langchain framework and add more texts through add_texts.The documents that are returned are customised by passing your own function to the page_content_builder callback in the search methods.Multimodal Example‚Äã# use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)    {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)for doc in doc_results:    print(doc.page_content)    Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpgText only example‚Äã# use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)    {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}# Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])    ['9986cc72-adcd-4080-9d74-265c173a9ec3']query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)    This is a document that is about elephantsWeighted Queries‚ÄãWe also expose marqos weighted queries which are a powerful way to compose complex semantic searches.query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)    A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.Question Answering with SourcesThis section shows how to use Marqo as part of a RetrievalQAWithSourcesChain. Marqo will perform the searches for information in the sources.from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")API Reference:RetrievalQAWithSourcesChain    OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)    Index langchain-qa-with-retrieval exists.chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)    {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'} docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latest docker pull marqoai/marqo:latestdocker rm -f marqodocker run --name marqo -it --privileged -p 8882:8882 --add-host host.docker.internal:host-gateway marqoai/marqo:latest  pip install marqo pip install marqo  from langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoader from langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import Marqofrom langchain.document_loaders import TextLoader  API Reference:CharacterTextSplitterMarqoTextLoader from langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents) from langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)  API Reference:TextLoader import marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query) import marqo# initialize marqomarqo_url = "http://localhost:8882"  # if using marqo cloud replace with your endpoint (console.marqo.ai)marqo_api_key = ""  # if using marqo cloud replace with your api key (console.marqo.ai)client = marqo.Client(url=marqo_url, api_key=marqo_api_key)index_name = "langchain-demo"docsearch = Marqo.from_documents(docs, index_name=index_name)query = "What did the president say about Ketanji Brown Jackson"result_docs = docsearch.similarity_search(query)      Index langchain-demo exists.     Index langchain-demo exists.     Index langchain-demo exists.  print(result_docs[0].page_content) print(result_docs[0].page_content)      Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.     Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.     Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.  result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n") result_docs = docsearch.similarity_search_with_score(query)print(result_docs[0][0].page_content, result_docs[0][1], sep="\n")      Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254     Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254     Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections.         Tonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service.         One of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court.         And I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.    0.68647254  # use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],) # use a new indexindex_name = "langchain-multimodal-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemsettings = {"treat_urls_and_pointers_as_images": True, "model": "ViT-L/14"}client.create_index(index_name, **settings)client.index(index_name).add_documents(    [        # image of a bus        {            "caption": "Bus",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg",        },        # image of a plane        {            "caption": "Plane",            "image": "https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg",        },    ],)      {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}     {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}     {'errors': False,     'processingTimeMs': 2090.2822139996715,     'index_name': 'langchain-multimodal-demo',     'items': [{'_id': 'aa92fc1c-1fb2-4d86-b027-feb507c419f7',       'result': 'created',       'status': 201},      {'_id': '5142c258-ef9f-4bf2-a1a6-2307280173a0',       'result': 'created',       'status': 201}]}  def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query) def get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    return f"{res['caption']}: {res['image']}"docsearch = Marqo(client, index_name, page_content_builder=get_content)query = "vehicles that fly"doc_results = docsearch.similarity_search(query)  for doc in doc_results:    print(doc.page_content) for doc in doc_results:    print(doc.page_content)      Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg     Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg     Plane: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image2.jpg    Bus: https://raw.githubusercontent.com/marqo-ai/marqo/mainline/examples/ImageSearchGuide/data/image4.jpg  # use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],) # use a new indexindex_name = "langchain-byo-index-demo"# incase the demo is re-runtry:    client.delete_index(index_name)except Exception:    print(f"Creating {index_name}")# This index could have been created by another systemclient.create_index(index_name)client.index(index_name).add_documents(    [        {            "Title": "Smartphone",            "Description": "A smartphone is a portable computer device that combines mobile telephone "            "functions and computing functions into one unit.",        },        {            "Title": "Telephone",            "Description": "A telephone is a telecommunications device that permits two or more users to"            "conduct a conversation when they are too far apart to be easily heard directly.",        },    ],)      {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}     {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}     {'errors': False,     'processingTimeMs': 139.2144540004665,     'index_name': 'langchain-byo-index-demo',     'items': [{'_id': '27c05a1c-b8a9-49a5-ae73-fbf1eb51dc3f',       'result': 'created',       'status': 201},      {'_id': '6889afe0-e600-43c1-aa3b-1d91bf6db274',       'result': 'created',       'status': 201}]}  # Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"]) # Note text indexes retain the ability to use add_texts despite different field names in documents# this is because the page_content_builder callback lets you handle these document fields as requireddef get_content(res):    """Helper to format Marqo's documents into text to be used as page_content"""    if "text" in res:        return res["text"]    return res["Description"]docsearch = Marqo(client, index_name, page_content_builder=get_content)docsearch.add_texts(["This is a document that is about elephants"])      ['9986cc72-adcd-4080-9d74-265c173a9ec3']     ['9986cc72-adcd-4080-9d74-265c173a9ec3']     ['9986cc72-adcd-4080-9d74-265c173a9ec3']  query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content) query = "modern communications devices"doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)      A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.     A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.     A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.  query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content) query = "elephants"doc_results = docsearch.similarity_search(query, page_content_builder=get_content)print(doc_results[0].page_content)      This is a document that is about elephants     This is a document that is about elephants     This is a document that is about elephants  query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content) query = {"communications devices": 1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)      A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.     A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.     A smartphone is a portable computer device that combines mobile telephone functions and computing functions into one unit.  query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content) query = {"communications devices": 1.0, "technology post 2000": -1.0}doc_results = docsearch.similarity_search(query)print(doc_results[0].page_content)      A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.     A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.     A telephone is a telecommunications device that permits two or more users toconduct a conversation when they are too far apart to be easily heard directly.  from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:") from langchain.chains import RetrievalQAWithSourcesChainfrom langchain import OpenAIimport osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")  API Reference:RetrievalQAWithSourcesChain     OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑     OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑     OpenAI API Key:¬∑¬∑¬∑¬∑¬∑¬∑¬∑¬∑  with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union) with open("../../../state_of_the_union.txt") as f:    state_of_the_union = f.read()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)texts = text_splitter.split_text(state_of_the_union)  index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name) index_name = "langchain-qa-with-retrieval"docsearch = Marqo.from_documents(docs, index_name=index_name)      Index langchain-qa-with-retrieval exists.     Index langchain-qa-with-retrieval exists.     Index langchain-qa-with-retrieval exists.  chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever()) chain = RetrievalQAWithSourcesChain.from_chain_type(    OpenAI(temperature=0), chain_type="stuff", retriever=docsearch.as_retriever())  chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,) chain(    {"question": "What did the president say about Justice Breyer"},    return_only_outputs=True,)      {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}     {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}     {'answer': ' The president honored Justice Breyer, thanking him for his service and noting that he is a retiring Justice of the United States Supreme Court.\n',     'sources': '../../../state_of_the_union.txt'}  Previous LanceDB Next Google Vertex AI MatchingEngine Additional featuresWeighted Queries Additional featuresWeighted Queries CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) Marqo (https://www.marqo.ai/) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) Marqo (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.marqo.Marqo.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) ‚Äã (#additional-features) ‚Äã (#multimodal-example) ‚Äã (#text-only-example) ‚Äã (#weighted-queries) RetrievalQAWithSourcesChain (https://api.python.langchain.com/en/latest/chains/langchain.chains.qa_with_sources.retrieval.RetrievalQAWithSourcesChain.html) PreviousLanceDB (/docs/integrations/vectorstores/lancedb) NextGoogle Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Additional features (#additional-features) Weighted Queries (#weighted-queries) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)