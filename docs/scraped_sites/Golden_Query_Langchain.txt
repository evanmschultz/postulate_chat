Golden provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: Products from OpenAI, Generative ai companies with series a funding, and rappers who invest can be used to retrieve structured data about relevant entities. The golden-query langchain tool is a wrapper on top of the Golden Query API which enables programmatic access to these results. See the Golden Query API docs for more information. This notebook goes over how to use the golden-query tool. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits ToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language Actions Alpha Vantage Apify ArXiv AWS Lambda Shell (bash) Bing Search Brave Search ChatGPT Plugins Dall-E Image Generator DataForSeo DuckDuckGo Search Eden AI File System Golden Query Google Drive Google Places Google Search Google Serper Gradio GraphQL HuggingFace Hub Tools Human as a tool IFTTT WebHooks Lemon Agent Metaphor Search Nuclia Understanding OpenWeatherMap PubMed Requests SceneXplain Search Tools SearxNG Search SerpAPI Twilio Wikipedia Wolfram Alpha Yahoo Finance News YouTube Zapier Natural Language Actions Vector stores Grouped by provider  Integrations Tools Golden Query Go to the Golden API docs to get an overview about the Golden API. Get your API key from the Golden API Settings page. Save your API key into GOLDEN_API_KEY env variable GoldenQueryAPIWrapper Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsGolden QueryGolden QueryGolden provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: Products from OpenAI, Generative ai companies with series a funding, and rappers who invest can be used to retrieve structured data about relevant entities.The golden-query langchain tool is a wrapper on top of the Golden Query API which enables programmatic access to these results. See the Golden Query API docs for more information.This notebook goes over how to use the golden-query tool.Go to the Golden API docs to get an overview about the Golden API.Get your API key from the Golden API Settings page.Save your API key into GOLDEN_API_KEY env variableimport osos.environ["GOLDEN_API_KEY"] = ""from langchain.utilities.golden_query import GoldenQueryAPIWrapperAPI Reference:GoldenQueryAPIWrappergolden_query = GoldenQueryAPIWrapper()import jsonjson.loads(golden_query.run("companies in nanotech"))    {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None}PreviousFile SystemNextGoogle DriveCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsGolden QueryGolden QueryGolden provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: Products from OpenAI, Generative ai companies with series a funding, and rappers who invest can be used to retrieve structured data about relevant entities.The golden-query langchain tool is a wrapper on top of the Golden Query API which enables programmatic access to these results. See the Golden Query API docs for more information.This notebook goes over how to use the golden-query tool.Go to the Golden API docs to get an overview about the Golden API.Get your API key from the Golden API Settings page.Save your API key into GOLDEN_API_KEY env variableimport osos.environ["GOLDEN_API_KEY"] = ""from langchain.utilities.golden_query import GoldenQueryAPIWrapperAPI Reference:GoldenQueryAPIWrappergolden_query = GoldenQueryAPIWrapper()import jsonjson.loads(golden_query.run("companies in nanotech"))    {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None}PreviousFile SystemNextGoogle Drive IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsGolden QueryGolden QueryGolden provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: Products from OpenAI, Generative ai companies with series a funding, and rappers who invest can be used to retrieve structured data about relevant entities.The golden-query langchain tool is a wrapper on top of the Golden Query API which enables programmatic access to these results. See the Golden Query API docs for more information.This notebook goes over how to use the golden-query tool.Go to the Golden API docs to get an overview about the Golden API.Get your API key from the Golden API Settings page.Save your API key into GOLDEN_API_KEY env variableimport osos.environ["GOLDEN_API_KEY"] = ""from langchain.utilities.golden_query import GoldenQueryAPIWrapperAPI Reference:GoldenQueryAPIWrappergolden_query = GoldenQueryAPIWrapper()import jsonjson.loads(golden_query.run("companies in nanotech"))    {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None}PreviousFile SystemNextGoogle Drive IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsToolsGolden QueryGolden QueryGolden provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: Products from OpenAI, Generative ai companies with series a funding, and rappers who invest can be used to retrieve structured data about relevant entities.The golden-query langchain tool is a wrapper on top of the Golden Query API which enables programmatic access to these results. See the Golden Query API docs for more information.This notebook goes over how to use the golden-query tool.Go to the Golden API docs to get an overview about the Golden API.Get your API key from the Golden API Settings page.Save your API key into GOLDEN_API_KEY env variableimport osos.environ["GOLDEN_API_KEY"] = ""from langchain.utilities.golden_query import GoldenQueryAPIWrapperAPI Reference:GoldenQueryAPIWrappergolden_query = GoldenQueryAPIWrapper()import jsonjson.loads(golden_query.run("companies in nanotech"))    {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None}PreviousFile SystemNextGoogle Drive IntegrationsToolsGolden QueryGolden QueryGolden provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: Products from OpenAI, Generative ai companies with series a funding, and rappers who invest can be used to retrieve structured data about relevant entities.The golden-query langchain tool is a wrapper on top of the Golden Query API which enables programmatic access to these results. See the Golden Query API docs for more information.This notebook goes over how to use the golden-query tool.Go to the Golden API docs to get an overview about the Golden API.Get your API key from the Golden API Settings page.Save your API key into GOLDEN_API_KEY env variableimport osos.environ["GOLDEN_API_KEY"] = ""from langchain.utilities.golden_query import GoldenQueryAPIWrapperAPI Reference:GoldenQueryAPIWrappergolden_query = GoldenQueryAPIWrapper()import jsonjson.loads(golden_query.run("companies in nanotech"))    {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None}PreviousFile SystemNextGoogle Drive Golden QueryGolden provides a set of natural language APIs for querying and enrichment using the Golden Knowledge Graph e.g. queries such as: Products from OpenAI, Generative ai companies with series a funding, and rappers who invest can be used to retrieve structured data about relevant entities.The golden-query langchain tool is a wrapper on top of the Golden Query API which enables programmatic access to these results. See the Golden Query API docs for more information.This notebook goes over how to use the golden-query tool.Go to the Golden API docs to get an overview about the Golden API.Get your API key from the Golden API Settings page.Save your API key into GOLDEN_API_KEY env variableimport osos.environ["GOLDEN_API_KEY"] = ""from langchain.utilities.golden_query import GoldenQueryAPIWrapperAPI Reference:GoldenQueryAPIWrappergolden_query = GoldenQueryAPIWrapper()import jsonjson.loads(golden_query.run("companies in nanotech"))    {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None} import osos.environ["GOLDEN_API_KEY"] = "" import osos.environ["GOLDEN_API_KEY"] = ""  from langchain.utilities.golden_query import GoldenQueryAPIWrapper from langchain.utilities.golden_query import GoldenQueryAPIWrapper  API Reference:GoldenQueryAPIWrapper golden_query = GoldenQueryAPIWrapper() golden_query = GoldenQueryAPIWrapper()  import jsonjson.loads(golden_query.run("companies in nanotech")) import jsonjson.loads(golden_query.run("companies in nanotech"))      {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None}     {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None}     {'results': [{'id': 4673886,       'latestVersionId': 60276991,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Samsung', 'citations': []}]}]},      {'id': 7008,       'latestVersionId': 61087416,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Intel', 'citations': []}]}]},      {'id': 24193,       'latestVersionId': 60274482,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Texas Instruments', 'citations': []}]}]},      {'id': 1142,       'latestVersionId': 61406205,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Advanced Micro Devices', 'citations': []}]}]},      {'id': 193948,       'latestVersionId': 58326582,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Freescale Semiconductor', 'citations': []}]}]},      {'id': 91316,       'latestVersionId': 60387380,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Agilent Technologies', 'citations': []}]}]},      {'id': 90014,       'latestVersionId': 60388078,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Novartis', 'citations': []}]}]},      {'id': 237458,       'latestVersionId': 61406160,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'Analog Devices', 'citations': []}]}]},      {'id': 3941943,       'latestVersionId': 60382250,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'AbbVie Inc.', 'citations': []}]}]},      {'id': 4178762,       'latestVersionId': 60542667,       'properties': [{'predicateId': 'name',         'instances': [{'value': 'IBM', 'citations': []}]}]}],     'next': 'https://golden.com/api/v2/public/queries/59044/results/?cursor=eyJwb3NpdGlvbiI6IFsxNzYxNiwgIklCTS04M1lQM1oiXX0%3D&pageSize=10',     'previous': None}  Previous File System Next Google Drive CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Alpha Vantage (/docs/integrations/tools/alpha_vantage) Apify (/docs/integrations/tools/apify) ArXiv (/docs/integrations/tools/arxiv) AWS Lambda (/docs/integrations/tools/awslambda) Shell (bash) (/docs/integrations/tools/bash) Bing Search (/docs/integrations/tools/bing_search) Brave Search (/docs/integrations/tools/brave_search) ChatGPT Plugins (/docs/integrations/tools/chatgpt_plugins) Dall-E Image Generator (/docs/integrations/tools/dalle_image_generator) DataForSeo (/docs/integrations/tools/dataforseo) DuckDuckGo Search (/docs/integrations/tools/ddg) Eden AI (/docs/integrations/tools/edenai_tools) File System (/docs/integrations/tools/filesystem) Golden Query (/docs/integrations/tools/golden_query) Google Drive (/docs/integrations/tools/google_drive) Google Places (/docs/integrations/tools/google_places) Google Search (/docs/integrations/tools/google_search) Google Serper (/docs/integrations/tools/google_serper) Gradio (/docs/integrations/tools/gradio_tools) GraphQL (/docs/integrations/tools/graphql) HuggingFace Hub Tools (/docs/integrations/tools/huggingface_tools) Human as a tool (/docs/integrations/tools/human_tools) IFTTT WebHooks (/docs/integrations/tools/ifttt) Lemon Agent (/docs/integrations/tools/lemonai) Metaphor Search (/docs/integrations/tools/metaphor_search) Nuclia Understanding (/docs/integrations/tools/nuclia) OpenWeatherMap (/docs/integrations/tools/openweathermap) PubMed (/docs/integrations/tools/pubmed) Requests (/docs/integrations/tools/requests) SceneXplain (/docs/integrations/tools/sceneXplain) Search Tools (/docs/integrations/tools/search_tools) SearxNG Search (/docs/integrations/tools/searx_search) SerpAPI (/docs/integrations/tools/serpapi) Twilio (/docs/integrations/tools/twilio) Wikipedia (/docs/integrations/tools/wikipedia) Wolfram Alpha (/docs/integrations/tools/wolfram_alpha) Yahoo Finance News (/docs/integrations/tools/yahoo_finance_news) YouTube (/docs/integrations/tools/youtube) Zapier Natural Language Actions (/docs/integrations/tools/zapier) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Tools (/docs/integrations/tools/) Golden (https://golden.com) Golden Query API (https://docs.golden.com/reference/query-api) Golden Query API docs (https://docs.golden.com/reference/query-api) Golden API docs (https://docs.golden.com/) Golden API Settings (https://golden.com/settings/api) GoldenQueryAPIWrapper (https://api.python.langchain.com/en/latest/utilities/langchain.utilities.golden_query.GoldenQueryAPIWrapper.html) PreviousFile System (/docs/integrations/tools/filesystem) NextGoogle Drive (/docs/integrations/tools/google_drive) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)