ScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale. ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details. Install ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source. Below we show how to use ScaNN in conjunction with Huggingface Embeddings. Next, we demonstrate using ScaNN in conjunction with Google PaLM API. You can obtain an API key from https://developers.generativeai.google/tutorials/setup IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores ScaNN HuggingFaceEmbeddings CharacterTextSplitter ScaNN TextLoader TensorflowHubEmbeddings RetrievalQA google_palm Installation Retrieval Demo RetrievalQA Demo Save and loading local retrieval index Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesScaNNOn this pageScaNNScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details.Installation‚ÄãInstall ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source.pip install scannRetrieval Demo‚ÄãBelow we show how to use ScaNN in conjunction with Huggingface Embeddings.from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})RetrievalQA Demo‚ÄãNext, we demonstrate using ScaNN in conjunction with Google PaLM API.You can obtain an API key from https://developers.generativeai.google/tutorials/setupfrom langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))API Reference:RetrievalQAgoogle_palmprint(qa.run('What did the president say about Ketanji Brown Jackson?'))    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.print(qa.run('What did the president say about Michael Phelps?'))    The president did not mention Michael Phelps in his speech.Save and loading local retrieval index‚Äãdb.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')PreviousRocksetNextSingleStoreDBInstallationRetrieval DemoRetrievalQA DemoSave and loading local retrieval indexCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesScaNNOn this pageScaNNScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details.Installation‚ÄãInstall ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source.pip install scannRetrieval Demo‚ÄãBelow we show how to use ScaNN in conjunction with Huggingface Embeddings.from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})RetrievalQA Demo‚ÄãNext, we demonstrate using ScaNN in conjunction with Google PaLM API.You can obtain an API key from https://developers.generativeai.google/tutorials/setupfrom langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))API Reference:RetrievalQAgoogle_palmprint(qa.run('What did the president say about Ketanji Brown Jackson?'))    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.print(qa.run('What did the president say about Michael Phelps?'))    The president did not mention Michael Phelps in his speech.Save and loading local retrieval index‚Äãdb.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')PreviousRocksetNextSingleStoreDBInstallationRetrieval DemoRetrievalQA DemoSave and loading local retrieval index IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesScaNNOn this pageScaNNScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details.Installation‚ÄãInstall ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source.pip install scannRetrieval Demo‚ÄãBelow we show how to use ScaNN in conjunction with Huggingface Embeddings.from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})RetrievalQA Demo‚ÄãNext, we demonstrate using ScaNN in conjunction with Google PaLM API.You can obtain an API key from https://developers.generativeai.google/tutorials/setupfrom langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))API Reference:RetrievalQAgoogle_palmprint(qa.run('What did the president say about Ketanji Brown Jackson?'))    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.print(qa.run('What did the president say about Michael Phelps?'))    The president did not mention Michael Phelps in his speech.Save and loading local retrieval index‚Äãdb.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')PreviousRocksetNextSingleStoreDBInstallationRetrieval DemoRetrievalQA DemoSave and loading local retrieval index IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesScaNNOn this pageScaNNScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details.Installation‚ÄãInstall ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source.pip install scannRetrieval Demo‚ÄãBelow we show how to use ScaNN in conjunction with Huggingface Embeddings.from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})RetrievalQA Demo‚ÄãNext, we demonstrate using ScaNN in conjunction with Google PaLM API.You can obtain an API key from https://developers.generativeai.google/tutorials/setupfrom langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))API Reference:RetrievalQAgoogle_palmprint(qa.run('What did the president say about Ketanji Brown Jackson?'))    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.print(qa.run('What did the president say about Michael Phelps?'))    The president did not mention Michael Phelps in his speech.Save and loading local retrieval index‚Äãdb.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')PreviousRocksetNextSingleStoreDBInstallationRetrieval DemoRetrievalQA DemoSave and loading local retrieval index IntegrationsVector storesScaNNOn this pageScaNNScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details.Installation‚ÄãInstall ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source.pip install scannRetrieval Demo‚ÄãBelow we show how to use ScaNN in conjunction with Huggingface Embeddings.from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})RetrievalQA Demo‚ÄãNext, we demonstrate using ScaNN in conjunction with Google PaLM API.You can obtain an API key from https://developers.generativeai.google/tutorials/setupfrom langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))API Reference:RetrievalQAgoogle_palmprint(qa.run('What did the president say about Ketanji Brown Jackson?'))    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.print(qa.run('What did the president say about Michael Phelps?'))    The president did not mention Michael Phelps in his speech.Save and loading local retrieval index‚Äãdb.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')PreviousRocksetNextSingleStoreDBInstallationRetrieval DemoRetrievalQA DemoSave and loading local retrieval index IntegrationsVector storesScaNNOn this pageScaNNScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details.Installation‚ÄãInstall ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source.pip install scannRetrieval Demo‚ÄãBelow we show how to use ScaNN in conjunction with Huggingface Embeddings.from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})RetrievalQA Demo‚ÄãNext, we demonstrate using ScaNN in conjunction with Google PaLM API.You can obtain an API key from https://developers.generativeai.google/tutorials/setupfrom langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))API Reference:RetrievalQAgoogle_palmprint(qa.run('What did the president say about Ketanji Brown Jackson?'))    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.print(qa.run('What did the president say about Michael Phelps?'))    The president did not mention Michael Phelps in his speech.Save and loading local retrieval index‚Äãdb.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')PreviousRocksetNextSingleStoreDB IntegrationsVector storesScaNNOn this pageScaNNScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details.Installation‚ÄãInstall ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source.pip install scannRetrieval Demo‚ÄãBelow we show how to use ScaNN in conjunction with Huggingface Embeddings.from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})RetrievalQA Demo‚ÄãNext, we demonstrate using ScaNN in conjunction with Google PaLM API.You can obtain an API key from https://developers.generativeai.google/tutorials/setupfrom langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))API Reference:RetrievalQAgoogle_palmprint(qa.run('What did the president say about Ketanji Brown Jackson?'))    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.print(qa.run('What did the president say about Michael Phelps?'))    The president did not mention Michael Phelps in his speech.Save and loading local retrieval index‚Äãdb.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')PreviousRocksetNextSingleStoreDB On this page ScaNNScaNN (Scalable Nearest Neighbors) is a method for efficient vector similarity search at scale.ScaNN includes search space pruning and quantization for Maximum Inner Product Search and also supports other distance functions such as Euclidean distance. The implementation is optimized for x86 processors with AVX2 support. See its Google Research github for more details.Installation‚ÄãInstall ScaNN through pip. Alternatively, you can follow instructions on the ScaNN Website to install from source.pip install scannRetrieval Demo‚ÄãBelow we show how to use ScaNN in conjunction with Huggingface Embeddings.from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings    Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})RetrievalQA Demo‚ÄãNext, we demonstrate using ScaNN in conjunction with Google PaLM API.You can obtain an API key from https://developers.generativeai.google/tutorials/setupfrom langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))API Reference:RetrievalQAgoogle_palmprint(qa.run('What did the president say about Ketanji Brown Jackson?'))    The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.print(qa.run('What did the president say about Michael Phelps?'))    The president did not mention Michael Phelps in his speech.Save and loading local retrieval index‚Äãdb.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union') pip install scann pip install scann  from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0] from langchain.embeddings import HuggingFaceEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import ScaNNfrom langchain.document_loaders import TextLoaderloader = TextLoader("state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)from langchain.embeddings import TensorflowHubEmbeddingsembeddings = HuggingFaceEmbeddings()db = ScaNN.from_documents(docs, embeddings)query = "What did the president say about Ketanji Brown Jackson"docs = db.similarity_search(query)docs[0]  API Reference:HuggingFaceEmbeddingsCharacterTextSplitterScaNNTextLoaderTensorflowHubEmbeddings     Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})     Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})     Document(page_content='Tonight. I call on the Senate to: Pass the Freedom to Vote Act. Pass the John Lewis Voting Rights Act. And while you‚Äôre at it, pass the Disclose Act so Americans can know who is funding our elections. \n\nTonight, I‚Äôd like to honor someone who has dedicated his life to serve this country: Justice Stephen Breyer‚Äîan Army veteran, Constitutional scholar, and retiring Justice of the United States Supreme Court. Justice Breyer, thank you for your service. \n\nOne of the most serious constitutional responsibilities a President has is nominating someone to serve on the United States Supreme Court. \n\nAnd I did that 4 days ago, when I nominated Circuit Court of Appeals Judge Ketanji Brown Jackson. One of our nation‚Äôs top legal minds, who will continue Justice Breyer‚Äôs legacy of excellence.', metadata={'source': 'state_of_the_union.txt'})  from langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10})) from langchain.chains import RetrievalQAfrom langchain.chat_models import google_palmpalm_client = google_palm.ChatGooglePalm(google_api_key='YOUR_GOOGLE_PALM_API_KEY')qa = RetrievalQA.from_chain_type(    llm=palm_client,    chain_type="stuff",    retriever=db.as_retriever(search_kwargs={'k': 10}))  API Reference:RetrievalQAgoogle_palm print(qa.run('What did the president say about Ketanji Brown Jackson?')) print(qa.run('What did the president say about Ketanji Brown Jackson?'))      The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.     The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.     The president said that Ketanji Brown Jackson is one of our nation's top legal minds, who will continue Justice Breyer's legacy of excellence.  print(qa.run('What did the president say about Michael Phelps?')) print(qa.run('What did the president say about Michael Phelps?'))      The president did not mention Michael Phelps in his speech.     The president did not mention Michael Phelps in his speech.     The president did not mention Michael Phelps in his speech.  db.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union') db.save_local('/tmp/db', 'state_of_union')restored_db = ScaNN.load_local('/tmp/db', embeddings, index_name='state_of_union')  Previous Rockset Next SingleStoreDB InstallationRetrieval DemoRetrievalQA DemoSave and loading local retrieval index InstallationRetrieval DemoRetrievalQA DemoSave and loading local retrieval index CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) Google Research github (https://github.com/google-research/google-research/tree/master/scann) ‚Äã (#installation) ScaNN Website (https://github.com/google-research/google-research/tree/master/scann#building-from-source) ‚Äã (#retrieval-demo) HuggingFaceEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.huggingface.HuggingFaceEmbeddings.html) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) ScaNN (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.scann.ScaNN.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) TensorflowHubEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.tensorflow_hub.TensorflowHubEmbeddings.html) ‚Äã (#retrievalqa-demo) https://developers.generativeai.google/tutorials/setup (https://developers.generativeai.google/tutorials/setup) RetrievalQA (https://api.python.langchain.com/en/latest/chains/langchain.chains.retrieval_qa.base.RetrievalQA.html) google_palm (https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.google_palm.google_palm.html) ‚Äã (#save-and-loading-local-retrieval-index) PreviousRockset (/docs/integrations/vectorstores/rockset) NextSingleStoreDB (/docs/integrations/vectorstores/singlestoredb) Installation (#installation) Retrieval Demo (#retrieval-demo) RetrievalQA Demo (#retrievalqa-demo) Save and loading local retrieval index (#save-and-loading-local-retrieval-index) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)