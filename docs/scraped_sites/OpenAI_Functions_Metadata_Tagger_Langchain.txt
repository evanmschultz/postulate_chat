It can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious. The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support.  Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing! For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows: You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents: The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata. You can also initialize the document transformer with a Pydantic schema: You can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt: IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersBeautiful SoupdocaiDoctran Extract PropertiesDoctran Interrogate DocumentsDoctran Translate Documentshtml2textNuclia Understanding API document transformerOpenAI Functions Metadata TaggerLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformersBeautiful SoupdocaiDoctran Extract PropertiesDoctran Interrogate DocumentsDoctran Translate Documentshtml2textNuclia Understanding API document transformerOpenAI Functions Metadata Tagger Beautiful Soup docai Doctran Extract Properties Doctran Interrogate Documents Doctran Translate Documents html2text Nuclia Understanding API document transformer OpenAI Functions Metadata Tagger LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Document transformers OpenAI Functions Metadata Tagger Document ChatOpenAI create_metadata_tagger ChatPromptTemplate Customization Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersBeautiful SoupdocaiDoctran Extract PropertiesDoctran Interrogate DocumentsDoctran Translate Documentshtml2textNuclia Understanding API document transformerOpenAI Functions Metadata TaggerLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument transformersOpenAI Functions Metadata TaggerOn this pageOpenAI Functions Metadata TaggerIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support. Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_taggerAPI Reference:DocumentChatOpenAIcreate_metadata_taggerschema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.You can also initialize the document transformer with a Pydantic schema:from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}Customization‚ÄãYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")API Reference:ChatPromptTemplate    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}PreviousNuclia Understanding API document transformerNextLLMsCustomizationCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersBeautiful SoupdocaiDoctran Extract PropertiesDoctran Interrogate DocumentsDoctran Translate Documentshtml2textNuclia Understanding API document transformerOpenAI Functions Metadata TaggerLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument transformersOpenAI Functions Metadata TaggerOn this pageOpenAI Functions Metadata TaggerIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support. Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_taggerAPI Reference:DocumentChatOpenAIcreate_metadata_taggerschema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.You can also initialize the document transformer with a Pydantic schema:from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}Customization‚ÄãYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")API Reference:ChatPromptTemplate    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}PreviousNuclia Understanding API document transformerNextLLMsCustomization IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersBeautiful SoupdocaiDoctran Extract PropertiesDoctran Interrogate DocumentsDoctran Translate Documentshtml2textNuclia Understanding API document transformerOpenAI Functions Metadata TaggerLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsDocument transformersOpenAI Functions Metadata TaggerOn this pageOpenAI Functions Metadata TaggerIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support. Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_taggerAPI Reference:DocumentChatOpenAIcreate_metadata_taggerschema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.You can also initialize the document transformer with a Pydantic schema:from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}Customization‚ÄãYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")API Reference:ChatPromptTemplate    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}PreviousNuclia Understanding API document transformerNextLLMsCustomization IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersBeautiful SoupdocaiDoctran Extract PropertiesDoctran Interrogate DocumentsDoctran Translate Documentshtml2textNuclia Understanding API document transformerOpenAI Functions Metadata TaggerLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersBeautiful SoupdocaiDoctran Extract PropertiesDoctran Interrogate DocumentsDoctran Translate Documentshtml2textNuclia Understanding API document transformerOpenAI Functions Metadata TaggerLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsDocument transformersOpenAI Functions Metadata TaggerOn this pageOpenAI Functions Metadata TaggerIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support. Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_taggerAPI Reference:DocumentChatOpenAIcreate_metadata_taggerschema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.You can also initialize the document transformer with a Pydantic schema:from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}Customization‚ÄãYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")API Reference:ChatPromptTemplate    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}PreviousNuclia Understanding API document transformerNextLLMsCustomization IntegrationsDocument transformersOpenAI Functions Metadata TaggerOn this pageOpenAI Functions Metadata TaggerIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support. Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_taggerAPI Reference:DocumentChatOpenAIcreate_metadata_taggerschema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.You can also initialize the document transformer with a Pydantic schema:from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}Customization‚ÄãYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")API Reference:ChatPromptTemplate    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}PreviousNuclia Understanding API document transformerNextLLMsCustomization IntegrationsDocument transformersOpenAI Functions Metadata TaggerOn this pageOpenAI Functions Metadata TaggerIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support. Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_taggerAPI Reference:DocumentChatOpenAIcreate_metadata_taggerschema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.You can also initialize the document transformer with a Pydantic schema:from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}Customization‚ÄãYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")API Reference:ChatPromptTemplate    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}PreviousNuclia Understanding API document transformerNextLLMs IntegrationsDocument transformersOpenAI Functions Metadata TaggerOn this pageOpenAI Functions Metadata TaggerIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support. Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_taggerAPI Reference:DocumentChatOpenAIcreate_metadata_taggerschema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.You can also initialize the document transformer with a Pydantic schema:from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}Customization‚ÄãYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")API Reference:ChatPromptTemplate    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}PreviousNuclia Understanding API document transformerNextLLMs On this page OpenAI Functions Metadata TaggerIt can often be useful to tag ingested documents with structured metadata, such as the title, tone, or length of a document, to allow for more targeted similarity search later. However, for large numbers of documents, performing this labelling process manually can be tedious.The OpenAIMetadataTagger document transformer automates this process by extracting metadata from each provided document according to a provided schema. It uses a configurable OpenAI Functions-powered chain under the hood, so if you pass a custom LLM instance, it must be an OpenAI model with functions support. Note: This document transformer works best with complete documents, so it's best to run it first with whole documents before doing any other splitting or processing!For example, let's say you wanted to index a set of movie reviews. You could initialize the document transformer with a valid JSON Schema object as follows:from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_taggerAPI Reference:DocumentChatOpenAIcreate_metadata_taggerschema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)You can then simply pass the document transformer a list of documents, and it will extract metadata from the contents:original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}The new documents can then be further processed by a text splitter before being loaded into a vector store. Extracted fields will not overwrite existing metadata.You can also initialize the document transformer with a Pydantic schema:from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}Customization‚ÄãYou can pass the underlying tagging chain the standard LLMChain arguments in the document transformer constructor. For example, if you wanted to ask the LLM to focus specific details in the input documents, or extract metadata in a certain style, you could pass in a custom prompt:from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")API Reference:ChatPromptTemplate    Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false} from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_tagger from langchain.schema import Documentfrom langchain.chat_models import ChatOpenAIfrom langchain.document_transformers.openai_functions import create_metadata_tagger  API Reference:DocumentChatOpenAIcreate_metadata_tagger schema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm) schema = {    "properties": {        "movie_title": {"type": "string"},        "critic": {"type": "string"},        "tone": {"type": "string", "enum": ["positive", "negative"]},        "rating": {            "type": "integer",            "description": "The number of stars the critic rated the movie",        },    },    "required": ["movie_title", "critic", "tone"],}# Must be an OpenAI model that supports functionsllm = ChatOpenAI(temperature=0, model="gpt-3.5-turbo-0613")document_transformer = create_metadata_tagger(metadata_schema=schema, llm=llm)  original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents) original_documents = [    Document(        page_content="Review of The Bee Movie\nBy Roger Ebert\n\nThis is the greatest movie ever made. 4 out of 5 stars."    ),    Document(        page_content="Review of The Godfather\nBy Anonymous\n\nThis movie was super boring. 1 out of 5 stars.",        metadata={"reliable": False},    ),]enhanced_documents = document_transformer.transform_documents(original_documents)  import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n") import jsonprint(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")      Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}     Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}     Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}  from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n") from typing import Literalfrom pydantic import BaseModel, Fieldclass Properties(BaseModel):    movie_title: str    critic: str    tone: Literal["positive", "negative"]    rating: int = Field(description="Rating out of 5 stars")document_transformer = create_metadata_tagger(Properties, llm)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")      Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}     Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}     Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Anonymous", "tone": "negative", "rating": 1, "reliable": false}  from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n") from langchain.prompts import ChatPromptTemplateprompt = ChatPromptTemplate.from_template(    """Extract relevant information from the following text.Anonymous critics are actually Roger Ebert.{input}""")document_transformer = create_metadata_tagger(schema, llm, prompt=prompt)enhanced_documents = document_transformer.transform_documents(original_documents)print(    *[d.page_content + "\n\n" + json.dumps(d.metadata) for d in enhanced_documents],    sep="\n\n---------------\n\n")  API Reference:ChatPromptTemplate     Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}     Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}     Review of The Bee Movie    By Roger Ebert        This is the greatest movie ever made. 4 out of 5 stars.        {"movie_title": "The Bee Movie", "critic": "Roger Ebert", "tone": "positive", "rating": 4}        ---------------        Review of The Godfather    By Anonymous        This movie was super boring. 1 out of 5 stars.        {"movie_title": "The Godfather", "critic": "Roger Ebert", "tone": "negative", "rating": 1, "reliable": false}  Previous Nuclia Understanding API document transformer Next LLMs Customization Customization CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) Beautiful Soup (/docs/integrations/document_transformers/beautiful_soup) docai (/docs/integrations/document_transformers/docai) Doctran Extract Properties (/docs/integrations/document_transformers/doctran_extract_properties) Doctran Interrogate Documents (/docs/integrations/document_transformers/doctran_interrogate_document) Doctran Translate Documents (/docs/integrations/document_transformers/doctran_translate_document) html2text (/docs/integrations/document_transformers/html2text) Nuclia Understanding API document transformer (/docs/integrations/document_transformers/nuclia_transformer) OpenAI Functions Metadata Tagger (/docs/integrations/document_transformers/openai_metadata_tagger) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Document transformers (/docs/integrations/document_transformers/) Document (https://api.python.langchain.com/en/latest/schema/langchain.schema.document.Document.html) ChatOpenAI (https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html) create_metadata_tagger (https://api.python.langchain.com/en/latest/document_transformers/langchain.document_transformers.openai_functions.create_metadata_tagger.html) ‚Äã (#customization) ChatPromptTemplate (https://api.python.langchain.com/en/latest/prompts/langchain.prompts.chat.ChatPromptTemplate.html) PreviousNuclia Understanding API document transformer (/docs/integrations/document_transformers/nuclia_transformer) NextLLMs (/docs/integrations/llms/) Customization (#customization) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)