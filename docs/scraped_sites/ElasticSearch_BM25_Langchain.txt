Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents. In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others. The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval. This notebook shows how to use a retriever that uses ElasticSearch and BM25. For more information on the details of BM25 see this blog post. We can optionally add texts to the retriever (if they aren't already in there) We can now use the retriever! IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory RetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZep Amazon Kendra Arxiv Azure Cognitive Search BM25 Chaindesk ChatGPT Plugin Cohere Reranker DocArray Retriever ElasticSearch BM25 Google Cloud Enterprise Search Google Drive Retriever kNN LOTR (Merger Retriever) Metal Pinecone Hybrid Search PubMed RePhraseQueryRetriever SVM TF-IDF Vespa Weaviate Hybrid Search Wikipedia Zep Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Retrievers ElasticSearch BM25 ElasticSearchBM25Retriever Create New Retriever Add texts (if necessary) Use Retriever Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsRetrieversElasticSearch BM25On this pageElasticSearch BM25Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others.The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.This notebook shows how to use a retriever that uses ElasticSearch and BM25.For more information on the details of BM25 see this blog post.#!pip install elasticsearchfrom langchain.retrievers import ElasticSearchBM25RetrieverAPI Reference:ElasticSearchBM25RetrieverCreate New Retriever‚Äãelasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")# Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")Add texts (if necessary)‚ÄãWe can optionally add texts to the retriever (if they aren't already in there)retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])    ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']Use Retriever‚ÄãWe can now use the retriever!result = retriever.get_relevant_documents("foo")result    [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]PreviousDocArray RetrieverNextGoogle Cloud Enterprise SearchCreate New RetrieverAdd texts (if necessary)Use RetrieverCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsRetrieversElasticSearch BM25On this pageElasticSearch BM25Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others.The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.This notebook shows how to use a retriever that uses ElasticSearch and BM25.For more information on the details of BM25 see this blog post.#!pip install elasticsearchfrom langchain.retrievers import ElasticSearchBM25RetrieverAPI Reference:ElasticSearchBM25RetrieverCreate New Retriever‚Äãelasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")# Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")Add texts (if necessary)‚ÄãWe can optionally add texts to the retriever (if they aren't already in there)retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])    ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']Use Retriever‚ÄãWe can now use the retriever!result = retriever.get_relevant_documents("foo")result    [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]PreviousDocArray RetrieverNextGoogle Cloud Enterprise SearchCreate New RetrieverAdd texts (if necessary)Use Retriever IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsRetrieversElasticSearch BM25On this pageElasticSearch BM25Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others.The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.This notebook shows how to use a retriever that uses ElasticSearch and BM25.For more information on the details of BM25 see this blog post.#!pip install elasticsearchfrom langchain.retrievers import ElasticSearchBM25RetrieverAPI Reference:ElasticSearchBM25RetrieverCreate New Retriever‚Äãelasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")# Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")Add texts (if necessary)‚ÄãWe can optionally add texts to the retriever (if they aren't already in there)retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])    ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']Use Retriever‚ÄãWe can now use the retriever!result = retriever.get_relevant_documents("foo")result    [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]PreviousDocArray RetrieverNextGoogle Cloud Enterprise SearchCreate New RetrieverAdd texts (if necessary)Use Retriever IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversAmazon KendraArxivAzure Cognitive SearchBM25ChaindeskChatGPT PluginCohere RerankerDocArray RetrieverElasticSearch BM25Google Cloud Enterprise SearchGoogle Drive RetrieverkNNLOTR (Merger Retriever)MetalPinecone Hybrid SearchPubMedRePhraseQueryRetrieverSVMTF-IDFVespaWeaviate Hybrid SearchWikipediaZepText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsRetrieversElasticSearch BM25On this pageElasticSearch BM25Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others.The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.This notebook shows how to use a retriever that uses ElasticSearch and BM25.For more information on the details of BM25 see this blog post.#!pip install elasticsearchfrom langchain.retrievers import ElasticSearchBM25RetrieverAPI Reference:ElasticSearchBM25RetrieverCreate New Retriever‚Äãelasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")# Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")Add texts (if necessary)‚ÄãWe can optionally add texts to the retriever (if they aren't already in there)retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])    ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']Use Retriever‚ÄãWe can now use the retriever!result = retriever.get_relevant_documents("foo")result    [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]PreviousDocArray RetrieverNextGoogle Cloud Enterprise SearchCreate New RetrieverAdd texts (if necessary)Use Retriever IntegrationsRetrieversElasticSearch BM25On this pageElasticSearch BM25Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others.The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.This notebook shows how to use a retriever that uses ElasticSearch and BM25.For more information on the details of BM25 see this blog post.#!pip install elasticsearchfrom langchain.retrievers import ElasticSearchBM25RetrieverAPI Reference:ElasticSearchBM25RetrieverCreate New Retriever‚Äãelasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")# Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")Add texts (if necessary)‚ÄãWe can optionally add texts to the retriever (if they aren't already in there)retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])    ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']Use Retriever‚ÄãWe can now use the retriever!result = retriever.get_relevant_documents("foo")result    [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]PreviousDocArray RetrieverNextGoogle Cloud Enterprise SearchCreate New RetrieverAdd texts (if necessary)Use Retriever IntegrationsRetrieversElasticSearch BM25On this pageElasticSearch BM25Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others.The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.This notebook shows how to use a retriever that uses ElasticSearch and BM25.For more information on the details of BM25 see this blog post.#!pip install elasticsearchfrom langchain.retrievers import ElasticSearchBM25RetrieverAPI Reference:ElasticSearchBM25RetrieverCreate New Retriever‚Äãelasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")# Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")Add texts (if necessary)‚ÄãWe can optionally add texts to the retriever (if they aren't already in there)retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])    ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']Use Retriever‚ÄãWe can now use the retriever!result = retriever.get_relevant_documents("foo")result    [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]PreviousDocArray RetrieverNextGoogle Cloud Enterprise Search IntegrationsRetrieversElasticSearch BM25On this pageElasticSearch BM25Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others.The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.This notebook shows how to use a retriever that uses ElasticSearch and BM25.For more information on the details of BM25 see this blog post.#!pip install elasticsearchfrom langchain.retrievers import ElasticSearchBM25RetrieverAPI Reference:ElasticSearchBM25RetrieverCreate New Retriever‚Äãelasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")# Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")Add texts (if necessary)‚ÄãWe can optionally add texts to the retriever (if they aren't already in there)retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])    ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']Use Retriever‚ÄãWe can now use the retriever!result = retriever.get_relevant_documents("foo")result    [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]PreviousDocArray RetrieverNextGoogle Cloud Enterprise Search On this page ElasticSearch BM25Elasticsearch is a distributed, RESTful search and analytics engine. It provides a distributed, multitenant-capable full-text search engine with an HTTP web interface and schema-free JSON documents.In information retrieval, Okapi BM25 (BM is an abbreviation of best matching) is a ranking function used by search engines to estimate the relevance of documents to a given search query. It is based on the probabilistic retrieval framework developed in the 1970s and 1980s by Stephen E. Robertson, Karen Sp√§rck Jones, and others.The name of the actual ranking function is BM25. The fuller name, Okapi BM25, includes the name of the first system to use it, which was the Okapi information retrieval system, implemented at London's City University in the 1980s and 1990s. BM25 and its newer variants, e.g. BM25F (a version of BM25 that can take document structure and anchor text into account), represent TF-IDF-like retrieval functions used in document retrieval.This notebook shows how to use a retriever that uses ElasticSearch and BM25.For more information on the details of BM25 see this blog post.#!pip install elasticsearchfrom langchain.retrievers import ElasticSearchBM25RetrieverAPI Reference:ElasticSearchBM25RetrieverCreate New Retriever‚Äãelasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")# Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")Add texts (if necessary)‚ÄãWe can optionally add texts to the retriever (if they aren't already in there)retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])    ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']Use Retriever‚ÄãWe can now use the retriever!result = retriever.get_relevant_documents("foo")result    [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})] #!pip install elasticsearch #!pip install elasticsearch  from langchain.retrievers import ElasticSearchBM25Retriever from langchain.retrievers import ElasticSearchBM25Retriever  API Reference:ElasticSearchBM25Retriever elasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4") elasticsearch_url = "http://localhost:9200"retriever = ElasticSearchBM25Retriever.create(elasticsearch_url, "langchain-index-4")  # Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index") # Alternatively, you can load an existing index# import elasticsearch# elasticsearch_url="http://localhost:9200"# retriever = ElasticSearchBM25Retriever(elasticsearch.Elasticsearch(elasticsearch_url), "langchain-index")  retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"]) retriever.add_texts(["foo", "bar", "world", "hello", "foo bar"])      ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']     ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']     ['cbd4cb47-8d9f-4f34-b80e-ea871bc49856',     'f3bd2e24-76d1-4f9b-826b-ec4c0e8c7365',     '8631bfc8-7c12-48ee-ab56-8ad5f373676e',     '8be8374c-3253-4d87-928d-d73550a2ecf0',     'd79f457b-2842-4eab-ae10-77aa420b53d7']  result = retriever.get_relevant_documents("foo") result = retriever.get_relevant_documents("foo")  result result      [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]     [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]     [Document(page_content='foo', metadata={}),     Document(page_content='foo bar', metadata={})]  Previous DocArray Retriever Next Google Cloud Enterprise Search Create New RetrieverAdd texts (if necessary)Use Retriever Create New RetrieverAdd texts (if necessary)Use Retriever CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Amazon Kendra (/docs/integrations/retrievers/amazon_kendra_retriever) Arxiv (/docs/integrations/retrievers/arxiv) Azure Cognitive Search (/docs/integrations/retrievers/azure_cognitive_search) BM25 (/docs/integrations/retrievers/bm25) Chaindesk (/docs/integrations/retrievers/chaindesk) ChatGPT Plugin (/docs/integrations/retrievers/chatgpt-plugin) Cohere Reranker (/docs/integrations/retrievers/cohere-reranker) DocArray Retriever (/docs/integrations/retrievers/docarray_retriever) ElasticSearch BM25 (/docs/integrations/retrievers/elastic_search_bm25) Google Cloud Enterprise Search (/docs/integrations/retrievers/google_cloud_enterprise_search) Google Drive Retriever (/docs/integrations/retrievers/google_drive) kNN (/docs/integrations/retrievers/knn) LOTR (Merger Retriever) (/docs/integrations/retrievers/merger_retriever) Metal (/docs/integrations/retrievers/metal) Pinecone Hybrid Search (/docs/integrations/retrievers/pinecone_hybrid_search) PubMed (/docs/integrations/retrievers/pubmed) RePhraseQueryRetriever (/docs/integrations/retrievers/re_phrase) SVM (/docs/integrations/retrievers/svm) TF-IDF (/docs/integrations/retrievers/tf_idf) Vespa (/docs/integrations/retrievers/vespa) Weaviate Hybrid Search (/docs/integrations/retrievers/weaviate-hybrid) Wikipedia (/docs/integrations/retrievers/wikipedia) Zep (/docs/integrations/retrievers/zep_memorystore) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Retrievers (/docs/integrations/retrievers/) Elasticsearch (https://www.elastic.co/elasticsearch/) Okapi BM25 (https://en.wikipedia.org/wiki/Okapi_BM25) this blog post (https://www.elastic.co/blog/practical-bm25-part-2-the-bm25-algorithm-and-its-variables) ElasticSearchBM25Retriever (https://api.python.langchain.com/en/latest/retrievers/langchain.retrievers.elastic_search_bm25.ElasticSearchBM25Retriever.html) ‚Äã (#create-new-retriever) ‚Äã (#add-texts-if-necessary) ‚Äã (#use-retriever) PreviousDocArray Retriever (/docs/integrations/retrievers/docarray_retriever) NextGoogle Cloud Enterprise Search (/docs/integrations/retrievers/google_cloud_enterprise_search) Create New Retriever (#create-new-retriever) Add texts (if necessary) (#add-texts-if-necessary) Use Retriever (#use-retriever) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)