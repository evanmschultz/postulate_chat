In this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore. Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs MemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep Memory Cassandra Chat Message History Dynamodb Chat Message History Entity Memory with SQLite storage Momento Chat Message History Mongodb Chat Message History Mot√∂rhead Memory Mot√∂rhead Memory (Managed) Postgres Chat Message History Redis Chat Message History Rockset Chat Message History SQL Chat Message History Streamlit Chat Message History Xata chat memory Zep Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider  Integrations Memory Entity Memory with SQLite storage ConversationChain OpenAI ConversationEntityMemory SQLiteEntityStore ENTITY_MEMORY_CONVERSATION_TEMPLATE Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryEntity Memory with SQLite storageEntity Memory with SQLite storageIn this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore.from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATEAPI Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATEentity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property.conversation.run("Deven & Sam are working on a hackathon project")            > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'conversation.memory.entity_store.get("Deven")    'Deven is working on a hackathon project with Sam.'conversation.memory.entity_store.get("Sam")    'Sam is working on a hackathon project with Deven.'PreviousDynamodb Chat Message HistoryNextMomento Chat Message HistoryCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryEntity Memory with SQLite storageEntity Memory with SQLite storageIn this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore.from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATEAPI Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATEentity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property.conversation.run("Deven & Sam are working on a hackathon project")            > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'conversation.memory.entity_store.get("Deven")    'Deven is working on a hackathon project with Sam.'conversation.memory.entity_store.get("Sam")    'Sam is working on a hackathon project with Deven.'PreviousDynamodb Chat Message HistoryNextMomento Chat Message History IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by providerIntegrationsMemoryEntity Memory with SQLite storageEntity Memory with SQLite storageIn this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore.from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATEAPI Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATEentity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property.conversation.run("Deven & Sam are working on a hackathon project")            > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'conversation.memory.entity_store.get("Deven")    'Deven is working on a hackathon project with Sam.'conversation.memory.entity_store.get("Sam")    'Sam is working on a hackathon project with Deven.'PreviousDynamodb Chat Message HistoryNextMomento Chat Message History IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryCassandra Chat Message HistoryDynamodb Chat Message HistoryEntity Memory with SQLite storageMomento Chat Message HistoryMongodb Chat Message HistoryMot√∂rhead MemoryMot√∂rhead Memory (Managed)Postgres Chat Message HistoryRedis Chat Message HistoryRockset Chat Message HistorySQL Chat Message HistoryStreamlit Chat Message HistoryXata chat memoryZep MemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsMemoryEntity Memory with SQLite storageEntity Memory with SQLite storageIn this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore.from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATEAPI Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATEentity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property.conversation.run("Deven & Sam are working on a hackathon project")            > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'conversation.memory.entity_store.get("Deven")    'Deven is working on a hackathon project with Sam.'conversation.memory.entity_store.get("Sam")    'Sam is working on a hackathon project with Deven.'PreviousDynamodb Chat Message HistoryNextMomento Chat Message History IntegrationsMemoryEntity Memory with SQLite storageEntity Memory with SQLite storageIn this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore.from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATEAPI Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATEentity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property.conversation.run("Deven & Sam are working on a hackathon project")            > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'conversation.memory.entity_store.get("Deven")    'Deven is working on a hackathon project with Sam.'conversation.memory.entity_store.get("Sam")    'Sam is working on a hackathon project with Deven.'PreviousDynamodb Chat Message HistoryNextMomento Chat Message History IntegrationsMemoryEntity Memory with SQLite storageEntity Memory with SQLite storageIn this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore.from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATEAPI Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATEentity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property.conversation.run("Deven & Sam are working on a hackathon project")            > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'conversation.memory.entity_store.get("Deven")    'Deven is working on a hackathon project with Sam.'conversation.memory.entity_store.get("Sam")    'Sam is working on a hackathon project with Deven.'PreviousDynamodb Chat Message HistoryNextMomento Chat Message History IntegrationsMemoryEntity Memory with SQLite storageEntity Memory with SQLite storageIn this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore.from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATEAPI Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATEentity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property.conversation.run("Deven & Sam are working on a hackathon project")            > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'conversation.memory.entity_store.get("Deven")    'Deven is working on a hackathon project with Sam.'conversation.memory.entity_store.get("Sam")    'Sam is working on a hackathon project with Deven.'PreviousDynamodb Chat Message HistoryNextMomento Chat Message History Entity Memory with SQLite storageIn this walkthrough we'll create a simple conversation chain which uses ConversationEntityMemory backed by a SqliteEntityStore.from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATEAPI Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATEentity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)Notice the usage of EntitySqliteStore as parameter to entity_store on the memory property.conversation.run("Deven & Sam are working on a hackathon project")            > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'conversation.memory.entity_store.get("Deven")    'Deven is working on a hackathon project with Sam.'conversation.memory.entity_store.get("Sam")    'Sam is working on a hackathon project with Deven.' from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATE from langchain.chains import ConversationChainfrom langchain.llms import OpenAIfrom langchain.memory import ConversationEntityMemoryfrom langchain.memory.entity import SQLiteEntityStorefrom langchain.memory.prompt import ENTITY_MEMORY_CONVERSATION_TEMPLATE  API Reference:ConversationChainOpenAIConversationEntityMemorySQLiteEntityStoreENTITY_MEMORY_CONVERSATION_TEMPLATE entity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,) entity_store = SQLiteEntityStore()llm = OpenAI(temperature=0)memory = ConversationEntityMemory(llm=llm, entity_store=entity_store)conversation = ConversationChain(    llm=llm,    prompt=ENTITY_MEMORY_CONVERSATION_TEMPLATE,    memory=memory,    verbose=True,)  conversation.run("Deven & Sam are working on a hackathon project") conversation.run("Deven & Sam are working on a hackathon project")              > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'             > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'             > Entering new ConversationChain chain...    Prompt after formatting:    You are an assistant to a human, powered by a large language model trained by OpenAI.        You are designed to be able to assist with a wide range of tasks, from answering simple questions to providing in-depth explanations and discussions on a wide range of topics. As a language model, you are able to generate human-like text based on the input you receive, allowing you to engage in natural-sounding conversations and provide responses that are coherent and relevant to the topic at hand.        You are constantly learning and improving, and your capabilities are constantly evolving. You are able to process and understand large amounts of text, and can use this knowledge to provide accurate and informative responses to a wide range of questions. You have access to some personalized information provided by the human in the Context section below. Additionally, you are able to generate your own text based on the input you receive, allowing you to engage in discussions and provide explanations and descriptions on a wide range of topics.        Overall, you are a powerful tool that can help with a wide range of tasks and provide valuable insights and information on a wide range of topics. Whether the human needs help with a specific question or just wants to have a conversation about a particular topic, you are here to assist.        Context:    {'Deven': 'Deven is working on a hackathon project with Sam.', 'Sam': 'Sam is working on a hackathon project with Deven.'}        Current conversation:        Last line:    Human: Deven & Sam are working on a hackathon project    You:        > Finished chain.    ' That sounds like a great project! What kind of project are they working on?'  conversation.memory.entity_store.get("Deven") conversation.memory.entity_store.get("Deven")      'Deven is working on a hackathon project with Sam.'     'Deven is working on a hackathon project with Sam.'     'Deven is working on a hackathon project with Sam.'  conversation.memory.entity_store.get("Sam") conversation.memory.entity_store.get("Sam")      'Sam is working on a hackathon project with Deven.'     'Sam is working on a hackathon project with Deven.'     'Sam is working on a hackathon project with Deven.'  Previous Dynamodb Chat Message History Next Momento Chat Message History CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Cassandra Chat Message History (/docs/integrations/memory/cassandra_chat_message_history) Dynamodb Chat Message History (/docs/integrations/memory/dynamodb_chat_message_history) Entity Memory with SQLite storage (/docs/integrations/memory/entity_memory_with_sqlite) Momento Chat Message History (/docs/integrations/memory/momento_chat_message_history) Mongodb Chat Message History (/docs/integrations/memory/mongodb_chat_message_history) Mot√∂rhead Memory (/docs/integrations/memory/motorhead_memory) Mot√∂rhead Memory (Managed) (/docs/integrations/memory/motorhead_memory_managed) Postgres Chat Message History (/docs/integrations/memory/postgres_chat_message_history) Redis Chat Message History (/docs/integrations/memory/redis_chat_message_history) Rockset Chat Message History (/docs/integrations/memory/rockset_chat_message_history) SQL Chat Message History (/docs/integrations/memory/sql_chat_message_history) Streamlit Chat Message History (/docs/integrations/memory/streamlit_chat_message_history) Xata chat memory (/docs/integrations/memory/xata_chat_message_history) Zep Memory (/docs/integrations/memory/zep_memory) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Memory (/docs/integrations/memory/) ConversationChain (https://api.python.langchain.com/en/latest/chains/langchain.chains.conversation.base.ConversationChain.html) OpenAI (https://api.python.langchain.com/en/latest/llms/langchain.llms.openai.OpenAI.html) ConversationEntityMemory (https://api.python.langchain.com/en/latest/memory/langchain.memory.entity.ConversationEntityMemory.html) SQLiteEntityStore (https://api.python.langchain.com/en/latest/memory/langchain.memory.entity.SQLiteEntityStore.html) ENTITY_MEMORY_CONVERSATION_TEMPLATE (https://api.python.langchain.com/en/latest/prompts/langchain.prompts.prompt.ENTITY_MEMORY_CONVERSATION_TEMPLATE.html) PreviousDynamodb Chat Message History (/docs/integrations/memory/dynamodb_chat_message_history) NextMomento Chat Message History (/docs/integrations/memory/momento_chat_message_history) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)