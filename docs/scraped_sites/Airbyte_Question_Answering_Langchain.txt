This notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader. Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions.  IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbits AINetwork Airbyte Question Answering Amadeus Azure Cognitive Services CSV Document Comparison Github Gitlab Gmail Google Drive tool Jira JSON MultiOn Office365 OpenAPI Natural Language APIs Pandas Dataframe PlayWright Browser PowerBI Dataset Python Spark Dataframe Spark SQL SQL Database Vectorstore Xorbits Tools Vector stores Grouped by provider  Integrations Agents & Toolkits Airbyte Question Answering Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader. AirbyteStripeLoader ChatOpenAI AgentType create_pandas_dataframe_agent Pass the data to pandas¬†dataframe. Pass the dataframe df to the create_pandas_dataframe_agent and invoke Run the agent Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsAirbyte Question AnsweringAirbyte Question AnsweringThis notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions. Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader.import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agentPass the data to pandas¬†dataframe.df = pd.DataFrame(data)Pass the dataframe df to the create_pandas_dataframe_agent and invokeagent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)Run the agentoutput = agent.run("How many rows are there?")PreviousAINetworkNextAmadeusCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsAirbyte Question AnsweringAirbyte Question AnsweringThis notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions. Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader.import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agentPass the data to pandas¬†dataframe.df = pd.DataFrame(data)Pass the dataframe df to the create_pandas_dataframe_agent and invokeagent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)Run the agentoutput = agent.run("How many rows are there?")PreviousAINetworkNextAmadeus IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by providerIntegrationsAgents & ToolkitsAirbyte Question AnsweringAirbyte Question AnsweringThis notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions. Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader.import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agentPass the data to pandas¬†dataframe.df = pd.DataFrame(data)Pass the dataframe df to the create_pandas_dataframe_agent and invokeagent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)Run the agentoutput = agent.run("How many rows are there?")PreviousAINetworkNextAmadeus IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsAINetworkAirbyte Question AnsweringAmadeusAzure Cognitive ServicesCSVDocument ComparisonGithubGitlabGmailGoogle Drive toolJiraJSONMultiOnOffice365OpenAPINatural Language APIsPandas DataframePlayWright BrowserPowerBI DatasetPythonSpark DataframeSpark SQLSQL DatabaseVectorstoreXorbitsToolsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsAgents & ToolkitsAirbyte Question AnsweringAirbyte Question AnsweringThis notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions. Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader.import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agentPass the data to pandas¬†dataframe.df = pd.DataFrame(data)Pass the dataframe df to the create_pandas_dataframe_agent and invokeagent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)Run the agentoutput = agent.run("How many rows are there?")PreviousAINetworkNextAmadeus IntegrationsAgents & ToolkitsAirbyte Question AnsweringAirbyte Question AnsweringThis notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions. Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader.import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agentPass the data to pandas¬†dataframe.df = pd.DataFrame(data)Pass the dataframe df to the create_pandas_dataframe_agent and invokeagent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)Run the agentoutput = agent.run("How many rows are there?")PreviousAINetworkNextAmadeus IntegrationsAgents & ToolkitsAirbyte Question AnsweringAirbyte Question AnsweringThis notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions. Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader.import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agentPass the data to pandas¬†dataframe.df = pd.DataFrame(data)Pass the dataframe df to the create_pandas_dataframe_agent and invokeagent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)Run the agentoutput = agent.run("How many rows are there?")PreviousAINetworkNextAmadeus IntegrationsAgents & ToolkitsAirbyte Question AnsweringAirbyte Question AnsweringThis notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions. Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader.import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agentPass the data to pandas¬†dataframe.df = pd.DataFrame(data)Pass the dataframe df to the create_pandas_dataframe_agent and invokeagent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)Run the agentoutput = agent.run("How many rows are there?")PreviousAINetworkNextAmadeus Airbyte Question AnsweringThis notebook shows how to do question answering over structured data, in this case using the AirbyteStripeLoader.Vectorstores often have a hard time answering questions that requires computing, grouping and filtering structured data so the high level idea is to use a pandas¬†dataframe to help with these types of questions. Load data from Stripe using Airbyte. user the record_handler¬†paramater to return a JSON from the data loader.import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agentPass the data to pandas¬†dataframe.df = pd.DataFrame(data)Pass the dataframe df to the create_pandas_dataframe_agent and invokeagent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)Run the agentoutput = agent.run("How many rows are there?") import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load() import osimport pandas as pdfrom langchain.document_loaders.airbyte import AirbyteStripeLoaderfrom langchain.chat_models.openai import ChatOpenAIfrom langchain.agents import AgentType, create_pandas_dataframe_agentstream_name = "customers"config = {    "client_secret": os.getenv("STRIPE_CLIENT_SECRET"),    "account_id": os.getenv("STRIPE_ACCOUNT_D"),    "start_date": "2023-01-20T00:00:00Z",}def handle_record(record: dict, _id: str):    return record.dataloader = AirbyteStripeLoader(    config=config,    record_handler=handle_record,    stream_name=stream_name,)data = loader.load()  API Reference:AirbyteStripeLoaderChatOpenAIAgentTypecreate_pandas_dataframe_agent df = pd.DataFrame(data) df = pd.DataFrame(data)  agent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,) agent = create_pandas_dataframe_agent(    ChatOpenAI(temperature=0, model="gpt-4"),    df,    verbose=True,    agent_type=AgentType.OPENAI_FUNCTIONS,)  output = agent.run("How many rows are there?") output = agent.run("How many rows are there?")  Previous AINetwork Next Amadeus CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) AINetwork (/docs/integrations/toolkits/ainetwork) Airbyte Question Answering (/docs/integrations/toolkits/airbyte_structured_qa) Amadeus (/docs/integrations/toolkits/amadeus) Azure Cognitive Services (/docs/integrations/toolkits/azure_cognitive_services) CSV (/docs/integrations/toolkits/csv) Document Comparison (/docs/integrations/toolkits/document_comparison_toolkit) Github (/docs/integrations/toolkits/github) Gitlab (/docs/integrations/toolkits/gitlab) Gmail (/docs/integrations/toolkits/gmail) Google Drive tool (/docs/integrations/toolkits/google_drive) Jira (/docs/integrations/toolkits/jira) JSON (/docs/integrations/toolkits/json) MultiOn (/docs/integrations/toolkits/multion) Office365 (/docs/integrations/toolkits/office365) OpenAPI (/docs/integrations/toolkits/openapi) Natural Language APIs (/docs/integrations/toolkits/openapi_nla) Pandas Dataframe (/docs/integrations/toolkits/pandas) PlayWright Browser (/docs/integrations/toolkits/playwright) PowerBI Dataset (/docs/integrations/toolkits/powerbi) Python (/docs/integrations/toolkits/python) Spark Dataframe (/docs/integrations/toolkits/spark) Spark SQL (/docs/integrations/toolkits/spark_sql) SQL Database (/docs/integrations/toolkits/sql_database) Vectorstore (/docs/integrations/toolkits/vectorstore) Xorbits (/docs/integrations/toolkits/xorbits) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Agents & Toolkits (/docs/integrations/toolkits/) AirbyteStripeLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.airbyte.AirbyteStripeLoader.html) ChatOpenAI (https://api.python.langchain.com/en/latest/chat_models/langchain.chat_models.openai.ChatOpenAI.html) AgentType (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_types.AgentType.html) create_pandas_dataframe_agent (https://api.python.langchain.com/en/latest/agents/langchain.agents.agent_toolkits.pandas.base.create_pandas_dataframe_agent.html) PreviousAINetwork (/docs/integrations/toolkits/ainetwork) NextAmadeus (/docs/integrations/toolkits/amadeus) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)