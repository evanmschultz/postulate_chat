This notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc. You can obtain your API credentials by registering on the DataForSeo website. The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic. run and results are two methods provided by the DataForSeoAPIWrapper class. The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest. The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API. You can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return. You can specify the location and language of your search results by passing additional parameters to the API wrapper. You can also specify the search engine you want to use. The API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search. You can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits ToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language Actions Alpha Vantage Apify ArXiv AWS Lambda Shell (bash) Bing Search Brave Search ChatGPT Plugins Dall-E Image Generator DataForSeo DuckDuckGo Search Eden AI File System Golden Query Google Drive Google Places Google Search Google Serper Gradio GraphQL HuggingFace Hub Tools Human as a tool IFTTT WebHooks Lemon Agent Metaphor Search Nuclia Understanding OpenWeatherMap PubMed Requests SceneXplain Search Tools SearxNG Search SerpAPI Twilio Wikipedia Wolfram Alpha Yahoo Finance News YouTube Zapier Natural Language Actions Vector stores Grouped by provider  Integrations Tools DataForSeo DataForSeoAPIWrapper Tool Setting up the API credentials The Difference Between run and results Getting Results as JSON Customizing Location and Language Customizing the Search Engine Customizing the Search Type Integration with Langchain Agents Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsDataForSeoOn this pageDataForSeoThis notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc.from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapperAPI Reference:DataForSeoAPIWrapperSetting up the API credentials‚ÄãYou can obtain your API credentials by registering on the DataForSeo website.import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic.wrapper.run("Weather in Los Angeles")The Difference Between run and results‚Äãrun and results are two methods provided by the DataForSeoAPIWrapper class.The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest.The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API.Getting Results as JSON‚ÄãYou can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return.json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)json_wrapper.results("Bill Gates")Customizing Location and Language‚ÄãYou can specify the location and language of your search results by passing additional parameters to the API wrapper.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")Customizing the Search Engine‚ÄãYou can also specify the search engine you want to use.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")Customizing the Search Type‚ÄãThe API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search.maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")Integration with Langchain Agents‚ÄãYou can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call.from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)API Reference:ToolPreviousDall-E Image GeneratorNextDuckDuckGo SearchSetting up the API credentialsThe Difference Between run and resultsGetting Results as JSONCustomizing Location and LanguageCustomizing the Search EngineCustomizing the Search TypeIntegration with Langchain AgentsCommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsDataForSeoOn this pageDataForSeoThis notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc.from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapperAPI Reference:DataForSeoAPIWrapperSetting up the API credentials‚ÄãYou can obtain your API credentials by registering on the DataForSeo website.import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic.wrapper.run("Weather in Los Angeles")The Difference Between run and results‚Äãrun and results are two methods provided by the DataForSeoAPIWrapper class.The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest.The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API.Getting Results as JSON‚ÄãYou can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return.json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)json_wrapper.results("Bill Gates")Customizing Location and Language‚ÄãYou can specify the location and language of your search results by passing additional parameters to the API wrapper.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")Customizing the Search Engine‚ÄãYou can also specify the search engine you want to use.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")Customizing the Search Type‚ÄãThe API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search.maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")Integration with Langchain Agents‚ÄãYou can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call.from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)API Reference:ToolPreviousDall-E Image GeneratorNextDuckDuckGo SearchSetting up the API credentialsThe Difference Between run and resultsGetting Results as JSONCustomizing Location and LanguageCustomizing the Search EngineCustomizing the Search TypeIntegration with Langchain Agents IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by providerIntegrationsToolsDataForSeoOn this pageDataForSeoThis notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc.from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapperAPI Reference:DataForSeoAPIWrapperSetting up the API credentials‚ÄãYou can obtain your API credentials by registering on the DataForSeo website.import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic.wrapper.run("Weather in Los Angeles")The Difference Between run and results‚Äãrun and results are two methods provided by the DataForSeoAPIWrapper class.The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest.The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API.Getting Results as JSON‚ÄãYou can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return.json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)json_wrapper.results("Bill Gates")Customizing Location and Language‚ÄãYou can specify the location and language of your search results by passing additional parameters to the API wrapper.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")Customizing the Search Engine‚ÄãYou can also specify the search engine you want to use.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")Customizing the Search Type‚ÄãThe API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search.maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")Integration with Langchain Agents‚ÄãYou can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call.from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)API Reference:ToolPreviousDall-E Image GeneratorNextDuckDuckGo SearchSetting up the API credentialsThe Difference Between run and resultsGetting Results as JSONCustomizing Location and LanguageCustomizing the Search EngineCustomizing the Search TypeIntegration with Langchain Agents IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsAlpha VantageApifyArXivAWS LambdaShell (bash)Bing SearchBrave SearchChatGPT PluginsDall-E Image GeneratorDataForSeoDuckDuckGo SearchEden AIFile SystemGolden QueryGoogle DriveGoogle PlacesGoogle SearchGoogle SerperGradioGraphQLHuggingFace Hub ToolsHuman as a toolIFTTT WebHooksLemon AgentMetaphor SearchNuclia UnderstandingOpenWeatherMapPubMedRequestsSceneXplainSearch ToolsSearxNG SearchSerpAPITwilioWikipediaWolfram AlphaYahoo Finance NewsYouTubeZapier Natural Language ActionsVector storesGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsToolsDataForSeoOn this pageDataForSeoThis notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc.from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapperAPI Reference:DataForSeoAPIWrapperSetting up the API credentials‚ÄãYou can obtain your API credentials by registering on the DataForSeo website.import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic.wrapper.run("Weather in Los Angeles")The Difference Between run and results‚Äãrun and results are two methods provided by the DataForSeoAPIWrapper class.The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest.The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API.Getting Results as JSON‚ÄãYou can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return.json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)json_wrapper.results("Bill Gates")Customizing Location and Language‚ÄãYou can specify the location and language of your search results by passing additional parameters to the API wrapper.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")Customizing the Search Engine‚ÄãYou can also specify the search engine you want to use.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")Customizing the Search Type‚ÄãThe API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search.maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")Integration with Langchain Agents‚ÄãYou can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call.from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)API Reference:ToolPreviousDall-E Image GeneratorNextDuckDuckGo SearchSetting up the API credentialsThe Difference Between run and resultsGetting Results as JSONCustomizing Location and LanguageCustomizing the Search EngineCustomizing the Search TypeIntegration with Langchain Agents IntegrationsToolsDataForSeoOn this pageDataForSeoThis notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc.from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapperAPI Reference:DataForSeoAPIWrapperSetting up the API credentials‚ÄãYou can obtain your API credentials by registering on the DataForSeo website.import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic.wrapper.run("Weather in Los Angeles")The Difference Between run and results‚Äãrun and results are two methods provided by the DataForSeoAPIWrapper class.The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest.The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API.Getting Results as JSON‚ÄãYou can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return.json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)json_wrapper.results("Bill Gates")Customizing Location and Language‚ÄãYou can specify the location and language of your search results by passing additional parameters to the API wrapper.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")Customizing the Search Engine‚ÄãYou can also specify the search engine you want to use.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")Customizing the Search Type‚ÄãThe API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search.maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")Integration with Langchain Agents‚ÄãYou can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call.from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)API Reference:ToolPreviousDall-E Image GeneratorNextDuckDuckGo SearchSetting up the API credentialsThe Difference Between run and resultsGetting Results as JSONCustomizing Location and LanguageCustomizing the Search EngineCustomizing the Search TypeIntegration with Langchain Agents IntegrationsToolsDataForSeoOn this pageDataForSeoThis notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc.from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapperAPI Reference:DataForSeoAPIWrapperSetting up the API credentials‚ÄãYou can obtain your API credentials by registering on the DataForSeo website.import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic.wrapper.run("Weather in Los Angeles")The Difference Between run and results‚Äãrun and results are two methods provided by the DataForSeoAPIWrapper class.The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest.The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API.Getting Results as JSON‚ÄãYou can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return.json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)json_wrapper.results("Bill Gates")Customizing Location and Language‚ÄãYou can specify the location and language of your search results by passing additional parameters to the API wrapper.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")Customizing the Search Engine‚ÄãYou can also specify the search engine you want to use.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")Customizing the Search Type‚ÄãThe API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search.maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")Integration with Langchain Agents‚ÄãYou can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call.from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)API Reference:ToolPreviousDall-E Image GeneratorNextDuckDuckGo Search IntegrationsToolsDataForSeoOn this pageDataForSeoThis notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc.from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapperAPI Reference:DataForSeoAPIWrapperSetting up the API credentials‚ÄãYou can obtain your API credentials by registering on the DataForSeo website.import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic.wrapper.run("Weather in Los Angeles")The Difference Between run and results‚Äãrun and results are two methods provided by the DataForSeoAPIWrapper class.The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest.The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API.Getting Results as JSON‚ÄãYou can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return.json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)json_wrapper.results("Bill Gates")Customizing Location and Language‚ÄãYou can specify the location and language of your search results by passing additional parameters to the API wrapper.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")Customizing the Search Engine‚ÄãYou can also specify the search engine you want to use.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")Customizing the Search Type‚ÄãThe API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search.maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")Integration with Langchain Agents‚ÄãYou can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call.from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)API Reference:ToolPreviousDall-E Image GeneratorNextDuckDuckGo Search On this page DataForSeoThis notebook demonstrates how to use the DataForSeo API to obtain search engine results. The DataForSeo API retrieves SERP from most popular search engines like Google, Bing, Yahoo. It also allows to get SERPs from different search engine types like Maps, News, Events, etc.from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapperAPI Reference:DataForSeoAPIWrapperSetting up the API credentials‚ÄãYou can obtain your API credentials by registering on the DataForSeo website.import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()The run method will return the first result snippet from one of the following elements: answer_box, knowledge_graph, featured_snippet, shopping, organic.wrapper.run("Weather in Los Angeles")The Difference Between run and results‚Äãrun and results are two methods provided by the DataForSeoAPIWrapper class.The run method executes the search and returns the first result snippet from the answer box, knowledge graph, featured snippet, shopping, or organic results. These elements are sorted by priority from highest to lowest.The results method returns a JSON response configured according to the parameters set in the wrapper. This allows for more flexibility in terms of what data you want to return from the API.Getting Results as JSON‚ÄãYou can customize the result types and fields you want to return in the JSON response. You can also set a maximum count for the number of top results to return.json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)json_wrapper.results("Bill Gates")Customizing Location and Language‚ÄãYou can specify the location and language of your search results by passing additional parameters to the API wrapper.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")Customizing the Search Engine‚ÄãYou can also specify the search engine you want to use.customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")Customizing the Search Type‚ÄãThe API wrapper also allows you to specify the type of search you want to perform. For example, you can perform a maps search.maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")Integration with Langchain Agents‚ÄãYou can use the Tool class from the langchain.agents module to integrate the DataForSeoAPIWrapper with a langchain agent. The Tool class encapsulates a function that the agent can call.from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)API Reference:Tool from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapper from langchain.utilities.dataforseo_api_search import DataForSeoAPIWrapper  API Reference:DataForSeoAPIWrapper import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper() import osos.environ["DATAFORSEO_LOGIN"] = "your_api_access_username"os.environ["DATAFORSEO_PASSWORD"] = "your_api_access_password"wrapper = DataForSeoAPIWrapper()  wrapper.run("Weather in Los Angeles") wrapper.run("Weather in Los Angeles")  json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,) json_wrapper = DataForSeoAPIWrapper(    json_result_types=["organic", "knowledge_graph", "answer_box"],    json_result_fields=["type", "title", "description", "text"],    top_count=3,)  json_wrapper.results("Bill Gates") json_wrapper.results("Bill Gates")  customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me") customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en"},)customized_wrapper.results("coffee near me")  customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me") customized_wrapper = DataForSeoAPIWrapper(    top_count=10,    json_result_types=["organic", "local_pack"],    json_result_fields=["title", "description", "type"],    params={"location_name": "Germany", "language_code": "en", "se_name": "bing"},)customized_wrapper.results("coffee near me")  maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me") maps_search = DataForSeoAPIWrapper(    top_count=10,    json_result_fields=["title", "value", "address", "rating", "type"],    params={        "location_coordinate": "52.512,13.36,12z",        "language_code": "en",        "se_type": "maps",    },)maps_search.results("coffee near me")  from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,) from langchain.agents import Toolsearch = DataForSeoAPIWrapper(    top_count=3,    json_result_types=["organic"],    json_result_fields=["title", "description", "type"],)tool = Tool(    name="google-search-answer",    description="My new answer tool",    func=search.run,)json_tool = Tool(    name="google-search-json",    description="My new json tool",    func=search.results,)  API Reference:Tool Previous Dall-E Image Generator Next DuckDuckGo Search Setting up the API credentialsThe Difference Between run and resultsGetting Results as JSONCustomizing Location and LanguageCustomizing the Search EngineCustomizing the Search TypeIntegration with Langchain Agents Setting up the API credentialsThe Difference Between run and resultsGetting Results as JSONCustomizing Location and LanguageCustomizing the Search EngineCustomizing the Search TypeIntegration with Langchain Agents CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Alpha Vantage (/docs/integrations/tools/alpha_vantage) Apify (/docs/integrations/tools/apify) ArXiv (/docs/integrations/tools/arxiv) AWS Lambda (/docs/integrations/tools/awslambda) Shell (bash) (/docs/integrations/tools/bash) Bing Search (/docs/integrations/tools/bing_search) Brave Search (/docs/integrations/tools/brave_search) ChatGPT Plugins (/docs/integrations/tools/chatgpt_plugins) Dall-E Image Generator (/docs/integrations/tools/dalle_image_generator) DataForSeo (/docs/integrations/tools/dataforseo) DuckDuckGo Search (/docs/integrations/tools/ddg) Eden AI (/docs/integrations/tools/edenai_tools) File System (/docs/integrations/tools/filesystem) Golden Query (/docs/integrations/tools/golden_query) Google Drive (/docs/integrations/tools/google_drive) Google Places (/docs/integrations/tools/google_places) Google Search (/docs/integrations/tools/google_search) Google Serper (/docs/integrations/tools/google_serper) Gradio (/docs/integrations/tools/gradio_tools) GraphQL (/docs/integrations/tools/graphql) HuggingFace Hub Tools (/docs/integrations/tools/huggingface_tools) Human as a tool (/docs/integrations/tools/human_tools) IFTTT WebHooks (/docs/integrations/tools/ifttt) Lemon Agent (/docs/integrations/tools/lemonai) Metaphor Search (/docs/integrations/tools/metaphor_search) Nuclia Understanding (/docs/integrations/tools/nuclia) OpenWeatherMap (/docs/integrations/tools/openweathermap) PubMed (/docs/integrations/tools/pubmed) Requests (/docs/integrations/tools/requests) SceneXplain (/docs/integrations/tools/sceneXplain) Search Tools (/docs/integrations/tools/search_tools) SearxNG Search (/docs/integrations/tools/searx_search) SerpAPI (/docs/integrations/tools/serpapi) Twilio (/docs/integrations/tools/twilio) Wikipedia (/docs/integrations/tools/wikipedia) Wolfram Alpha (/docs/integrations/tools/wolfram_alpha) Yahoo Finance News (/docs/integrations/tools/yahoo_finance_news) YouTube (/docs/integrations/tools/youtube) Zapier Natural Language Actions (/docs/integrations/tools/zapier) Vector stores (/docs/integrations/vectorstores/) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Tools (/docs/integrations/tools/) DataForSeoAPIWrapper (https://api.python.langchain.com/en/latest/utilities/langchain.utilities.dataforseo_api_search.DataForSeoAPIWrapper.html) ‚Äã (#setting-up-the-api-credentials) ‚Äã (#the-difference-between-run-and-results) ‚Äã (#getting-results-as-json) ‚Äã (#customizing-location-and-language) ‚Äã (#customizing-the-search-engine) ‚Äã (#customizing-the-search-type) ‚Äã (#integration-with-langchain-agents) Tool (https://api.python.langchain.com/en/latest/tools/langchain.tools.base.Tool.html) PreviousDall-E Image Generator (/docs/integrations/tools/dalle_image_generator) NextDuckDuckGo Search (/docs/integrations/tools/ddg) Setting up the API credentials (#setting-up-the-api-credentials) The Difference Between run and results (#the-difference-between-run-and-results) Getting Results as JSON (#getting-results-as-json) Customizing Location and Language (#customizing-location-and-language) Customizing the Search Engine (#customizing-the-search-engine) Customizing the Search Type (#customizing-the-search-type) Integration with Langchain Agents (#integration-with-langchain-agents) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)