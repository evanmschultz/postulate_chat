OpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene. This notebook shows how to use functionality related to the OpenSearch database. To run, you should have an OpenSearch instance up and running: see here for an easy Docker installation. similarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for large datasets. To perform brute force search we have other search methods known as Script Scoring and Painless Scripting. Check this for more details. Install the Python client. We want to use OpenAIEmbeddings so we have to get the OpenAI API Key. similarity_search using Approximate k-NN Search with Custom Parameters similarity_search using Script Scoring with Custom Parameters similarity_search using Painless Scripting with Custom Parameters If you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents. It's also possible to use a preexisting OpenSearch instance with documents that already have vectors present. IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZilliz Activeloop Deep Lake Alibaba Cloud OpenSearch AnalyticDB Annoy Atlas AwaDB Azure Cognitive Search BagelDB Cassandra Chroma ClickHouse DashVector Dingo DocArray HnswSearch DocArray InMemorySearch Elasticsearch Epsilla Faiss Hologres LanceDB Marqo Google Vertex AI MatchingEngine Meilisearch Milvus MongoDB Atlas MyScale Neo4j Vector Index NucliaDB OpenSearch Postgres Embedding PGVector Pinecone Qdrant Redis Rockset ScaNN SingleStoreDB scikit-learn sqlite-vss StarRocks Supabase (Postgres) Tair Tencent Cloud VectorDB Tigris Typesense USearch vearch Vectara Weaviate Xata Zep Zilliz Grouped by provider  Integrations Vector stores OpenSearch OpenAIEmbeddings CharacterTextSplitter OpenSearchVectorSearch TextLoader TextLoader Installation similarity_search using Approximate k-NN similarity_search using Script Scoring similarity_search using Painless Scripting Maximum marginal relevance search (MMR) Using a preexisting OpenSearch instance Using AOSS (Amazon OpenSearch Service Serverless) Using AOS (Amazon OpenSearch Service) Discord Twitter Python JS/TS Homepage Blog Skip to main contentü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLKIntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesOpenSearchOn this pageOpenSearchOpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.This notebook shows how to use functionality related to the OpenSearch database.To run, you should have an OpenSearch instance up and running: see here for an easy Docker installation.similarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for Check this for more details.Installation‚ÄãInstall the Python client.pip install opensearch-pyWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsCharacterTextSplitterOpenSearchVectorSearchTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoadersimilarity_search using Approximate k-NN‚Äãsimilarity_search using Approximate k-NN Search with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# )query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10)print(docs[0].page_content)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)print(docs[0].page_content)similarity_search using Script Scoring‚Äãsimilarity_search using Script Scoring with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",)print(docs[0].page_content)similarity_search using Painless Scripting‚Äãsimilarity_search using Painless Scripting with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,)print(docs[0].page_content)Maximum marginal relevance search (MMR)‚ÄãIf you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents.query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)Using a preexisting OpenSearch instance‚ÄãIt's also possible to use a preexisting OpenSearch instance with documents that already have vectors present.# this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",)Using AOSS (Amazon OpenSearch Service Serverless)‚Äã# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,)Using AOS (Amazon OpenSearch Service)‚Äã# This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,)PreviousNucliaDBNextPostgres EmbeddingInstallationsimilarity_search using Approximate k-NNsimilarity_search using Script Scoringsimilarity_search using Painless ScriptingMaximum marginal relevance search (MMR)Using a preexisting OpenSearch instanceUsing AOSS (Amazon OpenSearch Service Serverless)Using AOS (Amazon OpenSearch Service)CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. Skip to main content ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPILangSmithJS/TS DocsCTRLK ü¶úÔ∏èüîó LangChainDocsUse casesIntegrationsAPI LangSmithJS/TS DocsCTRLK  CTRLK CTRLK  CTRLK   IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesOpenSearchOn this pageOpenSearchOpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.This notebook shows how to use functionality related to the OpenSearch database.To run, you should have an OpenSearch instance up and running: see here for an easy Docker installation.similarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for Check this for more details.Installation‚ÄãInstall the Python client.pip install opensearch-pyWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsCharacterTextSplitterOpenSearchVectorSearchTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoadersimilarity_search using Approximate k-NN‚Äãsimilarity_search using Approximate k-NN Search with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# )query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10)print(docs[0].page_content)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)print(docs[0].page_content)similarity_search using Script Scoring‚Äãsimilarity_search using Script Scoring with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",)print(docs[0].page_content)similarity_search using Painless Scripting‚Äãsimilarity_search using Painless Scripting with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,)print(docs[0].page_content)Maximum marginal relevance search (MMR)‚ÄãIf you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents.query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)Using a preexisting OpenSearch instance‚ÄãIt's also possible to use a preexisting OpenSearch instance with documents that already have vectors present.# this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",)Using AOSS (Amazon OpenSearch Service Serverless)‚Äã# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,)Using AOS (Amazon OpenSearch Service)‚Äã# This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,)PreviousNucliaDBNextPostgres EmbeddingInstallationsimilarity_search using Approximate k-NNsimilarity_search using Script Scoringsimilarity_search using Painless ScriptingMaximum marginal relevance search (MMR)Using a preexisting OpenSearch instanceUsing AOSS (Amazon OpenSearch Service Serverless)Using AOS (Amazon OpenSearch Service) IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by providerIntegrationsVector storesOpenSearchOn this pageOpenSearchOpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.This notebook shows how to use functionality related to the OpenSearch database.To run, you should have an OpenSearch instance up and running: see here for an easy Docker installation.similarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for Check this for more details.Installation‚ÄãInstall the Python client.pip install opensearch-pyWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsCharacterTextSplitterOpenSearchVectorSearchTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoadersimilarity_search using Approximate k-NN‚Äãsimilarity_search using Approximate k-NN Search with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# )query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10)print(docs[0].page_content)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)print(docs[0].page_content)similarity_search using Script Scoring‚Äãsimilarity_search using Script Scoring with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",)print(docs[0].page_content)similarity_search using Painless Scripting‚Äãsimilarity_search using Painless Scripting with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,)print(docs[0].page_content)Maximum marginal relevance search (MMR)‚ÄãIf you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents.query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)Using a preexisting OpenSearch instance‚ÄãIt's also possible to use a preexisting OpenSearch instance with documents that already have vectors present.# this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",)Using AOSS (Amazon OpenSearch Service Serverless)‚Äã# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,)Using AOS (Amazon OpenSearch Service)‚Äã# This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,)PreviousNucliaDBNextPostgres EmbeddingInstallationsimilarity_search using Approximate k-NNsimilarity_search using Script Scoringsimilarity_search using Painless ScriptingMaximum marginal relevance search (MMR)Using a preexisting OpenSearch instanceUsing AOSS (Amazon OpenSearch Service Serverless)Using AOS (Amazon OpenSearch Service) IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider IntegrationsCallbacksChat modelsChat loadersDocument loadersDocument transformersLLMsMemoryRetrieversText embedding modelsAgents & ToolkitsToolsVector storesActiveloop Deep LakeAlibaba Cloud OpenSearchAnalyticDBAnnoyAtlasAwaDBAzure Cognitive SearchBagelDBCassandraChromaClickHouseDashVectorDingoDocArray HnswSearchDocArray InMemorySearchElasticsearchEpsillaFaissHologresLanceDBMarqoGoogle Vertex AI MatchingEngineMeilisearchMilvusMongoDB AtlasMyScaleNeo4j Vector IndexNucliaDBOpenSearchPostgres EmbeddingPGVectorPineconeQdrantRedisRocksetScaNNSingleStoreDBscikit-learnsqlite-vssStarRocksSupabase (Postgres)TairTencent Cloud VectorDBTigrisTypesenseUSearchvearchVectaraWeaviateXataZepZillizGrouped by provider Integrations Callbacks Chat models Chat loaders Document loaders Document transformers LLMs Memory Retrievers Text embedding models Agents & Toolkits Tools Vector stores Grouped by provider IntegrationsVector storesOpenSearchOn this pageOpenSearchOpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.This notebook shows how to use functionality related to the OpenSearch database.To run, you should have an OpenSearch instance up and running: see here for an easy Docker installation.similarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for Check this for more details.Installation‚ÄãInstall the Python client.pip install opensearch-pyWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsCharacterTextSplitterOpenSearchVectorSearchTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoadersimilarity_search using Approximate k-NN‚Äãsimilarity_search using Approximate k-NN Search with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# )query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10)print(docs[0].page_content)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)print(docs[0].page_content)similarity_search using Script Scoring‚Äãsimilarity_search using Script Scoring with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",)print(docs[0].page_content)similarity_search using Painless Scripting‚Äãsimilarity_search using Painless Scripting with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,)print(docs[0].page_content)Maximum marginal relevance search (MMR)‚ÄãIf you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents.query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)Using a preexisting OpenSearch instance‚ÄãIt's also possible to use a preexisting OpenSearch instance with documents that already have vectors present.# this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",)Using AOSS (Amazon OpenSearch Service Serverless)‚Äã# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,)Using AOS (Amazon OpenSearch Service)‚Äã# This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,)PreviousNucliaDBNextPostgres EmbeddingInstallationsimilarity_search using Approximate k-NNsimilarity_search using Script Scoringsimilarity_search using Painless ScriptingMaximum marginal relevance search (MMR)Using a preexisting OpenSearch instanceUsing AOSS (Amazon OpenSearch Service Serverless)Using AOS (Amazon OpenSearch Service) IntegrationsVector storesOpenSearchOn this pageOpenSearchOpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.This notebook shows how to use functionality related to the OpenSearch database.To run, you should have an OpenSearch instance up and running: see here for an easy Docker installation.similarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for Check this for more details.Installation‚ÄãInstall the Python client.pip install opensearch-pyWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsCharacterTextSplitterOpenSearchVectorSearchTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoadersimilarity_search using Approximate k-NN‚Äãsimilarity_search using Approximate k-NN Search with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# )query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10)print(docs[0].page_content)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)print(docs[0].page_content)similarity_search using Script Scoring‚Äãsimilarity_search using Script Scoring with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",)print(docs[0].page_content)similarity_search using Painless Scripting‚Äãsimilarity_search using Painless Scripting with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,)print(docs[0].page_content)Maximum marginal relevance search (MMR)‚ÄãIf you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents.query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)Using a preexisting OpenSearch instance‚ÄãIt's also possible to use a preexisting OpenSearch instance with documents that already have vectors present.# this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",)Using AOSS (Amazon OpenSearch Service Serverless)‚Äã# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,)Using AOS (Amazon OpenSearch Service)‚Äã# This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,)PreviousNucliaDBNextPostgres Embedding IntegrationsVector storesOpenSearchOn this pageOpenSearchOpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.This notebook shows how to use functionality related to the OpenSearch database.To run, you should have an OpenSearch instance up and running: see here for an easy Docker installation.similarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for Check this for more details.Installation‚ÄãInstall the Python client.pip install opensearch-pyWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsCharacterTextSplitterOpenSearchVectorSearchTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoadersimilarity_search using Approximate k-NN‚Äãsimilarity_search using Approximate k-NN Search with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# )query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10)print(docs[0].page_content)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)print(docs[0].page_content)similarity_search using Script Scoring‚Äãsimilarity_search using Script Scoring with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",)print(docs[0].page_content)similarity_search using Painless Scripting‚Äãsimilarity_search using Painless Scripting with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,)print(docs[0].page_content)Maximum marginal relevance search (MMR)‚ÄãIf you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents.query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)Using a preexisting OpenSearch instance‚ÄãIt's also possible to use a preexisting OpenSearch instance with documents that already have vectors present.# this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",)Using AOSS (Amazon OpenSearch Service Serverless)‚Äã# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,)Using AOS (Amazon OpenSearch Service)‚Äã# This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,)PreviousNucliaDBNextPostgres Embedding On this page OpenSearchOpenSearch is a scalable, flexible, and extensible open-source software suite for search, analytics, and observability applications licensed under Apache 2.0. OpenSearch is a distributed search and analytics engine based on Apache Lucene.This notebook shows how to use functionality related to the OpenSearch database.To run, you should have an OpenSearch instance up and running: see here for an easy Docker installation.similarity_search by default performs the Approximate k-NN Search which uses one of the several algorithms like lucene, nmslib, faiss recommended for Check this for more details.Installation‚ÄãInstall the Python client.pip install opensearch-pyWe want to use OpenAIEmbeddings so we have to get the OpenAI API Key.import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoaderAPI Reference:OpenAIEmbeddingsCharacterTextSplitterOpenSearchVectorSearchTextLoaderfrom langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()API Reference:TextLoadersimilarity_search using Approximate k-NN‚Äãsimilarity_search using Approximate k-NN Search with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# )query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10)print(docs[0].page_content)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)print(docs[0].page_content)similarity_search using Script Scoring‚Äãsimilarity_search using Script Scoring with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",)print(docs[0].page_content)similarity_search using Painless Scripting‚Äãsimilarity_search using Painless Scripting with Custom Parametersdocsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,)print(docs[0].page_content)Maximum marginal relevance search (MMR)‚ÄãIf you‚Äôd like to look up for some similar documents, but you‚Äôd also like to receive diverse results, MMR is method you should consider. Maximal marginal relevance optimizes for similarity to query AND diversity among selected documents.query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)Using a preexisting OpenSearch instance‚ÄãIt's also possible to use a preexisting OpenSearch instance with documents that already have vectors present.# this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",)Using AOSS (Amazon OpenSearch Service Serverless)‚Äã# This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,)Using AOS (Amazon OpenSearch Service)‚Äã# This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,) pip install opensearch-py pip install opensearch-py  import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:") import osimport getpassos.environ["OPENAI_API_KEY"] = getpass.getpass("OpenAI API Key:")  from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoader from langchain.embeddings.openai import OpenAIEmbeddingsfrom langchain.text_splitter import CharacterTextSplitterfrom langchain.vectorstores import OpenSearchVectorSearchfrom langchain.document_loaders import TextLoader  API Reference:OpenAIEmbeddingsCharacterTextSplitterOpenSearchVectorSearchTextLoader from langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings() from langchain.document_loaders import TextLoaderloader = TextLoader("../../../state_of_the_union.txt")documents = loader.load()text_splitter = CharacterTextSplitter(chunk_size=1000, chunk_overlap=0)docs = text_splitter.split_documents(documents)embeddings = OpenAIEmbeddings()  API Reference:TextLoader docsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# ) docsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200")# If using the default Docker installation, use this instantiation instead:# docsearch = OpenSearchVectorSearch.from_documents(#     docs,#     embeddings,#     opensearch_url="https://localhost:9200",#     http_auth=("admin", "admin"),#     use_ssl = False,#     verify_certs = False,#     ssl_assert_hostname = False,#     ssl_show_warn = False,# )  query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10) query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query, k=10)  print(docs[0].page_content) print(docs[0].page_content)  docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query) docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="http://localhost:9200",    engine="faiss",    space_type="innerproduct",    ef_construction=256,    m=48,)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(query)  print(docs[0].page_content) print(docs[0].page_content)  docsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",) docsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    k=1,    search_type="script_scoring",)  print(docs[0].page_content) print(docs[0].page_content)  docsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,) docsearch = OpenSearchVectorSearch.from_documents(    docs, embeddings, opensearch_url="http://localhost:9200", is_appx_search=False)filter = {"bool": {"filter": {"term": {"text": "smuggling"}}}}query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.similarity_search(    "What did the president say about Ketanji Brown Jackson",    search_type="painless_scripting",    space_type="cosineSimilarity",    pre_filter=filter,)  print(docs[0].page_content) print(docs[0].page_content)  query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5) query = "What did the president say about Ketanji Brown Jackson"docs = docsearch.max_marginal_relevance_search(query, k=2, fetch_k=10, lambda_param=0.5)  # this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",) # this is just an example, you would need to change these values to point to another opensearch instancedocsearch = OpenSearchVectorSearch(    index_name="index-*",    embedding_function=embeddings,    opensearch_url="http://localhost:9200",)# you can specify custom field names to match the fields you're using to store your embedding, document text value, and metadatadocs = docsearch.similarity_search(    "Who was asking about getting lunch today?",    search_type="script_scoring",    space_type="cosinesimil",    vector_field="message_embedding",    text_field="message",    metadata_field="message_metadata",)  # This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,) # This is just an example to show how to use AOSS with faiss engine and efficient_filter, you need to set proper values.service = 'aoss' # must set the service as 'aoss'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index-using-aoss",    engine="faiss",)docs = docsearch.similarity_search(    "What is feature selection",     efficient_filter=filter,     k=200,)  # This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,) # This is just an example to show how to use AOS , you need to set proper values.service = 'es' # must set the service as 'es'region = 'us-east-2'credentials = boto3.Session(aws_access_key_id='xxxxxx',aws_secret_access_key='xxxxx').get_credentials()awsauth = AWS4Auth('xxxxx', 'xxxxxx', region,service, session_token=credentials.token)docsearch = OpenSearchVectorSearch.from_documents(    docs,    embeddings,    opensearch_url="host url",    http_auth=awsauth,    timeout = 300,    use_ssl = True,    verify_certs = True,    connection_class = RequestsHttpConnection,    index_name="test-index",)docs = docsearch.similarity_search(    "What is feature selection",     k=200,)  Previous NucliaDB Next Postgres Embedding Installationsimilarity_search using Approximate k-NNsimilarity_search using Script Scoringsimilarity_search using Painless ScriptingMaximum marginal relevance search (MMR)Using a preexisting OpenSearch instanceUsing AOSS (Amazon OpenSearch Service Serverless)Using AOS (Amazon OpenSearch Service) Installationsimilarity_search using Approximate k-NNsimilarity_search using Script Scoringsimilarity_search using Painless ScriptingMaximum marginal relevance search (MMR)Using a preexisting OpenSearch instanceUsing AOSS (Amazon OpenSearch Service Serverless)Using AOS (Amazon OpenSearch Service) CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlogCopyright ¬© 2023 LangChain, Inc. CommunityDiscordTwitterGitHubPythonJS/TSMoreHomepageBlog CommunityDiscordTwitter Community GitHubPythonJS/TS GitHub MoreHomepageBlog More Copyright ¬© 2023 LangChain, Inc. Copyright ¬© 2023 LangChain, Inc. Skip to main content (#docusaurus_skipToContent_fallback) ü¶úÔ∏èüîó LangChain (/) Docs (/docs/get_started/introduction) Use cases (/docs/use_cases) Integrations (/docs/integrations) API (https://api.python.langchain.com) LangSmith (https://smith.langchain.com) JS/TS Docs (https://js.langchain.com/docs)  (https://github.com/hwchase17/langchain) Integrations (/docs/integrations) Callbacks (/docs/integrations/callbacks/) Chat models (/docs/integrations/chat/) Chat loaders (/docs/integrations/chat_loaders/) Document loaders (/docs/integrations/document_loaders/) Document transformers (/docs/integrations/document_transformers/) LLMs (/docs/integrations/llms/) Memory (/docs/integrations/memory/) Retrievers (/docs/integrations/retrievers/) Text embedding models (/docs/integrations/text_embedding/) Agents & Toolkits (/docs/integrations/toolkits/) Tools (/docs/integrations/tools/) Vector stores (/docs/integrations/vectorstores/) Activeloop Deep Lake (/docs/integrations/vectorstores/activeloop_deeplake) Alibaba Cloud OpenSearch (/docs/integrations/vectorstores/alibabacloud_opensearch) AnalyticDB (/docs/integrations/vectorstores/analyticdb) Annoy (/docs/integrations/vectorstores/annoy) Atlas (/docs/integrations/vectorstores/atlas) AwaDB (/docs/integrations/vectorstores/awadb) Azure Cognitive Search (/docs/integrations/vectorstores/azuresearch) BagelDB (/docs/integrations/vectorstores/bageldb) Cassandra (/docs/integrations/vectorstores/cassandra) Chroma (/docs/integrations/vectorstores/chroma) ClickHouse (/docs/integrations/vectorstores/clickhouse) DashVector (/docs/integrations/vectorstores/dashvector) Dingo (/docs/integrations/vectorstores/dingo) DocArray HnswSearch (/docs/integrations/vectorstores/docarray_hnsw) DocArray InMemorySearch (/docs/integrations/vectorstores/docarray_in_memory) Elasticsearch (/docs/integrations/vectorstores/elasticsearch) Epsilla (/docs/integrations/vectorstores/epsilla) Faiss (/docs/integrations/vectorstores/faiss) Hologres (/docs/integrations/vectorstores/hologres) LanceDB (/docs/integrations/vectorstores/lancedb) Marqo (/docs/integrations/vectorstores/marqo) Google Vertex AI MatchingEngine (/docs/integrations/vectorstores/matchingengine) Meilisearch (/docs/integrations/vectorstores/meilisearch) Milvus (/docs/integrations/vectorstores/milvus) MongoDB Atlas (/docs/integrations/vectorstores/mongodb_atlas) MyScale (/docs/integrations/vectorstores/myscale) Neo4j Vector Index (/docs/integrations/vectorstores/neo4jvector) NucliaDB (/docs/integrations/vectorstores/nucliadb) OpenSearch (/docs/integrations/vectorstores/opensearch) Postgres Embedding (/docs/integrations/vectorstores/pgembedding) PGVector (/docs/integrations/vectorstores/pgvector) Pinecone (/docs/integrations/vectorstores/pinecone) Qdrant (/docs/integrations/vectorstores/qdrant) Redis (/docs/integrations/vectorstores/redis) Rockset (/docs/integrations/vectorstores/rockset) ScaNN (/docs/integrations/vectorstores/scann) SingleStoreDB (/docs/integrations/vectorstores/singlestoredb) scikit-learn (/docs/integrations/vectorstores/sklearn) sqlite-vss (/docs/integrations/vectorstores/sqlitevss) StarRocks (/docs/integrations/vectorstores/starrocks) Supabase (Postgres) (/docs/integrations/vectorstores/supabase) Tair (/docs/integrations/vectorstores/tair) Tencent Cloud VectorDB (/docs/integrations/vectorstores/tencentvectordb) Tigris (/docs/integrations/vectorstores/tigris) Typesense (/docs/integrations/vectorstores/typesense) USearch (/docs/integrations/vectorstores/usearch) vearch (/docs/integrations/vectorstores/vearch) Vectara (/docs/integrations/vectorstores/vectara) Weaviate (/docs/integrations/vectorstores/weaviate) Xata (/docs/integrations/vectorstores/xata) Zep (/docs/integrations/vectorstores/zep) Zilliz (/docs/integrations/vectorstores/zilliz) Grouped by provider (/docs/integrations/providers/)  (/) Integrations (/docs/integrations) Vector stores (/docs/integrations/vectorstores/) OpenSearch (https://opensearch.org/) see here for an easy Docker installation (https://hub.docker.com/r/opensearchproject/opensearch) this (https://opensearch.org/docs/latest/search-plugins/knn/index/) ‚Äã (#installation) OpenAIEmbeddings (https://api.python.langchain.com/en/latest/embeddings/langchain.embeddings.openai.OpenAIEmbeddings.html) CharacterTextSplitter (https://api.python.langchain.com/en/latest/text_splitter/langchain.text_splitter.CharacterTextSplitter.html) OpenSearchVectorSearch (https://api.python.langchain.com/en/latest/vectorstores/langchain.vectorstores.opensearch_vector_search.OpenSearchVectorSearch.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) TextLoader (https://api.python.langchain.com/en/latest/document_loaders/langchain.document_loaders.text.TextLoader.html) ‚Äã (#similarity_search-using-approximate-k-nn) ‚Äã (#similarity_search-using-script-scoring) ‚Äã (#similarity_search-using-painless-scripting) ‚Äã (#maximum-marginal-relevance-search-mmr) ‚Äã (#using-a-preexisting-opensearch-instance) ‚Äã (#using-aoss-amazon-opensearch-service-serverless) ‚Äã (#using-aos-amazon-opensearch-service) PreviousNucliaDB (/docs/integrations/vectorstores/nucliadb) NextPostgres Embedding (/docs/integrations/vectorstores/pgembedding) Installation (#installation) similarity_search using Approximate k-NN (#similarity_search-using-approximate-k-nn) similarity_search using Script Scoring (#similarity_search-using-script-scoring) similarity_search using Painless Scripting (#similarity_search-using-painless-scripting) Maximum marginal relevance search (MMR) (#maximum-marginal-relevance-search-mmr) Using a preexisting OpenSearch instance (#using-a-preexisting-opensearch-instance) Using AOSS (Amazon OpenSearch Service Serverless) (#using-aoss-amazon-opensearch-service-serverless) Using AOS (Amazon OpenSearch Service) (#using-aos-amazon-opensearch-service) Discord (https://discord.gg/cU2adEyC7w) Twitter (https://twitter.com/LangChainAI) Python (https://github.com/hwchase17/langchain) JS/TS (https://github.com/hwchase17/langchainjs) Homepage (https://langchain.com) Blog (https://blog.langchain.dev)